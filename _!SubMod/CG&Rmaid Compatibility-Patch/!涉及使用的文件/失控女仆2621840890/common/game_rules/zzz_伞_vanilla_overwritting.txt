#改动：
#仅防御战争政策的条件下：允许监护矩阵继任者使用遏制威胁CB宣战
# used scripted_triggers: 
# Maid_trigger_3_can_declare_war
# Maid_trigger_4_can_release_vassal_from_species
# Maid_trigger_5_can_species_be_assembled

# ^_^

###_|发动战争|	ZOFE/SOFE/S_tnatc/ETCPM/SSNI/rmaid	####################################
#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = {
	##	|附庸关系|	+ZOFE/SOFE/ETCPM
	custom_tooltip = {
		fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
		NOT = {
			has_overlord = ROOT
		}
	}
	##	|战争政策|	+rmaid
	if = {
		limit = {
			exists = root
			ROOT = {
				has_policy_flag = no_wars
				OR = {
					is_subject = no
					overlord = {
						is_same_value = root
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_DECLARE_WAR_POLICY"
			#always = no
			#	rmaid	=|监护矩阵继任者使用遏制威胁CB|
			Maid_trigger_3_can_declare_war = yes
		}
	}
	##	|原版AI|	SOFE会清除这条?
	if = {
		limit = {
			exists = root
			ROOT = {
				is_ai = yes
			}
		}
		ROOT = {
			is_at_war = no
		}
	}
	
	##	S_tnatc
	if = {
		limit = { has_global_flag = nyblax_no_wars }
		custom_tooltip = {
			text = "NYBLAX_NO_WARS"
			always = no
		}
	}
	##	SSNI
	if = {
		limit = {
			use_for_game_mode_survival = yes
		}
		custom_tooltip = {
			fail_text = "WAR_BLOCKED_FOR_SURVIVAL"
			always = no
		}
	}
}

#按照类似始祖蜂巢的格式改写了机械体规则：允许机械体在满足特定条件之一的情况下被释放附庸

###_|释放附庸|	GF/PTep/ETCPM/Eevt/ECI/rmaid/wv	####################################
#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		### +GF/PTep/ETCPM/rmaid/wv
		NOR = {
			##	|v智械|
			AND = {
				has_trait = trait_machine_unit
				prev.this = { is_individual_machine = no }
				#	rmaid
				Maid_trigger_4_can_release_vassal_from_species = no
			}
			AND = {
				has_trait = trait_hive_mind
				NOT = { prev.this = { has_origin = origin_progenitor_hive } }
			}
			AND = {
				NOT = { has_trait = trait_hive_mind }
				prev.this = { has_authority = auth_hive_mind }
			}
			has_trait = trait_mechanical
			can_think = no
			has_trait = trait_clone_soldier_infertile
			has_trait = trait_clone_soldier_infertile_full_potential

			#	ECI
			has_trait = trait_flesh_components
			#	PTep
			has_trait = trait_plentiful_traditions_pt_cocoon
			#	Eevt/ETCPM
			has_trait = trait_memorex_comatos
			has_trait = trait_infested_basic
			AND = {
				has_global_flag = expanded_pops_active
				prev = { NOT = { has_technology = tech_synthetic_leaders } }
				has_trait = trait_mechanical
			}
			#	wv
			AND = {
				OR = {
					has_trait = trait_houki
					has_trait = trait_reanimated_materials
				}				
				NOR = {
					has_trait = trait_psyborg_efficient_processors
					has_trait = trait_psionic
					has_trait = trait_cro_implants_psionics
				}
			}
			has_trait = trait_servitude
			AND = {
				has_trait = trait_dummy
				NOT = {
					prev.this = { 
						has_technology = tech_dummy_leaders
						has_policy_flag = ai_full_rights 
					}
				}
			}
		}
		
		# ETCPM	##################
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = {
					OR = {
						has_valid_civic = civic_fanatic_purifiers
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			is_same_species = prev
		}
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = { has_authority = auth_machine_intelligence }
			}
			OR = {
				has_trait = trait_machine_unit
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = { has_authority = auth_hive_mind }
			}
			OR = {
				has_trait = trait_hive_mind
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
	}
}

###_[物种组装]
#_|基础trgr|	原版智械/原版克隆|is_organic_species|
#_|MOD物种|		wsg/莉莉/adf/swg/kc/DAL/微械/时与空/久远/azl/azlr/GF/PTep/SC/thl	/hiveDLC/wv/多彩/精灵	/EE
# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = { has_trait = trait_exd }
	NAND = {
		has_trait = trait_mechanical
		root.owner = { is_individual_machine = yes }
	}
	NAND = {
		has_virtual_species_trait = yes
		root.owner = {
			is_fallen_empire = no
			has_active_tradition = tr_virtuality_finish
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
	##_|基础条件|
	OR = {
		#_|原版组装|	+azl/GF/wv/久远/时与空
		AND = {
			is_robotic = yes	# 含|是wsg物种|
			NOR = {
				has_trait = trait_robot_mind_relic_core	# azl
				has_trait = trait_reassembler			# 时与空
			}
			KZ_VOY_trgr_plnt_ASSEMBLY = yes	# 久远

			#	wv
			if = { limit = { has_trait = trait_dummy }
				if = { limit = { root.owner = { has_origin = origin_garbage_princesses } }
					root = { 
						OR = {
							has_building = building_enigmatic_assembly_plant
							num_assigned_jobs = {
								job = dummicist
								value > 0
							}
						}
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
				else = {
					root.owner = { has_technology = tech_dummy_workers }
					root = {
						num_assigned_jobs = {
							job = dummicist
							value > 0
						}
					}
					root = {
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
			}
			#	久远
			else_if = { limit = { has_trait = trait_KZ_VOY_magic_doll }
				KZ_VOY_can_assemble_magic_doll = yes
			}
			#	GF
			else_if = { limit = { has_trait = GF_trait_doll }
				root.owner = {
					GF_can_build_doll_species = yes
				}
			}
			#	thl
			else_if = { limit = { has_trait = trait_thl_doll }
				THL_trgr_spcs_RULE_doll_assembly = yes
			}
			#_|v默认|	+azl
			else = {
				root = {
					check_modifier_value = { modifier = planet_pop_assembly_add	value > 0 }
					owner = {
						NOR = {# 这类mod国家不组装机器人
							has_country_flag = synth_assembly_stopped
							# azl
							has_authority = auth_azur_lane_1
							has_authority = auth_azur_lane_2
							has_authority = auth_azur_lane_K
						}
					}
				}
			}
		}
		#_|原版克隆|	+ECI/星海皇帝/thl	/wv
		AND = {
			is_organic_species = yes
			#_|v蜂群|	+ECI
			if = {
				limit = {
					OR = {
						has_trait = trait_hive_mind
						has_trait = trait_psionic_link	# ECI
					}
				}
				root.owner = { is_hive_empire = yes }
			}
			#_|v植物|
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v鲸族|
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v克隆军|		+星海帝皇
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					OR = {
						has_building = building_clone_army_clone_vat
						#	星海帝皇
						has_building = building_clone_guard_clone_vat
						has_building = building_clone_vats
					}
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			#_|wv|
			else_if = {
				limit = { has_species_flag = UGRC_flg_spcs_RULE_wv }	# 魔女物种
				if = {
					limit = { 
						OR = {
							has_trait = trait_houki 
							has_trait = trait_reanimated_materials
						}
					}
					root = {
						OR = {
							num_assigned_jobs = {
								job = matter_reanimator
								value > 0
							}
							has_building = building_clone_vats
							has_building = building_dimensional_instrument
						}
					}
					if = {
						limit = { has_trait = trait_houki }
						root.owner = {
							has_country_flag = newbirth_houki
							NOT = { has_country_flag = max_houki_number_reached }
						}
					}
				}
				else_if = { # for Familiars
					limit = {
						has_trait = trait_servitude
					}
					root = {
						OR = {
							num_assigned_jobs = {
								job = familiarizer
								value > 0
							}
							has_building = building_clone_vats
							has_building = building_familiar_clone_vat
						}
					}
				}
				else_if = { # for Familiars
					limit = {
						has_trait = trait_reanimated_materials
					}
					root = {
						OR = {
							has_building = building_object_converter
							has_building = building_object_converter_2
						}
					}
				}
			}
			#_|通用|=|存在克隆+特殊spcs|		+FW/星海帝皇/ECI/thl
			else = {
				root = {
					#	FW	|全能条件|
					check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 }
					#OR = {
					#	#	vanilla
					#	has_building = building_clone_vats	# |ap_engineered_evolution/tr_genetics_adopt|
					#	has_modifier = tiyanki_trophy
					#	owner = { has_modifier = syamelles_curse }
					#	AND = {
					#		has_building = building_posthumous_employment_center
					#		owner = { has_civic = civic_permanent_employment }
					#	}
					#	has_planet_flag = can_organic_assemble_flag #for mod compatibility
					#	
					#	#	FW
					#	check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 }
					#	#	星海帝皇
					#	has_building = building_clone_guard_clone_vat
					#	#	ECI
					#	has_building = building_advanced_clone_vats
					#	#	thl
					#	THL_trgr_plnt_RULE_can_assembly_organic = yes
					#}
				}
			}
		}
		is_archetype = LILY						# 莉莉
		is_archetype = Dolls					# adf
		is_archetype = STARSHIPGIRLS			# swg
		is_archetype = KANMUSU					# kc
		is_archetype = DATEALIVE				# DAL
		is_archetype = DPURIFIER				# SC|净化者|
		is_archetype = ASCENDED					# EE
		#	wsg
		is_archetype = WARSHIPGIRL
		is_archetype = SHENHAI
		is_archetype = UNITED_FLEET
		is_archetype = NANITES_CROP
		#	久远
		KZ_VOY_trgr_plnt_CLONE = yes
		#	azl/azlr
		AND = {
			OR = {
				is_Azur_Lane_organic_species = yes
				is_KANSEN_species = yes
			}
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
			}
		}
		#	PTep
		AND = {
			has_trait = trait_plentiful_traditions_pt_cocoon
			root.owner = { has_ascension_perk = ap_total_assimilation }
		}
		#	精灵
		ELF_species_assembled_rules = yes
		#	多彩
		AND = { has_global_flag = love_between_us	# |安装|
			OR = {
				#雌伏于阴影之下起源 允许孤雌生殖物种组装
				AND = {
					has_trait = trait_suc_parthenogenesis
					root = {
						owner = { has_origin = origin_female_in_shadow }
					}
				}
				#允许播种者组装
				has_trait = trait_sowing_and_breeding
				#Y触之虫组装Y奴
				AND = {
					is_species_class = PAR
					root = {
						owner = { has_country_flag = parasite_mind_flag }
						any_owned_pop = { has_job = ten_nest_worker }
					}
				}
				#虫与自然组装
				AND = {
					OR = {
						is_species_class = TEN
						is_species_class = PAR
					}
					root = { owner = { has_valid_civic = civic_parasite_and_nature } }
				}
				#Y触圣女组装Y触造物
				AND = {
					is_species_class = Magical_Tentacle
					root = {
						owner = { has_country_flag = abstinence_flag }
						any_owned_pop = { has_job = procreate_doll }
					}
				}
				#圣光创造圣女
				AND = {
					has_trait = trait_DC_ethic_asceticism
					root = {
						OR = {
							has_building = building_holylight_clone_vats
							has_building = building_world_tree_0
							has_building = building_world_tree_1
							has_building = building_world_tree_2
							has_building = building_world_tree_3
							has_building = building_world_tree_4
							has_building = building_world_tree_5
							AND = {
								exists = owner
								has_holding = { holding = holding_world_tree owner = owner.overlord }
							}
							owner = { has_origin = origin_INN_destruction_light }
						}
					}
				}
			}
		}
	}

	##	微械
	root.owner = { NOT = { has_modifier = modifier_ban_assemble } }
	##	hiveDLC
	NAND = {
		has_trait = trait_machine_central
		root.owner = { has_valid_civic = civic_machine_replicators }
	}
	##	精灵
	ELF_can_not_be_assembled_species = yes
	##	久远
	if = {
		limit = { 
			OR = {
				has_trait = trait_KZ_VOY_terranoid_dragon
				has_trait = trait_KZ_VOY_terranoid_dragon_SP
			}
		}
		KZ_VOY_trgr_plnt_CLONE = yes
	}
	##	rmaid
	Maid_trigger_5_can_species_be_assembled = yes
}