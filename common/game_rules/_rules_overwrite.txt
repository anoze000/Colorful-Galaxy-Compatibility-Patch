#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

#########################################################################################################

#       通用判断扳机flag / Universal Judgment Trigger flag:  community_mod_rules_trigger

#		运行机制:同时拥有前置条件flag和任意判定flag时将flag所在对象踢出原版判定条件,并应用flag所设定的规则.
#		各规则flag使用  "community_[规则名称]_<true/false>" flag 作为判定依据. 部分条目可能有些许变化,依照实际为准.
#		Operating mechanism: When there is a precondition flag and an arbitrary judgment flag at the same time, 
#		the object where the flag is located is kicked out of the original judgment condition, and the rules set by the flag are applied.
#		Each rule flag uses "community_[rule name]_<true/false>" flag as the judgment basis.

#########################################################################################################

###_++++ z fw universial 游戏规则 范用兼容框架	############################################################################################################
#_引用[script trigger]必须有placeholder, 且always = no

#_list		可宿敌/允许宣称
#			星球生存/UGRC参选
#			UGRC产生领袖/UGRC军事领袖
#			释放附庸/发动战争/可殖民/环境改造/殖民物种/自由思潮
#			UGRC幸福感/可敌对	/UGRC可繁殖
#			物种组装/轨道轰炸/全图视野
#_定位符	地面入侵通知
#			UGRC修理/产生残骸	/UGRC星系管制/可跃迁/占领军
#			UGRC传感器/跃迁管制
#			可迁移の人口
#			UGRC新地/UGRC犯罪	/强制灭绝
#			国家可建公司/国家支持公司/星球支持公司	/UGRC罪企
#			杂交许可
#			银河市场/星海议会/星海帝国
#			pop可移民/星球可移民
#			基因修饰^
#			解雇领袖/交易领袖/交易舰队	/地改候选	/空间站建设许可

#_tag		UGRC标签
#_trgr		其他堕落/巨企国家


#_|FW|		框架
#_|LCTR|	高级定位器
#_|伞优化|	performance plus
#_|产业革命|
#_|AAR|		AAR
#_|UGRC|	一些flag

#_|LSP|		孤勇者
#_[ev]太虚												<210420>
#_[古代帝国]											<210420>

#_[wsg]		舰妈										<220921>	|舰r激活|	+定做trgr
#_[swg]		星舰娘										<200814>
#_[微械]	微械革命									<220202>
#_[GF]		少女前线									<200804>
#_[阿夸]												<210819>	|阿夸激活|
#_[kc]		舰队collection								<210420>
#_[azl]		碧蓝航线DLC									<210420>
#_[azlr]	碧蓝航线R									<210915>
#_[adf]		AshArms灰烬战线								<210420>
#_|涅槃|	Nirvana Empire Project						<220921>
#_[pkman]	伊布帝国v1.22								<210501>
#_|驴岛|	明日方舟									<240206>
#_[魔圆]	Madoka Magica NEW							<200807>
#_[TAC]		深渊协议									<200807>
#_[SC]		stellarisCraft								<220329>
#_[莉莉]	AL突击莉莉									<220404>
#_[久远]	KZ_VOY										<220411>
#_[星海帝皇]											<220414>
#_[ECI]	华章更多思潮									<220416>
#_[rmaid/MECR]	失控女仆	rogue maid					<220624>
#_|wv|		魔女之旅-星海旅人							<231119>
#_[SRA]		星规阵列									<220821>
#_[ARP]		苍蓝钢铁的奇葩								<220826>
#_[时空]												<221227>
#_[thl]		东方领袖									<230720>
#_[spth]	东方繁星录									<230720>
#_|涅托|												<231127>
#_[无言]	不明mod
#_[失落帝国历史]
#_[失控]	时空										<250201>

#_[多彩]	love_between_us
#_[精灵]	ELF_species

#_[MEM]													<210618>
#_[ACOT]												<210420>
#_[SOFE]	始源										<210420>
#_[ZOFE]	巅峰					
#_[AOT]		Acquisition of Technology					<201104>	ACOT+zofe兼容
#_[EE]		永恒										<200804>
#_[bwm]		LEX Temp Fix								<210420>
#_[Ereb]	ethic_rebuild								<200805>
#_[WS]		Wild Space									<200807>	sys_trgr[is_ws_system]
#_[twinks]	Twinks Atlanteans							<201230>

#_[AUP]		~~Ariphaos Unofficial Patch					<210420>
#_[Sexp]	Sensor Expansion							<211029>

#_[HFE]		Human Fallen Empires						<230109>	glbl_flg	[hfe_installed]
#_[hiveDLC]	Hive DLC: Forgotten Queens					<210420>	glbl_flg	[complex_hive]
#_[UR]		Underground Realms							<210420>
#_[MCA]		More Corporate Authorities for 3.x			<210501>
#_[致命风暴]	A Deadly Tempest						<211029>
#_|SCFE|			Inny Forgotten Empires 3.12				<240521>

#_[Giga]												<201205>
#_[Ehof]	Event Horizon Offset Facility				<200805>
#_[SMCO]	Slightly More Celestial Objects				<200807>
#_[seooc]	Some Events of Outside Cluster				<200807>
#_[PTep]	Plentiful Traditions - Extra Perks			<200810>
#_[S_tnatc]	Storypack: The Nyblax and the Collector		<201114>
#_[AAR]											<211029>
#_[ETCPM]	Expanded Traits, Civics, Pops, and More		<211029>
#_[Eevt]	Expanded_Events								<211029>
#_[EFevt]	Endless Frontier: An Event Mod				<211029>

#_[PD]													<201005>	|PD激活|=planetarydiversity
#_[PDew]	Planetary Diversity - Exotic Worlds			<201114>
#_[PDhab]	Planetary Diversity - Habitats				<211029>
#_[RS星云]	Real Space Nebulae							<211029>
#_[RSnf]	Real Space - New Frontiers					<200807>
#_[行星国度]	Planet States							<211029>
#_[死灵入侵]	SSNI									<221103>


###_|可宿敌|	ZOFE/EE/ev	####################################
#Root = target country
#This = country
is_valid_rival = { #有效竞争对手
	custom_tooltip = {
		fail_text = INVALID_RIVAL_DESC
		root = {
			OR = {
				prev = { 
					NOR = { 
						is_country_type = default 
						#	ZOFE
						is_country_type = ascended_empire
						is_country_type = lost_empire
						#	EE
						is_country_type = eternal_empire
						#	ev
						is_country_type = default_ev
					} 
				}
				AND = {
					relative_power = { who = prev value >= inferior }
					OR = {
						relative_power = { who = prev value <= superior }
						prev = { has_policy_flag = diplo_stance_animosity }
					}
				}
				is_country_type = mirrored_country # Mirrored Empire doesn't have relative power but we want to be rivals anyway
			}
		}
	}
}


###_|允许宣称|		ev	/ZOFE/SOFE/EE/ETCPM	/AAR	####################################
# Root = claimer
# This = system
can_add_claim = { #可宣称
	hidden_trigger = {
		if = {
			limit = {
				root = { 
					NOR = { 
						is_country_type = default 
						#	ZOFE
						is_country_type = ascended_empire
						is_country_type = lost_empire
						#	ev
						is_country_type = default_ev
					} 
				}
			}
			always = yes
		}
	}
	## +ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = { 
				OR = {
					has_policy_flag = unrestricted_wars
					# ETCPM
					AND = {
						has_global_flag = expanded_pops_active
						OR = {
							NOT = { has_valid_civic = civic_closed_collective }
							NOT = { has_valid_civic = civic_closed_network }
						}
					}
				} 
			}
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
			# ETCPM
			AND = {
				has_global_flag = expanded_pops_active
				root = {
					has_policy_flag = liberation_wars
					has_authority = auth_democratic
					has_valid_ai_personality = yes
					has_ai_personality = democratic_crusaders
				}
				owner = { NOT = { has_authority = auth_democratic } }
				owner = { NOT = { has_authority = auth_cooperative } }
			}
		}
	}
	## +ev/ZOFE/SOFE
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					#	ZOFE
					is_country_type = ascended_empire
					is_country_type = lost_empire
					#	ev
					is_country_type = default_ev
					#	EE
					is_country_type = eternal_empire
					#	SOFE
					is_country_type = sbtg_stellarborne_empire_active	
					is_country_type = sofe_light_seeker
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = no }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM_LITHOID
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_machine_assimilator } }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_fanatic_purifiers }
			NOT = {	owner = { is_same_species = root } }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_machine_terminator }
			owner = {
				NOR = {
					is_same_species = root
					has_country_flag = synthetic_empire
					is_machine_empire = yes
					is_individual_machine = yes
				}
			}
		}
	}
	## +ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
					# ETCPM
					has_valid_civic = civic_infestation
				}
			}
			root = {
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
					# ETCPM
					has_valid_civic = civic_infestation
				}
			}
		}
	}
	##	ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_infestation } }
	}
	##	AAR
	custom_tooltip = {
		fail_text = AAR_failtip_PREROGATIVE_no_claim
		NOT = { has_star_flag = AAR_flg_sstm_NO_claim@ROOT }	# |AAR禁止宣称|
	}
}


###_[ZOFE/SOFE/EE]	####################################
# Root = taker country
# This = giver country
can_get_claim_from_lost_system = { #可获得丢失星系的宣称
	#_+[ZOFE/SOFE/EE]
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
			# ZOFE
			is_country_type = ascended_empire
			is_country_type = lost_empire
			# EE
			is_country_type = eternal_empire
			# SOFE
			is_country_type = sbtg_stellarborne_empire_active
			is_country_type = sofe_light_seeker
		}
		root = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				# ZOFE
				is_country_type = ascended_empire
				is_country_type = lost_empire
				# EE
				is_country_type = eternal_empire
				# SOFE
				is_country_type = sbtg_stellarborne_empire_active
				is_country_type = sofe_light_seeker
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			has_valid_civic = civic_fanatic_purifiers
			NOT = {	is_same_species = root }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			has_valid_civic = civic_machine_terminator
			NOR = {
				is_same_species = root
				has_country_flag = synthetic_empire
				is_machine_empire = yes
			}
		}
	}
}

# Root = Bombarding country
# This = Receiving country
should_surrender_planets_to = { #应该吧轰炸的行星拥有者交给到目标
	OR = {
		AND = { #香草 vanilla
			OR = {
				NAND = { #排除条件 Exclusions
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_should_surrender_planets_Receiving_true
						has_country_flag = community_should_surrender_planets_Receiving_false
					}
				}
				NAND = { #排除条件 Exclusions
					root = {
						has_country_flag = community_mod_rules_trigger
						has_country_flag = community_should_surrender_planets_Bombarding_false
					}
				}
			}
			#
			is_country_type = default
			is_gestalt = no
			is_homicidal = no
			is_crisis_faction = no
			is_primitive = no
			root = {
				is_homicidal = no
				is_crisis_faction = no
				is_primitive = no
				is_country_type = default
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_should_surrender_planets_Receiving_true
				NOT = { has_country_flag = community_should_surrender_planets_Receiving_false }
			}
			root = {
				NOT = { has_country_flag = community_mod_rules_trigger }
				NOT = { has_country_flag = community_should_surrender_planets_Bombarding_false }
			}
		}
	}
}

#Root = country
#This = species
species_has_citizenship = { #物种拥有公民身份
	has_citizenship_type = { type = citizenship_full country = root }
}

#Root = country
#This = pop_group
should_abduct_pop_group = { #应该绑架pop 组
	planet = {
		exists = owner
		owner = { is_hostile = root }
	}
	has_virtual_species_trait = no
	NAND = {
		has_citizenship_type = { type = citizenship_purge country = root }
		NOR = {
			has_purge_type = { type = purge_matrix country = root }
			has_purge_type = { type = purge_processing country = root }
			has_purge_type = { type = purge_labor_camps country = root }
			has_purge_type = { type = purge_necrophage country = root }
			has_purge_type = { type = purge_cosmogenesis_lathe_resettle country = root }
		}
	}
}

###_|星球生存|	GF/hiveDLC/PDew/GF/时空/thl	####################################	决定宜居度
#Root = planet
#This = species
species_can_live_on_planet = { #物种可生活在行星
	hidden_trigger = {
		exists = root #somehow this appeared in the error log. No idea how!
		##_|v机械世界|	+GF
		if = {
			limit = {
				root = { is_planet_class = pc_machine }
			}
			OR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
				AND = {
					has_trait = trait_cybernetic
					exists = root.owner
					root.owner = {
						is_machine_empire = yes
						OR = {
							has_civic = civic_machine_assimilator # Assimilator empire
							has_ascension_perk = ap_mechromancy
						}
					}
				}
				#	GF
				has_trait = GF_trait_doll
			}
		}
		##_|v蜂巢世界|
		else_if = {
			limit = {
				root = { is_planet_class = pc_hive }
			}
			OR = {
				has_trait = trait_hive_mind
				AND = { #Necrophage Hive Mind can have Necrophytes
					exists = root.owner
					root.owner = {
						is_hive_empire = yes
						has_origin = origin_necrophage
						prev = { species_can_be_necrophaged = yes }
					}
				}
			}
		}
	}
	#	V克隆大军
	if = {
		limit = {
			exists = root.owner
			root.owner = {
				has_origin = origin_clone_army
			}
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
		}
		custom_tooltip = {
			fail_text = CLONE_ARMY_FORCE_DECLINE
			root = {
				check_variable = { which = clone_pops_missing value >= 0 }
			}
		}
	}
	#	v荒野帝国
	custom_tooltip = {
		fail_text = WILDERNESS_NATURAL_WORLDS_DECLINE
		if = {
			limit = {
				has_trait = trait_wilderness
			}
			root = { is_habitable_for_wilderness = yes }
		}
	}

	custom_tooltip = {
		fail_text = WILDERNESS_DEAD_WORLD
		if = {
			limit = {
				has_trait = trait_wilderness
				exists = root.owner
			}
			root.owner = { is_wilderness_empire = yes }
		}
	}
	##	GF 神秘机械星球
	NAND = {
		is_robotic = no
		root = { is_planet_class = pc_GF_sf_machine }
	}
	##	hiveDLC
	NAND = {
		has_trait = trait_digital
		root = { NOT = { is_planet_class = pc_matryoshka } }
	}
	##	PDew
	if = { limit = { has_global_flag = planetarydiversity }
		UGRC_trgr_spcs_PD_plnt_habitable = yes	# |UGRC条件_PD可居住|
	}
	##	时空
	TIME_RULE_trgr_spcs_CAN_live_on_planet = yes
	##	thl
	THL_trgr_spcs_RULE_can_live_on_planet = yes
}

#Root = planet
#This = species
species_has_uncapped_habitability_on_planet = { #物种有无上限的宜居度
	has_trait = trait_auto_hab_preference
	root = {
		exists = owner
		owner = {
			has_mutation_environmental_integration_tradition = yes
		}
	}
}


###_|UGRC参选|	####################################	UGRC定制	提升不大|384|17%|
#Note: this is also used in pop faction support calculations
#Root = country
#This = pop_group
can_vote_in_democratic_election = { #可在民主选举中投票
	has_pop_group_flag = UGRC_flg_pop_RULE_can_vote	# |UGRC标签|
}

#This = leader
should_pay_for_leader_upkeep = { #应当支付领袖维护
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_should_pay_for_leader_upkeep_true
					has_leader_flag = community_should_pay_for_leader_upkeep_false
				}
			}
			#
			NOR = {
				AND = {
					exists = owner
					owner = {
						is_gestalt = yes
					}
					is_councilor = yes
				}
				has_trait = leader_trait_spacebender
				has_leader_flag = should_not_have_upkeep
			}
			NOR = {
				has_leader_flag = marauder_merc_leader
				has_leader_flag = hired_admiral_merc_leader
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_should_pay_for_leader_upkeep_true
				NOT = { has_leader_flag = community_should_pay_for_leader_upkeep_false }
			}
		}
	}
}

#Checks whether any leaders (scientists etc) can be formed from this pop
#Root = country
#This = pop_group
can_generate_leader_from_pop_group = { #可从pop中生成领袖
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_group_flag = community_mod_rules_trigger
				OR = {
					has_pop_group_flag = community_can_generate_leader_from_pop_group_true
					has_pop_group_flag = community_can_generate_leader_from_pop_group_false
				}
			}
			#
			NOT = { has_pop_group_flag = UGRC_flg_pop_RULE_can_generate_leader_DISABLED }	# |UGRC标签|
		}
		AND = { #国防部 MOD
			has_pop_group_flag = community_mod_rules_trigger
			AND = {
				has_pop_group_flag = community_can_generate_leader_from_pop_group_true
				NOT = { has_pop_group_flag = community_can_generate_leader_from_pop_group_false }
			}
		}
	}
}

#Checks whether this species is eligible to become rulers through elections
#Root = country
#This = species
can_generate_leader_from_species = { #可从物种中生成领导人
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_generate_leader_from_species_true
					has_species_flag = community_can_generate_leader_from_species_false
				}
			}
			#
			is_sapient = yes
			OR = {
				NAND = {
					NOT = { root = { has_technology = "tech_synthetic_leaders" } }
					has_trait = "trait_mechanical"
				}
				has_citizenship_type = { type = citizenship_full country = root }
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_generate_leader_from_species_true
				NOT = { has_species_flag = community_can_generate_leader_from_species_false }
			}
		}
	}
}

###_|UGRC产生领袖|	FW/GF/无言/Ereb/hiveDLC/PTep/Eevt/ETCPM/莉莉/ECI/rmaid/wv	待修
#Checks whether this species can become espionage assets (note that some checks are also done in code)
#Root = country
#This = species
can_create_espionage_asset_from_species = { #可从物种创建间谍
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_create_espionage_asset_from_species_true
					has_species_flag = community_can_create_espionage_asset_from_species_false
				}
			}
			#
			OR = {
				NOT = { has_trait = "trait_mechanical" }
				root = { has_technology = "tech_droid_workers" }
			}
		}
		AND = {	#国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_create_espionage_asset_from_species_true
				NOT = { has_species_flag = community_can_create_espionage_asset_from_species_false }
			}
		}
	}
}

###_|UGRC军事领袖|	####################################	GF/hiveDLC	待修
#Root = country
#This = pop_group
can_generate_military_leader_from_pop_group = { #可从pop创建军事领袖
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_group_flag = community_mod_rules_trigger
				OR = {
					has_pop_group_flag = community_can_generate_military_leader_from_pop_group_true
					has_pop_group_flag = community_can_generate_military_leader_from_pop_group_false
				}
			}
			#
			NOT = { has_pop_group_flag = UGRC_flg_pop_RULE_can_generate_military_leader_DISABLED }	# |UGRC标签|
		}
		AND = { #国防部 MOD
			has_pop_group_flag = community_mod_rules_trigger
			AND = {
				has_pop_group_flag = community_can_generate_military_leader_from_pop_group_true
				NOT = { has_pop_group_flag = community_can_generate_military_leader_from_pop_group_false }
			}
		}
	}
}

#Root = species
#This = planet
can_generate_army_from_planet = { #可从星球生成陆军
	NOT = {
		is_planet_class = pc_cosmogenesis_world
	}
	any_owned_species = {
		is_same_species = root
		can_be_soldier = yes
	}
}

###_|释放附庸|	FW/ZOFE/SOFE/EE	####################################
#Root = planet
#This = country
can_release_vassal = { #可以释放附庸
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_release_vassal_true
					has_country_flag = community_can_release_vassal_false
				}
			}
			#
			custom_tooltip = {
				fail_text = default
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
			custom_tooltip = {
				fail_text = default
				NOT = { has_valid_civic = civic_machine_terminator }
			}
			custom_tooltip = {
				fail_text = default
				NOT = { has_valid_civic = civic_machine_assimilator }
			}
			custom_tooltip = {
				fail_text = default
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
			# FW		堕落释放的还是堕落,但不可有多个堕落
			Root = {
				exists = owner
				owner = {
					NOR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# ZOFE/EE/SOFE
			custom_tooltip = {
				fail_text = default
				NOR = {
					is_country_type = ascended_empire			# ZOFE
					is_country_type = lost_empire				# ZOFE
					is_country_type = eternal_empire			# EE
					is_country_type = sbtg_stellarborne_empire_active	# SOFE
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_release_vassal_true
				NOT = { has_country_flag = community_can_release_vassal_false }
			}
		}
	}
}

#Root = species
#This = country
can_release_vassal_from_species = { #可以从物种释放附庸
	OR = {
		AND = { #香草 vanilla
			root = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions
					has_species_flag = community_mod_rules_trigger
					OR = {
						has_species_flag = community_can_release_vassal_from_species_true
						has_species_flag = community_can_release_vassal_from_species_false
					}
				}
			}
			#
			root = {
				is_sapient = yes
				### +GF/PTep/ETCPM/rmaid/wv
				NOR = {
					AND = {
						has_trait = trait_machine_unit
						prev.this = { is_individual_machine = no }
						#	rmaid
						Maid_trigger_4_can_release_vassal_from_species = no
					}
					AND = {
						has_trait = trait_hive_mind
						NOR = { 
							prev.this = { has_origin = origin_progenitor_hive } 
							Maid_trigger_7_can_release_vassal_from_species_release_hive = yes
						}
					}
					AND = {
						NOT = { has_trait = trait_hive_mind }
						prev.this = { is_hive_empire = yes }
					}
					has_trait = trait_mechanical
					can_think = no
					has_trait = trait_clone_soldier_infertile
					has_trait = trait_clone_soldier_infertile_full_potential
					#	ECI
					has_trait = trait_flesh_components
					#	PTep
					has_trait = trait_plentiful_traditions_pt_cocoon
					#	Eevt/ETCPM
					has_trait = trait_memorex_comatos
					has_trait = trait_infested_basic
					AND = {
						has_global_flag = expanded_pops_active
						prev = { NOT = { has_technology = tech_synthetic_leaders } }
						has_trait = trait_mechanical
					}
					#	wv
					AND = {
						OR = {
							has_trait = trait_houki
							has_trait = trait_reanimated_materials
						}				
						NOR = {
							has_trait = trait_psyborg_efficient_processors
							has_trait = trait_psionic
							has_trait = trait_cro_implants_psionics
						}
					}
					has_trait = trait_servitude
					AND = {
						has_trait = trait_dummy
						NOT = {
							prev.this = { 
								has_technology = tech_dummy_leaders
								has_policy_flag = ai_full_rights 
							}
						}
					}
					#	多彩
					#多彩附属物种不能成为附庸
					is_cg_vassal_species = yes
				}
			}
		}
		AND = { #国防部 MOD
			root = { 
				has_species_flag = community_mod_rules_trigger
				AND = {
					has_species_flag = community_can_release_vassal_from_species_true
					NOT = { has_species_flag = community_can_release_vassal_from_species_false }
				}
			}
		}
	}
}

# Root = species
# This = country
can_generate_army_from_species = { #可从物种产生陆军
	OR = {
		AND = { #香草 vanilla
			root = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions
					has_species_flag = community_mod_rules_trigger
					OR = {
						has_species_flag = community_can_generate_army_from_species_true
						has_species_flag = community_can_generate_army_from_species_false
					}
				}
			}
			#
			root = {
				OR = {
					has_military_service_type = { type = military_service_full country = prev }
					has_military_service_type = { type = military_service_limited country = prev }
					AND = {
						exists = prev
						prev = {
							is_primitive = yes
						}
					}
				}
			}
		}
		AND = { #国防部 MOD
			root = { 
				has_species_flag = community_mod_rules_trigger
				AND = {
					has_species_flag = community_can_generate_army_from_species_true
					NOT = { has_species_flag = community_can_generate_army_from_species_false }
				}
			}
		}
	}
}

# Root = country
# This = species
can_modify_species = { #可以修饰物种
	OR = {
		AND = { #香草 vanilla
			root = { #排除条件 Exclusions
				NAND = {
					has_species_flag = community_mod_rules_trigger
					OR = {
						has_species_flag = community_can_generate_army_from_species_true
						has_species_flag = community_can_generate_army_from_species_false
					}
				}
			}
			#
			# Can't modify root Species during Ascension Situations
			if = {
				limit = {
					is_same_species = ROOT
				}
				custom_tooltip = {
					fail_text = "ASCENSION_SITUATION_ONGOING"
				
					ROOT = {
						NOT = {
							any_situation = {
								has_ascension_situation_ongoing = yes
							}
						}
					}
				}
			}
			# Organic Species
			if = {
				limit = {
					OR = {
						is_archetype = BIOLOGICAL
						is_archetype = LITHOID
					}
					NOR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				custom_tooltip = {
					fail_text = "NEEDS_GENE_TAILORING_OR_INTERGRATED_ANATOMY"
				
					ROOT = {
						OR = {
							has_technology = tech_gene_tailoring
							has_active_tradition = tr_cybernetics_integrated_anatomy
							has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
						}
					}
				}
			}
			# Clone Army
			if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				custom_tooltip = {
					fail_text = "NEEDS_GENE_TAILORING_AND_CLONE_SYNTHESIZATION"
					ROOT = {
						has_technology = tech_gene_tailoring
						has_active_tradition = tr_cloning_somatic_synthesization_clone_army
					}
				}
			}
			# Robots & Machines
			else_if = {
				limit = {
					OR = {
						is_archetype = ROBOT
						is_archetype = MACHINE
					}
				}
				if = {
					limit = {
						ROOT = {
							OR = {
								AND = { ## organic trying to robomod
									is_individual_machine = no
									is_machine_empire = no
								}
								AND = { ## Machines with origins that delay them
									OR = {
										is_individual_machine = yes
										is_machine_empire = yes
									}
									OR  = {
										has_origin = origin_life_seeded
										has_origin = origin_ocean_machines
										has_origin = origin_void_machines
										has_origin = origin_shattered_ring
									}
								}
							}
						}
					}
					custom_tooltip = {
						fail_text = "NEEDS_ROBOT_MODDING"
					
						ROOT = {
							OR = {
								has_technology = tech_robomodding
								has_technology = tech_robomodding_m
							}
						}
					}
				}
			}
			# Self-Modified
			custom_tooltip = {
				fail_text = "CANNOT_MODIFY_SELF_MODIFIED_SPECIES"
				AND = {
					NOT = {
						has_trait = trait_self_modified
					}
					#is_same_species = root
				}
			}
			# Malleable Genes
			custom_tooltip = {
				fail_text = "CANNOT_MODIFY_MALLEABLE_GENES_SPECIES"
				NOT = {
					has_trait = trait_malleable_genes
				}
			}
		}
		AND = { #国防部 MOD
			root = {
				has_species_flag = community_mod_rules_trigger
				AND = {
					has_species_flag = community_can_generate_army_from_species_true
					NOT = { has_species_flag = community_can_generate_army_from_species_false }
				}
			}
		}
	}
}

# Root = country
# This = species
can_uplift_species = { #可以提升物种
	custom_tooltip = {
		fail_text = "CANNOT_UPLIFT_NASCENT"
		NOT = {
			has_trait = trait_nascent_stage
		}
	}
}

###_[ECI/ETCPM]	####################################
#This = country, suject
#Root = country, overlord
#From = target solar system
#This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
subject_can_expand = { #附庸国可以扩张
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_subject_can_expand_true
					has_country_flag = community_subject_can_expand_false
				}
			}
			# Exalted domination totally disallow vassal expansion
			NOT = { has_global_flag = has_exalted_domination_mod }
			#
			#_|宗主条件|	+ECI/ETCPM
			root = { 
				OR = {
					has_valid_civic = civic_feudal_realm
					# ECI
					has_valid_civic = civic_aristocratic_elite
					has_valid_civic = civic_coalition_government
					has_valid_civic = civic_altruism
					# ETCPM
					has_policy_flag = vassal_expansion_allowed
				}
			}
			#_|自身条件|
			NAND = {
				is_ai = yes
				AND = {
					exists = overlord
					overlord = { has_origin = origin_imperial_vassal_overlord }
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_subject_can_expand_true
				NOT = { has_country_flag = community_subject_can_expand_false }
			}
		}
	}
}

###_[ZOFE/ACOT/SOFE/行星国度/seooc]	####################################
#Root = country, attacker
#This = country, target
#This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
can_take_hostile_actions = { #可采取敌对行动
	if = {
		limit = {
			ROOT = {
				NOT = { has_policy_flag = first_contact_attack_allowed }
			}
			NOR = {
				is_hostile = ROOT
				has_communications = ROOT
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		limit = {
			has_country_flag = fotd_seperatist_country@ROOT
			ROOT = {
				has_origin = origin_fear_of_the_dark
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FOTD"
			always = no
		}
	}
	else_if = {
		limit = {
			AND = {
				NOT = { has_country_flag = hostile_to_nomads }
				ROOT = {
					is_country_type = nomad
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	## +ZOFE
	else_if = {
		#attacking primitives with non-interference
		limit = {
			ROOT = {
				OR = {
					is_country_type = default
					is_country_type = ascended_empire	# ZOFE
				}
				NOT = {
					has_policy_flag = interference_aggressive
				}
			}
			is_primitive = yes
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NATIVE_INTERFERENCE"
			always = no
		}
	}
	## +ZOFE
	else_if = {
		limit = {
			is_primitive = yes
			ROOT = { 
				OR = {
					is_country_type = default
					is_country_type = ascended_empire	# ZOFE
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
			is_country_type = faction
			root = {
				any_owned_planet = {
					exists = controller
					controller = {
						is_same_value = prevprevprev
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = yes
		}
	}
	else_if = {
		limit = {
			exists = overlord
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			exists = overlord
			overlord = { is_same_value = root }
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_OVERLORD"
			always = no
		}
	}
	# ACOT/SOFE	######################################################
	else_if = {
		limit = {
			THIS = { is_country_type = sbtg_stellarborne_empire_passive }
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {#_|SOFE|	永远无法攻击沉默的始源
		limit = {
			THIS = {
				OR = {
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = yes
		}
	}
	else_if = {
		limit = {
			ROOT = {
				OR = {
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	# 行星国度	######################################################
	else_if = {
		limit = {
			is_country_type = planet_state
			root = {
				OR = {
					is_country_type = ascended_empire	# ZOFE
					is_country_type = lost_empire
					is_country_type = eternal_empire	# EE
					is_country_type = default_ev		# ev
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_PLANET_STATE"
			always = no
		}
	}
	else_if = {
		limit = {
			is_country_type = planet_state
			root = {
				OR = {
					is_country_type = dormant_marauders
					is_country_type = ruined_marauders
					is_country_type = awakened_marauders
				}
			}
		}
		always = no
	}
	# seooc	######################################################
	else_if = {
		limit = {
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_gaia_country
				}
			}
		}
		always = yes
	}
	# seooc_phantom
	else_if = {
		limit = {
			ROOT = {
				NOT = { has_technology = tech_nep_phantom_phase_shift }
			}
			is_country_type = nep_phantom_passive
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_PHANTOM"
			always = no
		}
	}
	# seooc_side_story
	else_if = {
		limit = {
			root = { is_ai = no }
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_gaia_country
				}
				AND = {
					has_country_flag = nep_gaia_assist_war
					root = { has_country_flag = nep_gaia_country }
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					has_country_flag = nep_highlander_assist_war
					root = { has_country_flag = nep_highlander_country }
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_GAIA"
			always = no
		}
	}
	else = {
		always = yes
	}
}

###_|发动战争|	ZOFE/SOFE/S_tnatc/ETCPM/SSNI/rmaid	####################################
#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = { #可以宣战
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_declare_war_true
					has_country_flag = community_can_declare_war_false
				}
			}
			#
			##	|附庸关系|	+ZOFE/SOFE/ETCPM
			custom_tooltip = {
				fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
				NOT = {
					has_overlord = ROOT
				}
			}
			##	|战争政策|	+rmaid
			if = {
				limit = {
					exists = root
					ROOT = {
						has_policy_flag = no_wars
						OR = {
							is_subject = no
							overlord = {
								is_same_value = root
							}
						}
					}
				}
				custom_tooltip = {
					text = "CAN_DECLARE_WAR_POLICY"
					#always = no
					#	rmaid	=|监护矩阵继任者使用遏制威胁CB|
					Maid_trigger_3_can_declare_war = yes
				}
			}
			##	|原版AI|	SOFE会清除这条?
			if = {
				limit = {
					exists = root
					ROOT = {
						is_ai = yes
					}
				}
				ROOT = {
					is_at_war = no
				}
			}
			##	S_tnatc
			if = {
				limit = { has_global_flag = nyblax_no_wars }
				custom_tooltip = {
					text = "NYBLAX_NO_WARS"
					always = no
				}
			}
			##	SSNI
			if = {
				limit = {
					use_for_game_mode_survival = yes
				}
				custom_tooltip = {
					fail_text = "WAR_BLOCKED_FOR_SURVIVAL"
					always = no
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_declare_war_true
				NOT = { has_country_flag = community_can_declare_war_false }
			}
		}
	}
}

###_|可殖民|	LSP	####################################
#Root = country
#This = planet
can_colonize_planet = { #可以殖民星球
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_colonize_planet_true
					has_country_flag = community_can_colonize_planet_false
				}
			}
			#
			hidden_trigger = {
				exists = root
			}
		
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_UNDER_INVESTIGATION"
				NOT = { has_planet_flag = planet_under_investigation }
			}
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_DYSON_SPHERE"
				if = {
					limit = {
						is_artificial = no	# Colonizing habitats is fine
					}
					system_has_dyson_sphere = no
				}
			}
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_DYSON_SPHERE_CONSTRUCTION"
				if = {
					limit = {
						system_has_dyson_sphere = no
						is_artificial = no	# Colonizing habitats is fine
					}
					NOT = {
						solar_system = {
							has_star_flag = dyson_sphere_construction
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_COSMOGENESIS_EXODUS"
				exists = root
				root = {
					NOT = { owner = { has_event_chain = cosmogenesis_planet_pickup_chain } }
				}
			}
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_CRIMSON_CRAWLERS"
		
				if = {
					limit = {
						has_modifier = crimson_crawlers
					}
					root = {
						cares_for_crimson_crawlers = yes
					}
				}
			}
			
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_DEFENDED_PLANET"
				NOT = { has_planet_flag = planet_defended_forbid_colonization }
			}
		
			custom_tooltip = {
				fail_text = "COLONIZATION_IMPOSSIBLE_SMEEGIBB_PLANET"
				NOT = { has_planet_flag = cannot_colonize_smeegibb_shelter }
			}
			##	LSP
			custom_tooltip = {
				fail_text = LSP_failtip_country_solitary
				hidden_trigger = {
					exists = root
					root = { NOT = { has_country_flag = LSP_flag_country_solitary } }
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_colonize_planet_true
				NOT = { has_country_flag = community_can_colonize_planet_false }
			}
		}
	}
}

###_[ev/HFE]	####################################
#Root = country
#This = planet
can_colonize_outside_borders = { #可殖民境外星球
#	always = no
	exists = root
	root = {
		OR = {
			is_country_type = ev_leviathans_crisis	# ev
			is_country_type = hfe_features_exodus	# HFE
		}
	}
}

###_|环境改造|		RSnf/PD/thl/SCFE	####################################
#Root = country
#This = planet
can_terraform_planet = { #可改造星球
	custom_tooltip = {
		fail_text = terraform_fail_no_presapient_protection_or_no_presapients
		NAND = {
			AND = {
				exists = root
				root = {
					has_policy_flag = pre_sapients_protect
				}
			}
			any_owned_species = {
				is_sapient = no
				NOT = { has_trait = trait_nascent_stage }
			}
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_devouring_swarm_lithoid"
		exists = root
		root = { is_lithoid_devouring_swarm = no }
	}
	custom_tooltip = {
		fail_text = "legendary_leader_planet_no_terraform"
		exists = root
		if = {
			limit = {
				root = { is_wilderness_empire = no }
			}
			this = {
				NOT = { has_planet_flag = legendary_leader_planet }
			}
		}
	}

	custom_tooltip = {
		fail_text = requires_not_relentless_industrialists_situation
		NOT = {
			any_targeting_situation = {
				is_situation_type = relentless_industrialists_situation
			}
		}
	}

	custom_tooltip = {
		fail_text = terraform_fail_is_metal_planet
		NOT = {
			has_modifier = metal_planet
		}
	}

	custom_tooltip = {
		fail_text = COLONIZATION_IMPOSSIBLE_DEFENDED_PLANET
		NOT = { has_planet_flag = planet_defended_forbid_colonization }
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_SMEEGIBB_PLANET"
		NOT = { has_planet_flag = cannot_colonize_smeegibb_shelter }
	}

	custom_tooltip = {
		fail_text = "COLONIZATION_IMPOSSIBLE_WILDERNESS_TECH"
		OR = {
			NAND = {
				root = {
					is_wilderness_empire = yes
					NOT = { has_technology = tech_terrestrial_sculpting }
				}
				OR = {
					AND = {
						root = { has_country_flag = started_wet }
						is_wet = no
					}
					AND = {
						root = { has_country_flag = started_dry }
						is_dry = no
					}
					AND = {
						root = { has_country_flag = started_cold }
						is_cold = no
					}
				}
			}
			is_planet_class = pc_gaia
		}
	}
	##	RSnf
	custom_tooltip = {
		fail_text = NO_TERRAFORM_HOLLOW_WORLD
		NOT = { is_planet_class = pc_hollow }
	}
	custom_tooltip = {
		fail_text = NO_TERRAFORM_OVERMIND
		NAND = {
			has_global_flag = has_new_frontiers_mod	#_|rsnf安装|仅仅是有deposit可能会有问题
			has_deposit = d_heart_of_the_overmind
		}
	}
	#	PD
	custom_tooltip = {
		fail_text = "requires_actor_not_pdtol"
		root = { NOT = { has_origin = origin_pd_tree_of_life } }
	}
	#	东方领袖
	custom_tooltip = {
		fail_text = "sakura_planet_no_terraform"
		NOT = { has_planet_flag = sakura_planet }
	}
	#	SCFE
	custom_tooltip = {
		fail_text = scfe_cant_terraform_special_planet
		NOT = { has_planet_flag = cant_terraform_planet }
	}
}

###_|殖民物种|	ev/PTep	####################################
#Root = country
#This = species
can_colonize_with_species = { #可殖民星球的物种
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_colonize_with_species_true
					has_species_flag = community_can_colonize_with_species_false
				}
			}
			##_|ev|
			if = { limit = { root = { is_country_type = default_ev } }
				root = {
					OR = {
						has_origin = origin_ev_both_choosen
						has_country_flag = has_ev_to_planets
						has_civic = civic_ev_planet_and_fleet
					}
				}
			}
			##_|PTep|
			NOT = { has_trait = trait_plentiful_traditions_pt_cocoon }
			
			##_|VANILLA|	+LSP
			has_colonization_control = {
				type = colonization_control_no
				country = root
			}
			OR = {
				NOT = { has_trait = trait_self_modified }
				is_same_species = root
			}
			has_cybernetic_creed_trait = no
			NOR = {
				has_trait = trait_pathogenic_genes
				has_trait = trait_limited_cybernetic
			}
			if = {
				limit = {
					OR = {
						is_sapient = no
						has_trait = trait_zombie
						has_trait = LSP_trait_original	#LSP
					}
				}
				custom_tooltip = {
					always = no
				}
			}
			else_if = {
				limit = { has_trait = trait_hive_mind }
				root = { is_hive_empire = yes }
			}
			else = {
				always = yes
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_colonize_with_species_true
				NOT = { has_species_flag = community_can_colonize_with_species_false }
			}
		}
	}
}

# Root = Pop Group
# From = Country
# This = Species
# NOTE: species_has_happiness is also checked for this
pop_group_has_random_ethics = { #pop有随机思潮
	exists = from
	NOT = {
		has_citizenship_type = {
			country = from
			type = citizenship_organic_trophy
		}
	}
}

###_|UGRC幸福感|	wsg/PTep/Eevt/无言/ECI/wv/thl	####################################
# Root = Pop Group
# From = Country
# This = Species
species_has_happiness = { #物种拥有幸福度
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_species_has_happiness_true
					has_species_flag = community_species_has_happiness_false
				}
			}
			#
			has_species_flag = UGRC_flg_spcs_RULE_happiness_ENABLE@from		# 改为<@root.from>不会报错,但是子物种无法检测到flag
			#	多彩
			is_species_need_happiness_dcyh = no
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_species_has_happiness_true
				NOT = { has_species_flag = community_species_has_happiness_false }
			}
		}
	}
}

###_|可敌对|	ACOT/SOFE	####################################
#Root = country, us
#This = country, them
#This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
can_be_hostile_towards = { #可敌对
	if = {
		limit = { is_primitive = yes }
		ROOT = {
			NOR = {
				has_policy_flag = interference_not_allowed
				has_policy_flag = interference_subtle
			}
		}
	}
	else_if = {
		limit = { ROOT = { is_primitive = yes } }
		NOR = {
			has_policy_flag = interference_not_allowed
			has_policy_flag = interference_subtle
		}
	}
	else_if = {
		limit = { is_country_type = ratlings }
		always = yes
	}
	# ACOT/SOFE
	else_if = {
		limit = { is_country_type = void_lifeforms_1 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_1 } }
		always = yes
	}
	else_if = {
		limit = { is_country_type = void_lifeforms_2 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_2 } }
		always = yes
	}
}

###_|UGRC可繁殖|	GF/HFE/hiveDLC/PTep/Eevt/多彩/wv/精灵		####################################	|-45%|
# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = { #可繁殖物种
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_species_procreate_true
					has_species_flag = community_can_species_procreate_false
				}
			}
			#	否决条件
			NOT = { has_species_flag = UGRC_flg_spcs_RULE_procreate_DISABLE }	# |UGRC标签|
			#
			##	V其他		<root/root.owner>相关属性无法通过eft收束在spcs的|URRC标签|中
			if = {
				limit = {
					root = { has_modifier = slave_colony }
				}
				NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
			}
			if = {
				limit = {
					has_trait = trait_necrophage
				}
				NOT = {
					root = {
						any_owned_species = {
							has_population_control = { country = root.owner type = no }
							species_can_be_necrophaged = yes
						}
					}
				}
			}
			NOR = {
				has_citizenship_type = {
					type = citizenship_protected_drone
					country = root.owner
				}
				has_citizenship_type = {
					type = citizenship_symbiotic_drone
					country = root.owner
				}
				has_citizenship_type = {
					type = citizenship_exploited_drone
					country = root.owner
				}
			}
			#	V机械教			局势"situation_cybernetic_creed_cyberization"进入|阶段3|才会有如下特质
			if = {
				limit = {
					root.owner = { has_country_flag = cyber_creed_stop_intro_events }
				}
				has_species_flag = UGRC_flg_spcs_RULE_procreate_CREED	# |has_cybernetic_creed_trait|局势开始
				NOT = {
					root = {
						any_owned_species = {
							has_species_flag = UGRC_flg_spcs_RULE_procreate_NON_creed	# |is_robotic_species/has_cybernetic_creed_trait|非
							has_population_control = { country = root.owner type = no }
						}
					}
				}
			}
			##	wv
			if = { limit = { has_species_flag = UGRC_flg_spcs_RULE_wv }
				if = { limit = { has_trait = trait_reanimated_materials }
					root = {
						num_assigned_jobs = {
							job = matter_reanimator
							value > 0
						}
						NOR = { # make sure elaina always grow first
							has_building = building_possibility_portal
							has_building = building_dimensional_instrument
							has_deposit = d_mysterious_portal
						}
						owner = {
							NOT = {
								has_deficit = consumer_goods
							}
						}
					}
				}
				if = { limit = { has_trait = trait_houki }
					root.owner = {
						has_country_flag = newbirth_houki
						NOT = { has_country_flag = max_houki_number_reached }
					}
				}
				if = {
					limit = { 
						OR = {
							has_trait = trait_witch
							has_trait = trait_victorika
							has_trait = trait_elaina_descendant
						}
					}
					OR = {
						root.owner = {
							has_ascension_perk = ap_xeno_compatibility
						}
						root = {
							OR = {
								has_building = building_possibility_portal
								has_building = building_dimensional_instrument
								has_deposit = d_mysterious_portal
							}
						}
					}
				}
			}
			#淫触之虫无法自然增长 
			OR = {
				AND = {
					has_trait = trait_DC_ethic_parasite_mind
					root.owner = { has_country_flag = has_ten_crisis_perk_1 }
				}
				NOT = { has_trait = trait_DC_ethic_parasite_mind }
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_species_procreate_true
				NOT = { has_species_flag = community_can_species_procreate_false }
			}
		}
	}
}

# Checks if a species can procreate
# This = Species
# Root = Planet
can_species_be_assembled = { #可组装物种
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_species_be_assembled_true
					has_species_flag = community_can_species_be_assembled_false
				}
			}
			is_sapient = yes
			NOT = {
				has_trait = trait_exd
			}
			NOT = {
				AND = {
					has_trait = trait_mechanical
					root.owner = { is_individual_machine = yes }
				}
			}
			NOT = {
				AND = {
					has_virtual_species_trait = yes
					root.owner = {
						is_fallen_empire = no
						has_active_tradition = tr_virtuality_finish
					}
				}
			}
			has_population_control = {
				type = no
				country = root.owner
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_species_be_assembled_true
				NOT = { has_species_flag = community_can_species_be_assembled_false }
			}
		}
	}
}

# Checks if a species uses bonus_growth modifier
# This = Species
# Root = Planet
species_uses_bonus_growth = { #使用有机组装
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_species_uses_bonus_growth_true
					has_species_flag = community_species_uses_bonus_growth_false
				}
			}
			#
			is_sapient = yes
			has_population_control = {
				type = no
				country = root.owner
			}
			NAND = {
				root = { has_modifier = slave_colony }
				NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
			}
			if = {
				limit = {
					has_trait = trait_necrophage
				}
				NOT = {
					root = {
						any_owned_species = {
							has_population_control = { country = root.owner type = no }
							species_can_be_necrophaged = yes
						}
					}
				}
			}
			NOR = {
				has_citizenship_type = {
					type = citizenship_protected_drone
					country = root.owner
				}
				has_citizenship_type = {
					type = citizenship_symbiotic_drone
					country = root.owner
				}
				has_citizenship_type = {
					type = citizenship_exploited_drone
					country = root.owner
				}
			}
			NOT = { has_species_flag = nivlac_no_procreation }
			if = {
				limit = {
					has_infertile_clone_soldier_trait = yes
				}
				root = {
					check_variable = { which = clone_pops_missing_per_vat value > 0 }
				}
			}
			if = {
				limit = {
					has_cybernetic_creed_trait = yes
				}
				NOT = {
					root = {
						any_owned_species = {
							has_population_control = { country = root.owner type = no }
							is_robotic_species = no
							has_cybernetic_creed_trait = no
						}
					}
				}
			}
			# CG
			OR = {
				NOT = { has_trait = trait_DC_ethic_parasite_mind }
				AND = {
					has_trait = trait_DC_ethic_parasite_mind
					root.owner = { has_valid_civic = civic_parasite_and_nature }
				}
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_species_uses_bonus_growth_true
				NOT = { has_species_flag = community_species_uses_bonus_growth_false }
			}
		}
	}
}

#Root = country
#From = species
founder_species_uses_logistic_growth_mult = { #创始物种使用逻辑?物种生长速度
	exists = from
	from = {
		is_robotic_species = no
		is_infertile = no
	}
}

founder_species_uses_assembly = { #创始物种使用组装
	exists = from
	from = {
		is_robotic_species = yes
	}
}

founder_species_uses_bonus_growth_mult = { #创始物种使用奖励？物种生长
	exists = from
	from = {
		is_robotic_species = no
		is_infertile = yes
	}
}

###_[轨道轰炸]	FW/AUP/ev/wsg/swg/阿夸/古代帝国/失落帝国历史/多彩/精灵/TAC/SRA	/ACOT/SOFE/bwm/HFE/Giga/Ehof/RSnf/MEM/SSNI/久远/thl/spth/时空	#########
#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = { #可以轨道轰炸
	OR = {
		AND = { #香草
			NAND = { #排除条件 Exclusions
				ROOT.CONTROLLER = {
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_orbital_bombard_true
						has_country_flag = community_can_orbital_bombard_false
					}
				}
			}
			#
			exists = FROM.OWNER
			###_|绝对禁止|	+RSnf/阿夸/精灵	########################################
			NOR = {
				any_controlled_ship = {
					is_ship_size = colossus
				}
				FROM = {
					OR = {
						is_planet_class = pc_hollow		# RSnf
						is_ELF_can_not_be_orbital_bombard_planet = yes	# 精灵
						OWNER = { is_country_type = kuat_fire_base_hositle }	# 阿夸
						has_planet_flag = enable_kuat_shield
					}
				}
			}

			###_|基本条件|	########################################
			OR = {
				##	AUP/HFE	####################	只要敌对都能炸
				ROOT.CONTROLLER = { is_hostile = FROM.CONTROLLER }
				#	TAC		---禁用|高能耗|
				#ROOT = { has_component = AI_MATRICES }

				##	vanilla	####################
				AND = {
					ROOT.CONTROLLER = {
						NOT = { has_communications = FROM.OWNER }
					}
					FROM.OWNER = {
						NOT = { is_country_type = primitive }
					}
				}
				AND = {
					ROOT.CONTROLLER = {
						NOR = {
							has_policy_flag = interference_not_allowed
							has_policy_flag = interference_subtle
						}
					}
					FROM.OWNER = { is_country_type = primitive }
				}
				ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
				#	V|可随意轰炸	+bwm
				FROM = {
					OR = {
						is_planet_class = pc_infested
						has_planet_flag = bwm_ancestor_world			# bwm
					}
				}
				##_|可被轰炸|	+古代帝国/SOFE/bwm/Giga/Ehof/阿夸/多彩
				FROM.CONTROLLER = {
					OR = {
						#	绝对通用
						has_country_flag = UGRC_flg_cntr_RULE_can_be_bombed
						#	VANILLA
						is_country_type = swarm
						is_country_type = ai_empire
						is_country_type = cybrex_empire
						is_country_type = abandoned_hatchery
						AND = {
							is_country_type = awakened_marauders
							ROOT.CONTROLLER = { is_hostile = prev }
						}

						is_country_type = mem_ancestor_guardian			# bwm
						is_country_type = original_empire				# SOFE
						is_country_type = compound_empire				# Giga/Ehof
						is_country_type = void_lifeforms_1				# Giga/ACOT
						is_country_type = void_lifeforms_2				# Giga/ACOT
						is_country_type = katzenartig_imperium			# Giga/ACOT
						ag_can_be_orbital_bombardment_country = yes		# 古代帝国	安装=|has_ancient_empire_mod|
						kuat_can_be_orbital_bombarment_country = yes	# 阿夸		安装=|install_kuat_mod|
						is_country_type = ten_crisis_empire				# 多彩
					}
				}
				##_|可轰炸|	+ev/wsg/swg/阿夸/古代帝国/失落帝国历史	/bwm/ACOT/SOFE/MEM/SRA/SSNI/久远/多彩/精灵/thl
				ROOT.CONTROLLER = {
					OR = {
						#	UGRC通用
						has_country_flag = UGRC_flg_cntr_RULE_can_bomb
						#	VANILLA
						is_country_type = extradimensional
						is_country_type = extradimensional_2
						is_country_type = extradimensional_3
						is_country_type = swarm
						is_country_type = ai_empire
						is_country_type = cybrex_empire					# <aup去除了此项>
						is_country_type = dormant_marauders
						is_country_type = marauder_raiders
						is_country_type = ruined_marauders
						is_country_type = debt_collectors
						is_country_type = gray_goo
						is_country_type = vol
						is_country_type = behemoth_hatchling
						is_country_type = abandoned_hatchery
						AND = {
							is_country_type = frenzied_voidworms
							has_country_flag = can_bombard
							FROM.CONTROLLER = { has_country_flag = tormented_by_frenzied_voidworms }
						}
						AND = {
							OR = {
								is_country_type = awakened_marauders
								is_country_type = formless
							}
							FROM.CONTROLLER = { is_hostile = prev }
						}
						AND = {
							is_voidworms_hostile_country_type = yes
							ROOT = {
								is_ship_size = voidworms_titan
							}
						}
						
						is_country_type = ev_leviathans_crisis			# ev
						is_country_type = afk_crisis_country			# swg
						is_country_type = LsE_fallen_empire				# 失落帝国历史
						#	wsg
						is_country_type = wg_crisis_country
						is_khan_country_type = yes
						#	古代帝国
						ag_can_do_orbital_bombardment_country = yes
						#	阿夸
						kuat_can_do_bombarment_country = yes
						
						is_country_type = mem_ancestor_guardian			# bwm
						is_country_type = original_empire				# SOFE
						#	ACOT
						is_country_type = compound_empire
						is_country_type = katzenartig_imperium
						is_country_type = void_lifeforms_1
						is_country_type = void_lifeforms_2
						is_country_type = acot_crazed_stellarite
						#	MEM
						is_country_type = mem_surveyor_country_red		# 瓦祖兰
						is_country_type = mem_vazurans
						#	SRA
						SRA_can_do_orbital_bombardment_country = yes
						#	SSNI
						is_country_type = sentinel_hostile_expansion
						#	久远
						KZ_VOY_can_unconditional_bombarment_country = yes
						#	多彩
						is_country_type = ten_crisis_empire
						#	精灵
						is_ELF_can_orbital_bombard_country_type = yes
						#	thl
						is_country_type = koishi_berserk_fleet
						#	spth
						has_country_flag = touhou_mod_country
					}
				}
				##	V|星球所有者轰炸被其他阵营占据的星球	-SOFE<去掉了此项>
				AND = {
					from.controller = {
						is_country_type = faction
						NOT = { is_same_value = ROOT.CONTROLLER }
					}
					from.owner = {
						is_same_value = ROOT.CONTROLLER
					}
				}
			}
			##	时空	####################
			TIME_RULE_trgr_CAN_orbital_bombard = yes
		}
		AND = { #国防部
			exists = FROM.OWNER
			ROOT.CONTROLLER = {
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_orbital_bombard_true
					NOT = { has_country_flag = community_can_orbital_bombard_false }
				}
			}
			FROM = {
				NOT = { has_planet_flag = community_can_orbital_bombard_exclude }
			}
		}
	}
}

#Check if it is possible to build orbital stations on this planet
#this: planet
#root: country
can_planet_support_orbital_station = { #可建设行星轨道站
	custom_tooltip = {
		fail_text = "ORBITAL_STATION_ALREADY_EXISTS"
		has_any_megastructure = no
		NOT = { has_planet_flag = has_megastructure }
	}
}

###_[全图视野]	FW/LCTR/SOFE/涅槃/久远	####################################
# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = { #拥有全图
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_has_full_sensor_range_true
					has_country_flag = community_has_full_sensor_range_false
				}
			}
			NOT = { has_country_flag = FW_flg_cntr_FULL_sensor_off }	#_|FW|开关
			#
			OR = {
				has_megastructure = spy_orb_4
				has_megastructure = spy_orb_restored
				has_megastructure = sofe_omega_spy_orb_center				# SOFE
				has_country_flag = FW_flg_cntr_CHT_orrery_ON				#_|FW|璀璨星图
				has_country_flag = FW_flg_cntr_CHT_beacon_ON				#_|FW|永恒星炬
				has_country_flag = LCTR_flg_cntr_RELIC_activated_full		#_|LCTR|暗能量传感器
				KZ_VOY_has_full_sensor_range = yes							# 久远
			#	AND = { is_ai = yes		has_country_flag = nirvana }		# 涅槃
			#	has_country_flag = ai_dragon								# 涅槃
			#	has_country_flag = ai_council								# 涅槃
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_has_full_sensor_range_true
				NOT = { has_country_flag = community_has_full_sensor_range_false }
			}
		}
	}
}

###_[地面入侵通知=定位]	####################################
# Determines if notification messages should be sent after a ground combat
# this: planet
# from: winner
# root: loser
show_notification_for_ground_combat = { #显示地面作战通知
	NOT = { has_planet_flag = slave_revolt }
}

# Determines if the "per_neighbor_rival" static modifier should be applied to an empire
# this: country
should_apply_neighbor_rival_modifier = { #应当应用邻居敌对修正
	has_tradition = tr_enmity_adopt
}

#Root: Rebelling against country
#This: Rebel country
are_rebels_hostile = { #叛乱分子是敌对的
	is_country_type = rebel	#Rebels change country type after taking their initial planet (action.30)
}

#Root: planet
should_colony_be_destroyed_on_pc_change = { #应当在更改星球类型时摧毁殖民地
	is_planet_class = pc_infested
}

# Is the given fleet the portal for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_portal = { # is this portal mine #是异次元传送门
	is_ship_size = dimensional_portal_ed
	OR = {
		owner = { is_same_value = root } # owner is me
		OR = {
			AND = { # portal is unbidden and I am unbidden
				root = { is_country_type = extradimensional }
				any_controlled_ship = { has_ship_flag = unbidden_portal }
			}
			AND = { # portal is aberrant and I am aberrant
				root = { is_country_type = extradimensional_2 }
				any_controlled_ship = { has_ship_flag = aberrant_portal }
			}
			AND = { # portal is vehement and I am vehement
				root = { is_country_type = extradimensional_3 }
				any_controlled_ship = { has_ship_flag = vehement_portal }
			}
		}
	}
}

# Is the given fleet an anchor for given extradimensional country
# root: country (ED)
# this: fleet
is_extradimensional_anchor = { #是异次元锚
	root = {
		OR = {
			is_country_type = extradimensional
			is_country_type = extradimensional_2
			is_country_type = extradimensional_3
			is_country_type = formless
		}
	}
	any_controlled_ship = { is_ship_size = starbase_exd }
	owner = { is_same_value = root }
}

# Will colonizing this planet tick off a fallen empire?
# Root = fallen empire
# This = planet
will_anger_fallen_empire = { #会激怒堕落帝国
	OR = {
		AND = {
			root = { has_ai_personality_behaviour = demands_clear_borders }
			is_neighbor_of = root
		}
		AND = {
			root = { has_ai_personality_behaviour = holy_planets }
			has_modifier = "holy_planet"
			space_owner = {
				NOT = { has_relic = r_severed_head }
			}
		}
	}
}

# Can the country have robot pop
# root: country
can_have_robot_pops = { #可拥有机器人pop
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_have_robot_pops_true
					has_country_flag = community_can_have_robot_pops_false
				}
			}
			#
			exists = this
			is_hive_empire = no
			NOT = { has_policy_flag = robots_outlawed }
			#	多彩
			#雌伏于阴影之下
			NOT = { has_origin = origin_female_in_shadow }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_have_robot_pops_true
				NOT = { has_country_flag = community_can_have_robot_pops_false }
			}
		}
	}
}

# THIS = Fleet
fleet_uses_templates = { #舰队使用模板
	is_ship_class = shipclass_military
	is_designable = yes
	is_alliance_fleet = no
}

###_|UGRC修理|	####################################
# this = starbase, megastructure or planet
can_orbitable_repair_ships = { #可维修在轨船只
	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions
					is_scope_type = starbase
					has_starbase_flag = community_mod_rules_trigger
					OR = {
						has_starbase_flag = community_can_orbitable_repair_ships_true
						has_starbase_flag = community_can_orbitable_repair_ships_false
					}
				}
				NAND = { #排除条件 Exclusions
					is_scope_type = megastructure
					has_megastructure_flag = community_mod_rules_trigger
					OR = {
						has_megastructure_flag = community_can_orbitable_repair_ships_true
						has_megastructure_flag = community_can_orbitable_repair_ships_false
					}
				}
				NAND = { #排除条件 Exclusions
					is_scope_type = planet
					has_planet_flag = community_mod_rules_trigger
					OR = {
						has_planet_flag = community_can_orbitable_repair_ships_true
						has_planet_flag = community_can_orbitable_repair_ships_false
					}
				}
			}
			#
			#	|UGRC维修轨道|
			is_variable_set = UGRC_var_all_RULE_can_orbitable_repair_ships
		}
		AND = { #国防部 MOD
			OR = {
				AND = {
					is_scope_type = starbase
					has_starbase_flag = community_mod_rules_trigger
					AND = {
						has_starbase_flag = community_can_orbitable_repair_ships_true
						NOT = { has_starbase_flag = community_can_orbitable_repair_ships_false }
					}
				}
				AND = {
					is_scope_type = megastructure
					has_megastructure_flag = community_mod_rules_trigger
					AND = {
						has_megastructure_flag = community_can_orbitable_repair_ships_true
						NOT = { has_megastructure_flag = community_can_orbitable_repair_ships_false }
					}
				}
				AND = {
					is_scope_type = planet
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_orbitable_repair_ships_true
						NOT = { has_planet_flag = community_can_orbitable_repair_ships_false }
					}
				}
			}
		}
	}
}

###_[产生残骸]	FW/z_cm/ev/swg/失落帝国历史		/ZOFE/SOFE/hiveDLC/twinks	####################################
#_glbl_flg	[FW_flg_glbl_TECH_overwhelm]	科技壁垒
# this = ship
# root = country that kills ship
can_spawn_debris = { #会产生残骸
	root = { 
		OR = {
			is_country_type = default
			is_country_type = default_ev		# EV
			is_country_type = ascended_empire	# ZOFE
			is_country_type = lost_empire		# ZOFE
		}
	}
	exists = owner
	owner = { 
		NAND = { #_科技限制
			has_global_flag = FW_flg_glbl_TECH_overwhelm	#_|FW|科技壁垒
			relative_power = { who = root category = technology value >= superior }	#_[FW]神一般的科技=superior
		}
		NAND = {#_[z_cm]无法获取堕落科技
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
			has_global_flag = z_cm_fallen_technology
		}
		## +EV/失落帝国历史/swg/hiveDLC/twinks	/wsg/SOFE
		NOR = {#_阵营限制
			has_ascension_perk = ap_enigmatic_engineering
			
			is_country_type = default_ev					# EV
			is_country_type = LsE_fallen_empire				# 失落帝国历史
			is_country_type = afk_crisis_country			# swg
			has_civic = civic_hive_strong_connection		# hiveDLC
			has_civic = civic_tw_atlantis					# twinks
			# SOFE
			has_government = "gov_eternal_continuum"
			has_valid_civic = civic_sofe_pursuit_answer
			is_country_type = original_empire
			is_country_type = original_empire_passive
		}
	}
}

###_|UGRC星系管制|	AUP/ZOFE/ev/SOFE/EE/TAC	####################################	|检测cntr|-55%,|单flag@root|-88%
# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# This game rule takes priority over ai_should_not_restrict_system below
# Used by regular empires, fallen empires & crises
ai_should_restrict_system = { #AI限制系统
	OR = {
		##	|普通|
		if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_DEFAULT }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
		##	|掠夺者|
		else_if = {
			limit = {
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					AND = {
						exists = owner
						owner = {
							OR = {
								has_country_flag = UGRC_flg_cntr_RULE_restrict_FALLEN
								#	|强力帝国|
								is_country_type = eternal_empire	# EE
								is_progenitor_empires = yes			# SOFE
							}
						}
					}
				}
			}
		}
		##	|堕落帝国|
		else_if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_FALLEN }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					#	掠夺者
					AND = {
						exists = owner
						owner = { 
							OR = {
								is_country_type = awakened_marauders 
								is_country_type = dormant_marauders		# AUP
							}
						}
					}
				}
			}
		}
		##	|觉醒帝国|
		else_if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_AFE }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
				}
			}
		}
		##	|强力帝国|
		else_if = {
			limit = {
				OR = {
					is_country_type = eternal_empire	# EE
					is_progenitor_empires = yes			# SOFE
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					AND = {
						exists = owner
						owner = {
							OR = {
								is_country_type = awakened_marauders 
								is_country_type = dormant_marauders		# AUP
							}
						}
					}
				}
			}
		}
		##	|虚空虫|
		else_if = {
			limit = { is_country_type = voidworms }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					AND = {
						exists = owner
						owner = {
							OR = {
								is_country_type = dormant_marauders
								is_country_type = awakened_marauders 
								is_country_type = dormant_marauders		# AUP
							}
						}
					}
				}
			}
		}
		##	|天灾|
		else_if = {
			limit = {
				OR = {
					is_crisis_faction = yes
					is_country_type = original_empire	# SOFE
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
		##	|古代守望|
		else_if = {
			limit = { is_country_type = ag_ancient_psi_guardian }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
		##	|其他|	都不禁止
		else = {
			always = no
		}
	}
}

# this = system
# root = country
# Determines if AI-controlled empires should never restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
ai_should_not_restrict_system = { #AI不应限制系统
	AND = {
		has_star_flag = starlit_sealed_system
		root = {
			has_origin = origin_starlit_citadel
		}
	}
}

# this = country
can_subjugate_empires = { #可以征服帝国
	always = yes
}

# this = leader
can_leader_get_council_trait = { #领袖可以获得委员会特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_get_council_trait_true
					has_leader_flag = community_can_leader_get_council_trait_false
				}
			}
			#
			# See 03_scripted_triggers_paragon.txt
			can_leader_get_council_trait_trigger = yes
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_get_council_trait_true
				NOT = { has_leader_flag = community_can_leader_get_council_trait_false }
			}
		}
	}
}

# this = leader
can_leader_get_normal_trait = { #领袖可以获得普通特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_get_normal_trait_true
					has_leader_flag = community_can_leader_get_normal_trait_false
				}
			}
			#
			NOR = {
				AND = {
					exists = owner
					owner = { is_gestalt = yes }
					OR = {
						is_councilor = yes
						has_leader_flag = restored_node
					}
				}
				AND = {
					has_global_flag = game_started
					is_ruler = yes
					exists = owner
					owner = {
						is_autocracy = yes
					}
					NOT = { has_leader_flag = ignore_autocracy_ruler_trait_restriction }
				}
				is_heir = yes
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_get_normal_trait_true
				NOT = { has_leader_flag = community_can_leader_get_normal_trait_false }
			}
		}
	}
}

# this = leader
can_leader_get_subclass_trait = { #领袖可以获得专精特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_get_subclass_trait_true
					has_leader_flag = community_can_leader_get_subclass_trait_false
				}
			}
			#
			NAND = {
				exists = owner
				owner = { is_gestalt = yes }
				OR = {
					is_councilor = yes
					has_leader_flag = restored_node
				}
			}
			has_any_subclass = no
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_get_subclass_trait_true
				NOT = { has_leader_flag = community_can_leader_get_subclass_trait_false }
			}
		}
	}
}

# this = leader
can_leader_get_destiny_trait = { #领袖可以获得命运特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_get_destiny_trait_true
					has_leader_flag = community_can_leader_get_destiny_trait_false
				}
			}
			#
			NAND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			exists = owner
			owner = {
				is_crisis_faction = no
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_get_destiny_trait_true
				NOT = { has_leader_flag = community_can_leader_get_destiny_trait_false }
			}
		}
	}
}

# this = country
has_extra_council_position = { #拥有额外委员会位置
	country_has_extra_council_position = yes
}

###_[可跃迁]	FW/古代帝国/seooc/莉莉	####################################
# THIS = Fleet
can_jump_drive = { #可以跃迁
	custom_tooltip = {
		fail_text = "SUGL_can_jump_drive_fasle_tip"
		OR = {
			AND = { #香草 vanilla
				AND = { #排除条件 Exclusions
					NAND = { #排除条件 Exclusions
						has_fleet_flag = community_mod_rules_trigger
						OR = {
							has_fleet_flag = community_can_jump_drive_true
							has_fleet_flag = community_can_jump_drive_false
						}
					}
					solar_system = {
						NAND = { #排除条件 Exclusions
							has_star_flag = community_mod_rules_trigger
							OR = {
								has_star_flag = community_can_jump_drive_true
								has_star_flag = community_can_jump_drive_false
							}
						}
					}
					owner = {
						NAND = {
							has_country_flag = community_mod_rules_trigger
							OR = {
								has_country_flag = community_can_jump_drive_true
								has_country_flag = community_can_jump_drive_false
							}
						}
					}
				}
				# FW
				if = {
					limit = {
						OR = {
							has_fleet_flag = FW_flg_flt_JUMP	# FW特殊跃迁flt
							controller = {
								OR = {
									has_country_flag = FW_flg_cntr_CHT_orrery_ON		# 璀璨星图
									has_country_flag = FW_flg_cntr_CHT_beacon_ON		# 永恒星炬
								}
							}
						}
					}
					always = yes
				}
				#_|通用禁行|	精灵
				else_if = { limit = { solar_system = { has_star_flag = ELF_Singularity_System } }
					always = no
				}
				# 古代帝国
				else_if = { limit = { solar_system = { has_star_flag = ag_no_jump_out_system } }
					custom_tooltip = { fail_text = ag_jump_drive_unable_system_tooltip
						always = no
					}
				}
				# seooc
				else_if = { limit = { solar_system = { has_star_flag = nep_Scrus_cluster } }
					custom_tooltip = { fail_text = "CAN_NOT_JUMP_WHEN_IN_SCRUS"
						always = no
					}
				}
				else_if = {
					limit = {
						solar_system = {
							OR = {
								has_star_flag = nep_whitegoo_1
								has_star_flag = nep_whitegoo_2
								has_star_flag = nep_whitegoo_3
							}
						}
						owner = { NOT = { has_technology = tech_nep_whitegoo_3_2 } }
					}
					custom_tooltip = { fail_text = "CAN_NOT_JUMP_IN_WHITEGOO"
						always = no
					}
				}
				# 其他
				else = {
					always = yes
				}
			}
			AND = { #国防部 MOD
				OR = {
					AND = { #舰队判定 
						has_fleet_flag = community_mod_rules_trigger
						AND = {
							has_fleet_flag = community_can_jump_drive_true
							NOT = { has_fleet_flag = community_can_jump_drive_false }
						}
					}
					solar_system = { #星系判定
						has_star_flag = community_mod_rules_trigger
						AND = {
							has_star_flag = community_can_jump_drive_true
							NOT = { has_star_flag = community_can_jump_drive_false }
						}			
					}
					owner = { #国家判定
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_jump_drive_true
							NOT = { has_country_flag = community_can_jump_drive_false }
						}
					}
				}
			} 
		}
	}
}

###_|占领军|	ev/阿夸/致命风暴	/ZOFE/SOFE/EE	####################################
# this = country
can_spawn_occupation_armies = { #可以产生占领陆军
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire

		#	|其他堕落|
		#	ev
		is_country_type = fallen_empire_ev
		#	阿夸
		is_country_type = kuat_fallen_empire
		is_country_type = kuat_awakened_fallen_empire
		is_country_type = awakened_return_kuat_empire
		#	致命风暴	|afe|
		is_country_type = awakened_gate_builders
		#	ZOFE
		is_country_type = ascended_empire
		is_country_type = lost_empire
		#	SOFE
		is_progenitor_empires = yes
		is_country_type = sofe_light_seeker
		#	EE
		is_country_type = eternal_empire
	}
}

###_|UGRC传感器|	####################################
##_|UGRC传感屏蔽|	RS	/Sexp/S_tnatc/WS/wsg/古代帝国/SMCO/莉莉/thl/驴岛
# this = system
# root = country
system_blocks_sensors = { #阻断探测星系
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_star_flag = community_mod_rules_trigger
				OR = {
					has_star_flag = community_system_blocks_sensors_true
					has_star_flag = community_system_blocks_sensors_false
				}
			}
			#
			NOT = { has_star_flag = UGRC_flg_sstm_RULE_blocks_sensors_IGNORE@root }	# |UGRC传感穿透|预留给一些暂时开图的功能
			has_star_flag = UGRC_flg_sstm_RULE_blocks_sensors@root	# |UGRC传感阻碍|83%|
		}
		AND = { #国防部 MOD
			has_star_flag = community_mod_rules_trigger
			AND = {
				has_star_flag = community_system_blocks_sensors_true
				NOT = { has_star_flag = community_system_blocks_sensors_false }
			}
		}
	}
}

###_|跃迁管制|	FW/AAR	/古代帝国/wsg/阿夸/SOFE/Giga/Ehof/seooc/多彩/精灵/TAC/莉莉/驴岛/SCFE/spth	####################################
# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = { #可跃迁进入星系
	OR = {
		AND = { #香草 vanilla
			OR = {
				NAND = { #排除条件 Exclusions
					has_star_flag = community_mod_rules_trigger
					OR = {
						has_star_flag = community_can_enter_system_by_jump_true
						has_star_flag = community_can_enter_system_by_jump_false
					}
				}
				NAND = { #排除条件 Exclusions
					root = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_enter_system_by_jump_true
							has_country_flag = community_can_enter_system_by_jump_false
						}
					}
				}
			}
			#
			custom_tooltip = {
			#	success_text = "debug: can jump"
				fail_text = cannot_jump_to_system
				OR = {
					###_绝对通行	FW
					root = {
						OR = {
							has_country_flag = FW_flg_cntr_CHT_orrery_ON		# 璀璨星图
							has_country_flag = FW_flg_cntr_CHT_beacon_ON		# 永恒星炬
						}
					}
					###_特殊通行	+AAR/TAC/多彩
					root = {
						#	|禁止条件|
						#	|通行可用|
						OR = {
							has_country_flag = AAR_flg_cntr_JUMP_webway_TGT		# |AAR|网道行者
							has_country_flag = TAC_traveler						# |TAC|
							has_country_flag = wtmnb_order						# |多彩|wtmnb
						}
					}
					
					###_基础条件
					AND = {
						##_Sealed system
						OR = {
							# vanilla
							NOT = { has_star_flag = sealed_system }
							AND = {
								root = { has_country_flag = entered_sealed_system }
								has_star_flag = sealed_system
							}
						}

						##_特殊禁入星系		+wsg/古代帝国/阿夸/SOFE/Giga/Ehof/seooc/多彩/TAC/莉莉
						NOR = {
							# vanilla
							has_star_flag = lcluster
							has_star_flag = formless_system

							# wsg
							AND = { has_global_flag = has_wsg_mod	# 舰r激活
								OR = {
									has_star_flag = wg_sealed_system
									has_star_flag = wg_psionic_systems
									AND = { exists = space_owner
										space_owner = { is_country_type = monolith_crisis_country }
									}
								}
							}
							#	古代帝国
							has_star_flag = ag_no_jump_in_system
							#	阿夸
							has_star_flag = kuat_initial_system
							has_star_flag = Kuat_empire_system
							has_star_flag = ag_kae_e_area_system
							AND = {
								has_global_flag = starkillerbase_not_passed
								has_star_flag = starkiller_system	
							}
							#	SOFE
							has_star_flag = outercluster
							#	Giga
							has_star_flag = ehof_compound_system
							has_star_flag = giga_core_03
							cohesive_system = yes
							urmazin_system = yes
							everchanging_system = yes
							katzen_jump_blocked_system = yes
							#	seooc
							has_star_flag = nep_Krahen_cluster
							has_star_flag = nep_Scrus_cluster
							AND = {
								has_global_flag = nep_not_pass_Aemethms 
								OR = {
									has_star_flag = nep_dragon_system
									has_star_flag = nep_heptagram_cluster
								}
							}
							#	|多彩|
							AND = { has_global_flag = love_between_us	# |安装|
								OR = {
									has_star_flag = ten_crisis_system
									any_neighbor_system = { has_star_flag = ten_crisis_system }
									AND = {
										exists = event_target:holylight_god_heaven_empire 
										OR = {
											has_star_flag = SUC_lustgod_ring_world_system
											has_star_flag = init_sample_of_death
											has_star_flag = init_sample_of_prosperity
											has_star_flag = init_INN_holylight_god_system2
										}
									}
								}
							}
							#	|精灵|
							has_star_flag = ELF_Singularity_System
							has_star_flag = wtmnb_star_11th		# wtmnb
							#	莉莉
							has_star_flag = al_huge_home_bed
							#	驴岛
							has_star_flag = ark_isolated
							#	SCFE
							AND = { has_star_flag = scfe_shaded_colony_system		root = { scfe_can_jump_in_shaded_system = no } }
							#	spth
							has_star_flag = spth_no_jump_in_system
						}
					}
				}
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = {
					has_star_flag = community_mod_rules_trigger
					AND = {
						has_star_flag = community_can_enter_system_by_jump_true
						NOT = { has_star_flag = community_can_enter_system_by_jump_false }
					}
				}
				AND = {
					root = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_enter_system_by_jump_true
							NOT = { has_country_flag = community_can_enter_system_by_jump_false }
						}
					}
				}
			}
		}
	}
}

###_|可迁移の人口|	rmaid	########################################################################
# This = pop_group
can_resettle_pop_group = { #可以重新安置pop 组
	##	rmaid
	Maid_trigger_9_can_resettle_pop = yes
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NOT = { has_trait = trait_self_modified }
	}
	# Pathogenic Pops Can't Resettle
	custom_tooltip = {
		fail_text = "pathogenic_genes_warning"
		NOT = { has_trait = trait_pathogenic_genes }
	}
	custom_tooltip = {
		fail_text = "origin_egalitarian_refuse"
		NAND = {
			has_ethic = ethic_egalitarian
			is_enslaved = no
			planet = { has_modifier = paragon_origin_reformists }
		}
	}
	custom_tooltip = {
		fail_text = "no_resettling_apps"
		if = {
			limit = {
				has_virtual_species_trait = yes
			}
			exists = owner
			owner = {
				is_fallen_empire = no
				NOT = {
					has_active_tradition = tr_virtuality_adopt
				}
			}
		}
	}
	if = { #Done as an IF/ELSE so the tooltip isn't hideous and unreadable
		limit = { is_shackled_robot = yes }
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				is_doomsday_planet = yes
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else_if = {
		limit = {
			planet = {
				is_capital = yes
				pop_amount < 200
			}
			NOT = {
				owner = {
					any_owned_planet = {
						is_capital = no
						NOT = {
							is_planet_class = pc_cosmogenesis_world
						}
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = "no_abandon_capital_for_unviable_planet"
			always = no
		}
	}
	else_if = {
		limit = {
			planet = {
				is_planet_class = pc_cosmogenesis_world
				owner = {
					has_ascension_perk = ap_cosmogenesis
				}
				pop_amount < 200
			}
		}
		custom_tooltip = {
			fail_text = "no_unfueled_lathe"
			always = no
		}
	}
	else_if = {
		limit = {
			planet = {
				has_deposit = d_genesis_preserve
				sapient_pop_amount < 200
			}
			owner = {
				is_guided_sapience_empire = yes
			}
		}
		custom_tooltip = {
			fail_text = "no_abandon_genesis_preserve"
			always = no
		}
	}
	else_if = {
		limit = {
			owner = {
				has_ascension_perk = ap_cosmogenesis
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		always = yes
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
	#	多彩
	#雌伏于阴影之下
	NOT = {
		owner = {
			has_origin = origin_female_in_shadow
			hidden_trigger = {
				any_country = { has_country_flag = origin_female_in_shadow@prev }
			}
			NOR = {
				has_ascension_perk = ap_bumpy_cg_road_ahead_yield
				has_ascension_perk = ap_bumpy_cg_road_ahead_coexistence
			}
		}
	}
}

# This = Country
can_country_resettle = { #可重新安置pop的国家类型
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_country_resettle_true
					has_country_flag = community_can_country_resettle_false
				}
			}
			#
			OR = {
				has_policy_flag = resettlement_allowed
				is_gestalt = yes
				has_ascension_perk = ap_cosmogenesis
				custom_tooltip = {
					text = owns_non_sapient_robots
					country_has_shackled_robots = yes
				}
				hidden_trigger = { #don't need to show this as tooltip only shown when all game rule fails, and this is a special case
					any_owned_planet = {
						is_doomsday_planet = yes
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_country_resettle_true
				NOT = { has_country_flag = community_can_country_resettle_false }
			}
		}
	}
}

# This = Planet
can_resettle_planet = { #可重新安置pop的行星类型
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

# This = Planet
should_spawn_deposits = { #应该生成地块
	is_artificial = no
}

# This = Planet
can_get_colony_events = { #可以触发殖民地事件
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_get_colony_events_true
					has_planet_flag = community_can_get_colony_events_false
				}
			}
			#
			NOT = {
				is_planet_class = "pc_cosmogenesis_world"
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_get_colony_events_true
				NOT = { has_planet_flag = community_can_get_colony_events_false }
			}
		}
	}
}

# This = Planet
is_new_colony = { #是新殖民地
	NOT = { has_planet_flag = UGRC_flg_plnt_RULE_is_new_colony_DISABLED }	# |UGRC标签|
}

# This = pop_group
pop_group_generates_crime = { #pop产生犯罪度
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_group_flag = community_mod_rules_trigger
				OR = {
					has_pop_group_flag = community_pop_group_generates_crime_true
					has_pop_group_flag = community_pop_group_generates_crime_false
				}
			}
			#
			has_pop_group_flag = UGRC_flg_pop_RULE_generates_crime	# |UGRC标签|	wsg/swg/kc/adf/PTep
		#	is_sapient = yes
		#	is_non_sapient_robot = no
		#	is_being_assimilated = no
		}
		AND = { #国防部 MOD
			has_pop_group_flag = community_mod_rules_trigger
			AND = {
				has_pop_group_flag = community_pop_group_generates_crime_true
				NOT = { has_pop_group_flag = community_pop_group_generates_crime_false }
			}
		}
	}
}

# This = planet
can_pops_grow_on_planet = { #pop可生长的行星
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_pops_grow_on_planet_true
					has_planet_flag = community_can_pops_grow_on_planet_false
				}
			}
			#
			NOR = {
				has_modifier = planet_population_control
				has_modifier = planet_population_control_gestalt
				is_planet_class = pc_cosmogenesis_world
				is_planet_class = pc_nanotech
				AND = { # conquered by crisis
					exists = controller
					controller = {
						OR = {
							is_country_type = ai_empire
							is_country_type = swarm
						}
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_pops_grow_on_planet_true
				NOT = { has_planet_flag = community_can_pops_grow_on_planet_false }
			}
		}
	}
}

# This = planet
can_pops_assemble_on_planet = { #pop可组装的行星
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_pops_assemble_on_planet_true
					has_planet_flag = community_can_pops_assemble_on_planet_false
				}
			}
			#
			NOR = {
				has_modifier = planet_robot_assembly_control
				has_modifier = planet_population_control_gestalt
				is_planet_class = pc_cosmogenesis_world
				AND = { # conquered by crisis
					exists = controller
					controller = {
						OR = {
							is_country_type = ai_empire
							is_country_type = swarm
						}
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_pops_assemble_on_planet_true
				NOT = { has_planet_flag = community_can_pops_assemble_on_planet_false }
			}
		}
	}
}

# This = planet
can_pops_decline_on_planet = { #pop可灭绝的行星
	always = yes
}

###_|强制灭绝|	####################################	wv/涅托
## If this returns true, the species will be set to decline even if it is not being purged
# This = species
# From = planet
## Note: success text tooltips are shown in alert_pops_declining alert.
should_force_decline_species = { #应该被强制灭绝的物种
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_should_force_decline_species_true
					has_species_flag = community_should_force_decline_species_false
				}
			}
			#
			OR = {
				# Infertile Clone Army pops should decline if in Country that can't have Vats, or there is a Vat shortage.
				custom_tooltip = {
					success_text = CLONE_ARMY_FORCE_DECLINE
					exists = this
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
					from = {
						OR = {
							# Check if country is unable to build Vats for this species.
							AND = {
								exists = owner
								owner = {
									OR = {
										NOT = { has_origin = origin_clone_army }					# Can't have Vats.
										has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
										NOT = { owner_main_species = { is_same_species = root } }	# Our Vats can't build this species.
									}
								}
							}
							# Vats check out, but are there more pops than Vats support?
							check_variable = { which = clone_pops_missing value < 0 }
						}
					}
				}
				# This slowly kills off the Syntheic Fertility Species
				custom_tooltip = {
					success_text = PATHOGENIC_GENES_FORCE_DECLINE
					exists = this
					has_trait = trait_pathogenic_genes
				}
				from = {
					custom_tooltip = {
						success_text = VOIDSPAWN_FORCE_DECLINE
						exists = this
						has_modifier = voidspawn_colony_mod
					}
				}
				##	wv	####################
				custom_tooltip = {
					success_text = OBJ_MASTER_FORCE_DECLINE
					has_trait = trait_reanimated_materials
					AND = {
						from = {
							exists = owner
							owner = {
								NOT = { has_country_flag = syn_witch }
							}
						}	
					}
					NOR = {
						has_trait = trait_psyborg_efficient_processors
						has_trait = trait_cro_implants_psionics
						has_trait = trait_psionic
					}
					from = {
						OR = {
							# Check if country is unable to build Vats for this species.
							AND = {
								exists = owner
								owner = {
									OR = {
										NOT = { has_origin = origin_obj_master }					# Can't have Obj-avatars.
										has_country_flag = synthetic_empire			# Can't have Vats anymore.
									}
								}
							}
							# Vats check out, but are there more pops than Vats support?
							num_assigned_jobs = {
								job = matter_reanimator
								value = 0
							}
						}
					}
				}
				#	涅托
				custom_tooltip = {
					success_text = "GF_nyto_decline"
					from = { colony_type = col_GF_nyto_capital }
				}
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_should_force_decline_species_true
				NOT = { has_species_flag = community_should_force_decline_species_false }
			}
		}
	}
}

# This = country
can_build_branch_offices = { #可建立分部
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_build_branch_offices_true
					has_country_flag = community_can_build_branch_offices_false
				}
			}
			#
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_MEGACORP
				##	+ETCPM/hiveDLC/MCA/驴岛/wsg	/GF/azl/azlr/精灵	/ECI
				OR = {
					#	vanilla
					is_megacorp = yes
					has_civic = civic_galactic_sovereign_megacorp

					#	ETCPM
					has_authority = auth_private
					#	hiveDLC
					has_valid_civic = civic_mutualistic_behavior
					has_valid_civic = civic_machine_trading
					#	MCA
					has_authority = auth_corporate_fiefdom
					has_authority = auth_cooperative
					#	驴岛
					has_civic = civic_business_union
					#	wsg
					has_authority = auth_warshipgirls
					AND = {
						has_authority = auth_shenhai
						OR = {
							has_country_flag = pantsu_shop_origin
							has_civic = civic_sh_criminal_syndicate
						}
					}
					#	GF
					has_civic = GF_civic_GK
					#	azl
					has_authority = auth_azur_lane_0
					has_authority = auth_azur_lane_1
					has_authority = auth_azur_lane_2
					has_authority = auth_azur_lane_K
					#	azlr
					AND = {
						exists = event_target:elizabeth_leader
						has_country_flag = azur_lane_leader_elizabeth
					}
					#	精灵
					is_ELF_can_build_branch_offices = yes
					#	莉莉
					has_authority = auth_AL_democratic
					has_authority = auth_AL_arsenal
					#	久远
					KZ_VOY_can_build_branch_offices = yes
					#	星海帝皇	|义军同盟|
					is_country_type = rebel_allience
					#	ARP
					has_authority = auth_Arp_0
					#	rmaid		|外派服务飞升|
					Maid_trigger_0_can_build_branch_offices = yes

					#	ECI		|全部可建|
					has_global_flag = ideological_revolution	# |ECI激活|
					#	HFE
					is_country_type = hfe_pirate
					#	SC
					has_civic = civic_taldarim_marauder
					#	多彩
					#淫渊企业
					has_authority = auth_brothel
					#破灭之光
					has_origin = origin_INN_destruction_light
					#迭起兴衰
					has_valid_civic = civic_parasite_rise_and_all
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_build_branch_offices_true
				NOT = { has_country_flag = community_can_build_branch_offices_false }
			}
		}
	}
}

# This = country
can_support_branch_offices = { #可被建立分部
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_support_branch_offices_true
					has_country_flag = community_can_support_branch_offices_false
				}
			}
			#
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
				NOR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire

					## 禁止所有|堕落帝国|	############
					# ev
					is_country_type = fallen_empire_ev
					# 阿夸
					is_country_type = kuat_fallen_empire
					is_country_type = kuat_awakened_fallen_empire
					is_country_type = awakened_return_kuat_empire
					# 致命风暴	|afe|
					is_country_type = awakened_gate_builders
					# ZOFE
					is_country_type = ascended_empire
					is_country_type = lost_empire
					# SOFE
					is_progenitor_empires = yes
					is_country_type = sofe_light_seeker
					# EE
					is_country_type = eternal_empire
					# 莉莉
					is_country_type = al_fallen_empire
					
					## 禁止其他|特殊国家|	############
					# azlr
					has_authority = auth_azur_dictatorial
				}
			}
			##_|禁止_巨企| +多彩		|待修|
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
				NOR = {
					#破灭之光
					has_origin = origin_INN_destruction_light
					#迭起兴衰
					has_valid_civic = civic_parasite_rise_and_all
				}
			}
			##_|必要国家类型|
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
				is_gestalt = no
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
				if = {
					limit = {
						is_primitive = yes
						is_gestalt = no
					}
					OR = {
						has_pre_ftl_age = atomic_age
						has_pre_ftl_age = early_space_age
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_support_branch_offices_true
				NOT = { has_country_flag = community_can_support_branch_offices_false }
			}
		}
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = { #可建立分部的行星
	OR = {
		AND = { #香草 vanilla
			OR = {
				AND = {
					is_scope_type = planet
					NAND = { #排除条件 Exclusions
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_branch_office_on_planet_true
							has_planet_flag = community_can_build_branch_office_on_planet_false
						}
					}
				}
				AND = {
					root = {
						is_scope_type = country
						NAND = { #排除条件 Exclusions
							has_country_flag = community_mod_rules_trigger
							OR = {
								has_country_flag = community_can_build_branch_office_on_planet_true
								has_country_flag = community_can_build_branch_office_on_planet_false
							}
						}
					}
				}
			}
			#
			###_|非灭绝政体|
			custom_tooltip = {
				fail_text = requires_recipient_not_fanatic_purifiers
				exists = owner
				owner = {
					OR = {
						is_same_species = root
						NOT = { has_civic = civic_fanatic_purifiers }
					}
				}
			}
			###_|未被观察|
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
				if = {
					limit = {
						root = { is_criminal_syndicate = yes }
						owner = { is_primitive = yes }
					}
					has_observation_outpost = yes
					observation_outpost_owner = {
						is_same_value = root
					}
				}
			}
			###_core商业协定	+hiveDLC/wsg/azl/azlr/AAR/ETCPM/莉莉/久远/rmaid/精灵/驴岛
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
				exists = owner
				OR = {
					##_|简单root条件|只要root是这些国家则必然能建造
					root = { 
						OR = {
							#	vanilla
							is_criminal_syndicate = yes 

							#	hiveDLC
							has_valid_civic = civic_mutualistic_behavior
							#	wsg
							has_civic = civic_sh_criminal_syndicate
							#	azl
							has_authority = auth_azur_lane_1
							#	莉莉
							has_authority = auth_AL_democratic
							has_authority = auth_AL_arsenal
							#	久远
							KZ_VOY_can_build_branch_offices = yes
							#	azlr
							AND = {
								exists = event_target:elizabeth_leader
								has_country_flag = azur_lane_leader_elizabeth
							}
							#	rmaid
							Maid_trigger_0_can_build_branch_offices = yes
							#	精灵
							is_ELF_can_force_build_branch_offices_on_planet = yes
							#	驴岛
							has_civic = civic_business_union
							#	多彩
							#爱欲盛宴
							has_valid_civic = civic_master
							#破灭之光
							has_origin = origin_INN_destruction_light
							#迭起兴衰
							has_valid_civic = civic_parasite_rise_and_all
						}
						
					}
					owner = { has_commercial_pact = root }
					owner = { is_in_federation_with = root }
					AND = {
						has_observation_outpost = yes
						observation_outpost = {
							has_modifier = preftl_action_trade_pact
						}
					}
		
					# allow branch offices in subsidiaries and vice versa (and fellow subjects)
					##_|附庸国建造|
					root = {
						is_subject = yes
						OR = {
							is_megacorp = yes
							has_civic = civic_galactic_sovereign_megacorp
						}
						overlord = {
							OR = {
								is_same_value = prevprev.owner
								is_same_value = prevprev.owner.overlord
							}
						}
					}
					##_|宗主国建造| +wsg
					owner = {
						is_subject = yes
						overlord = {
							OR = {
								is_same_value = root
								is_same_value = root.overlord
							}
							OR = {
								is_megacorp = yes
								has_civic = civic_galactic_sovereign_megacorp

								# |wsg|	=宗主必然建造
								has_authority = auth_warshipgirls
							}
						}
					}
					AND = {
						root = { has_civic = civic_galactic_sovereign_megacorp }
						owner = { is_galactic_community_member = yes }
					}
					AND = {
						root = { has_modifier = imperial_charter }
						owner = { is_galactic_community_member = yes }
					}
					##	ETCPM
					AND = {
						has_global_flag = expanded_pops_active
						owner = { has_country_flag = cb_markets_opened@root }
					}
					##	HFE
					root = { is_country_type = hfe_pirate		is_forced_friendly = prev.owner }
					##	azl	=|自我建造|
					AND = {
						has_global_flag = azurlane_KuRUMiiii	# |azl激活|
						owner = {
							is_same_value = root
							OR = {
								has_authority = auth_azur_lane_2
								has_authority = auth_azur_lane_0
								has_authority = auth_azur_lane_K
							}
						}
					}

					##	wsg	=|贸易战争|
					AND = {
						owner = { has_country_flag = lose_wg_shop_war }
						root = {
							OR = {
								has_country_flag = pantsu_shop_origin
								has_civic = civic_sh_criminal_syndicate
							}
						}
					}
					##	ECI	|自我建造|
					AND = {
						has_global_flag = ideological_revolution	# |ECI激活|
						owner = { is_same_value = root }	# <建造者>和<接受者>相同
					}
					##	星海帝皇	=|义军同盟|
					AND = {
						root = { is_country_type = rebel_allience }
						owner = { is_galactic_emperor = yes }
					}
				}
			}
			###_|巨企附庸|
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
				exists = owner
				# failure message for having a corporate overlord
		
				if = {
					limit = {
						OR = {
							# Not valid if you aren't a subject.
							root = {
								is_subject = no
							}
							# Or if your overlord isn't a megacorp.
							root = {
								is_subject = yes
								overlord = {
									NOR = {
										is_megacorp = yes
										has_civic = civic_galactic_sovereign_megacorp
									}
								}
							}
						}
					}
					always = yes
				}
				else = {
					AND = {
						root = {
							is_subject = yes
							overlord = {
								OR = {
									is_megacorp = yes
									has_civic = civic_galactic_sovereign_megacorp
								}
							}
						}
						owner = {
							OR = {
								is_subject = no
								AND = {
									is_subject = yes
									overlord = { NOT = { is_same_value = root.overlord } }
								}
							}
						}
					}
				}
			}
			###_|贸易协议| +wsg
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
				exists = owner
				OR = {
					##	|非罪企|
					root = { is_criminal_syndicate = no }
					##	|和平状态|
					owner = {
						NOR = {
							has_truce = root
							is_at_war_with = root
						}
					}
					##	|wsg|
					#	深海罪企
					owner = { has_civic = civic_sh_criminal_syndicate }
					#	贸易战争
					AND = {
						owner = { has_country_flag = lose_wg_shop_war }
						root = { has_country_flag = pantsu_shop_origin }
					}
				}
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
				exists = owner
				OR = {
					#_|非罪企|	
					root = { is_criminal_syndicate = no }
					#_|当前星球未查封| +wsg
					AND = {
						root = { 
							OR = {
								is_criminal_syndicate = yes
								has_civic = civic_sh_criminal_syndicate	# wsg
							}
						}
						NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
					}
					# wsg|贸易战争|
					AND = {
						owner = { has_country_flag = lose_wg_shop_war }
						root = { has_country_flag = pantsu_shop_origin }
					}
				}
			}
			###	无分部世界
			custom_tooltip = {
				fail_text = NO_BRANCH_OFFICE_ON_NANITE_WORLD
				NOT = { is_planet_class = pc_gray_goo }
			}
			custom_tooltip = {
				fail_text = NO_BRANCH_OFFICE_ON_SYNAPTIC_LATHE
				NOT = { is_planet_class = pc_cosmogenesis_world }
			}
			custom_tooltip = {
				fail_text = NO_BRANCH_OFFICE_ON_SELF
				OR = {
					owner = {
						NOT = { is_same_value = root }
					}
					# CGPC
					root = {
						#爱欲盛宴
						has_valid_civic = civic_master
					}
				}
			}
			### wsg
			custom_tooltip = {
				fail_text = requires_recipient_not_warshipgirls
				if = {
					limit = { has_global_flag = has_wsg_mod }
					OR = {
						AND = {
							exists = owner
							owner = {
								NOR = {
									has_authority = auth_warshipgirls 
									AND = {
										has_authority = auth_shenhai
										OR = {
											has_country_flag = pantsu_shop_origin
											has_civic = civic_sh_criminal_syndicate
										}
									}
								}
							}
						}
						# CGPC
						AND = {
							ROOT = {
								#爱欲盛宴
								has_valid_civic = civic_master
							}
							owner = {
								is_same_value = root
							}
						}
					}
				}
			}
			
			hidden_trigger = {
				### MCA
				if = { limit = { has_global_flag = using_mod_more_corporate_authorities }
					NOR = {
						NOT = { root = { has_ai_personality = principled_rogues		is_ai = yes } }	
						owner = { their_opinion = { who = root value < 0 } }
						owner = {
							their_opinion = { who = root value < 20 }
							NOT = { has_opinion_modifier = { who = root modifier = opinion_new_contact is_reverse = yes } }
						}
					}
				}
			}
			###	rmaid	|失控女仆|写得挺精致√
			Maid_trigger_2_can_build_branch_office_on_planet = yes
			### 精灵
			ELF_can_build_branch_office_on_planet_rules = yes
		}
		AND = { #国防部 MOD
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_branch_office_on_planet_true
						NOT = { has_planet_flag = community_can_build_branch_office_on_planet_false }
					}
				}
				AND = {
					root = {
						is_scope_type = country
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_build_branch_office_on_planet_true
							NOT = { has_country_flag = community_can_build_branch_office_on_planet_false }
						}
					}
				}
			}
		}
	}
}

###_|UGRC罪企|	ETCPM/hiveDLC/MCA/wsg/ev/azlr/精灵/ECI	####################################
# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = { #遵循犯罪集团规则
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_is_criminal_syndicate_rule_true
					has_country_flag = community_is_criminal_syndicate_rule_false
				}
			}
			#
			#	UGRC
			has_country_flag = UGRC_flg_cntr_RULE_criminal_syndicate
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_is_criminal_syndicate_rule_true
				NOT = { has_country_flag = community_is_criminal_syndicate_rule_false }
			}
		}
	}
}

# This = planet
can_crossbreed_species_on_planet = { #可杂交物种的行星
	exists = owner
	#	|PF|开关
	NOT = { has_global_flag = PF_flg_glbl_Hybrid_no }
	#	SC	禁止ntr
	any_owned_species = {
		NOR = {
			#	SC
			UGRC_trgr_spcs_SC = yes
		}
	}
	AND = {
		# +ECI
		owner = {
			OR = {
				has_ascension_perk = ap_xeno_compatibility
				# ECI
				AND = {
					has_valid_civic = civic_liberty_of_libido
					has_ascension_perk = ap_evolutionary_mastery
				}
			}
		}
		count_species = {
			limit = { is_crossbreeding_possible = yes }
			count >= 2
		}
	}
}

###_|杂交许可|	PF/SC/ECI	####################################
# This = species
can_crossbreed_species = { #可杂交的物种
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_species_flag = community_mod_rules_trigger
				OR = {
					has_species_flag = community_can_crossbreed_species_true
					has_species_flag = community_can_crossbreed_species_false
				}
			}
			#
			is_crossbreeding_possible = yes
			NOR = {
				# SC
				UGRC_trgr_spcs_SC = no
				# GF
				has_trait = GF_trait_doll
			}
			root = {
				NOR = {
					#	wsg	|禁止ntr|
					has_wg_traits = yes
					is_archetype = WARSHIPGIRL
					is_archetype = SHENHAI
					is_archetype = UNITED_FLEET
					is_archetype = NANITES_CROP
					# SC
					UGRC_trgr_spcs_SC = no
					# GF
					has_trait = GF_trait_doll
				}
			}
		}
		AND = { #国防部 MOD
			has_species_flag = community_mod_rules_trigger
			AND = {
				has_species_flag = community_can_crossbreed_species_true
				NOT = { has_species_flag = community_can_crossbreed_species_false }
			}
		}
	}
}

# No scope
can_win_timed_victory = { #可以赢得定时胜利
	custom_tooltip = {
		fail_text = VICTORY_CONDITION_CRISIS_IN_PROGRESS
		NOT = {
			any_country = {
				is_crisis_faction = yes
				NOT = { is_country_type = awakened_marauders }
			}
		}
	}
	custom_tooltip = {
		fail_text = VICTORY_CONDITION_WAR_IN_HEAVEN_IN_PROGRESS
		NOT = { has_global_flag = war_in_heaven_ongoing }
	}
}

###_[银河市场]		ev/ZOFE/SOFE/EE/UR/ECI	####################################
# This = country
can_use_galactic_market = { #可以使用银河市场
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_use_galactic_market_true
					has_country_flag = community_can_use_galactic_market_false
				}
			}
			#
			OR = {
				is_country_type = default
				
				#	ev
				AND = {
					is_country_type = default_ev
					NOT = { has_policy_flag = ev_no_use_galactic_market }
				}
				#	ZOFE
				is_country_type = ascended_empire
				is_country_type = lost_empire
				#	SOFE
				is_country_type = sbtg_stellarborne_empire_active
				#	EE
				is_country_type = eternal_empire
			}
			NOR = {
				has_civic = civic_fanatic_purifiers
				has_civic = civic_hive_devouring_swarm
				has_civic = civic_machine_terminator
				#	UR
				has_country_flag = dark_side
				#	ECI
				AND = {
					has_ethic = ethic_gestalt_consciousness
					NOT = {  has_tradition = tr_future_economy }
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_use_galactic_market_true
				NOT ={ has_country_flag = community_can_use_galactic_market_false }
			}
		}
	}
}

# ROOT = country
# THIS = pop_group
can_be_sold_on_slave_market = { #可在奴隶市场出售
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_group_flag = community_mod_rules_trigger
				OR = {
					has_pop_group_flag = community_can_be_sold_on_slave_market_true
					has_pop_group_flag = community_can_be_sold_on_slave_market_false
				}
			}
			#
			exists = owner
			OR = {
				is_enslaved = yes
				is_non_sapient_robot = yes
				is_shackled_robot = yes

				is_being_purged = yes	# AUP
				# ETCPM
				AND = {
					has_job = servant_noble
					ROOT = { allows_slavery = yes }
				}
			}
			#	ETCPM
			if = { limit = { has_global_flag = expanded_pops_active }	#_|激活|
				NOT = { owner = { has_country_flag = gai_machines_have_organics } }
				OR = {
					ROOT = { is_ai = no }
					AND = {
						OR = { is_unemployed = yes		has_job = servant_noble }
						planet = {
							count_owned_pop_amount = {
								count > 200
								limit = {
									OR = { is_unemployed = yes		has_job = servant_noble }
									NOR = {
										is_pop_category = specialist
										is_pop_category = ruler
									}
								}
							}
						}
					}
					AND = {
						OR = { has_job = servant has_job = servant_noble }
						planet = {
							free_amenities > 20
						}
					}
				}
			}
			#	SC
			species = { UGRC_trgr_spcs_SC = no }
			#	PTep
			NOT = { has_trait = trait_plentiful_traditions_pt_cocoon }
			#	多彩
			#被淫触之虫感染的人口无法贩卖
			can_infest_pops_dc = no
			#	wv
			NOR = {
				has_trait = trait_servitude
				has_trait = trait_reanimated_materials
			}
			
			##	VANILLA	############################################	+AUP
			OR ={
				ariphaos_patch_slaves_expel = yes	# AUP
				ROOT = { is_ai = no }
				has_citizenship_rights = no
				is_on_slave_market = yes	# pops that were already on the market should stay there
				AND = {
					is_being_assimilated = no		# AUP
					is_unemployed = yes
					planet = {
						num_unemployed > 200		# AUP	|v=300|
					}
				}
				# AUP
				OR = {
					NOT = { has_trait = trait_syncretic_proles }
					ROOT = { NOT = { has_origin = origin_syncretic_evolution } }
				}
			}
			if = {
				limit = {
					has_global_flag = organic_slave_trade_banned_flag
				}
				is_organic_species = no
			}
			if = {
				limit = {
					has_global_flag = sentient_slave_trade_banned_flag
				}
				is_sapient = no
			}
			NOR = {
				# Since they can't reproduce, they die out too fast for anyone to want to buy them.
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
				has_virtual_species_trait = yes
			}
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_group_flag = community_can_be_sold_on_slave_market_true
				NOT = { has_pop_group_flag = community_can_be_sold_on_slave_market_false }
			}
		}
	}
}

# This = country
can_be_part_of_galactic_community = { #可成为银河社区成员
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_be_part_of_galactic_community_true
					has_country_flag = community_can_be_part_of_galactic_community_false
				}
			}
			#
			##	+ev/ZOFE/SOFE/MECR
			custom_tooltip = {
				fail_text = "community_default_failtext"
				OR = {
					is_country_type = default
					AND = {
						is_country_type = awakened_fallen_empire
						has_country_flag = fallen_empire_hive_control
					}
					is_country_type = default_ev		# ev
					is_country_type = ascended_empire	# ZOFE
					is_country_type = sbtg_stellarborne_empire_active	# SOFE
					MECR_trigger_0_community_country_type = yes		#MECR
				}
			}
			##	+UR
			custom_tooltip = {
				fail_text = "community_homicidal_failtext"
				NOR = {
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
					has_civic = civic_machine_terminator
					has_menace_perk = menp_behemoth_ever_hungry
					# UR
					has_country_flag = dark_side
				}
			}
			custom_tooltip = {
				fail_text = "community_declared_crisis_failtext"
				has_been_declared_crisis = no
			}
			custom_tooltip = {
				fail_text = "community_declared_crisis_failtext"
				#fail_text = "community_overlord_declared_crisis_failtext"
				OR = {
					NOT = { exists = overlord }
					overlord = { has_been_declared_crisis = no }
				}
			}
			##	wsg
			custom_tooltip = { #焚飞齐宣王被踢出共同体
				fail_text = "community_declared_crisis_failtext"
				NOT = { has_country_flag = wgfm_quit_community }
			}
			##	MECR
			MECR_trigger_1_can_be_part_of_galactic_community = yes
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_be_part_of_galactic_community_true
				NOT = { has_country_flag = community_can_be_part_of_galactic_community_false }
			}
		}
	}
}

###_|星海帝国|	ev/ZOFE/SOFE/UR/wsg/MECR	####################################
# This = country
can_be_part_of_galactic_empire = { #可成为银河帝国的一部分
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_be_part_of_galactic_empire_true
					has_country_flag = community_can_be_part_of_galactic_empire_false
				}
			}
			#
			##	+ev/ZOFE/SOFE/MECR
			custom_tooltip = {
				fail_text = "community_default_failtext"
				OR = {
					is_country_type = default
					AND = {
						is_country_type = awakened_fallen_empire
						has_country_flag = fallen_empire_hive_control
					}
					is_country_type = default_ev		# ev
					is_country_type = ascended_empire	# ZOFE
					is_country_type = sbtg_stellarborne_empire_active	# SOFE
					MECR_trigger_0_community_country_type = yes		# MECR
				}
			}
			##	+UR
			custom_tooltip = {
				fail_text = "community_homicidal_failtext"
				NOR = {
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
					has_civic = civic_machine_terminator
					has_menace_perk = menp_behemoth_ever_hungry
					# UR
					has_country_flag = dark_side
				}
			}
			custom_tooltip = {
				fail_text = "community_declared_crisis_failtext"
				has_been_declared_crisis = no
			}
			custom_tooltip = {
				fail_text = "community_declared_crisis_failtext"
				#fail_text = "community_overlord_declared_crisis_failtext"
				OR = {
					NOT = { exists = overlord }
					overlord = { has_been_declared_crisis = no }
				}
			}
			##	wsg
			custom_tooltip = { #焚飞齐宣王被踢出共同体
				fail_text = "community_declared_crisis_failtext"
				NOT = { has_country_flag = wgfm_quit_community }
			}
			##	MECR
			MECR_trigger_2_can_be_part_of_galactic_empire = yes
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_be_part_of_galactic_empire_true
				NOT = { has_country_flag = community_can_be_part_of_galactic_empire_false }
			}
		}
	}
}

###_[ZOFE/SOFE/UR/wsg]	####################################
# This = country
can_see_galactic_community = { #可以看到银河社区
	OR = {
		has_country_flag = galcom_form_aye
		has_country_flag = galcom_form_nay
		is_galactic_community_member = yes
		is_country_type = lost_empire		# ZOFE
		is_country_type = sbtg_stellarborne_empire_active	# SOFE
		has_country_flag = dark_side		# UR
	}
	#	wsg
	custom_tooltip = { #焚飞齐宣王被踢出共同体
		fail_text = "community_declared_crisis_failtext"
		NOT = { has_country_flag = wgfm_quit_community }
	}
}

###_[ev/ZOFE/SOFE/UR/wsg/MECR]	####################################
# This = country
can_be_part_of_galactic_council = { #可成为银河理事会成员
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_be_part_of_galactic_council_true
					has_country_flag = community_can_be_part_of_galactic_council_false
				}
			}
			#
			##	+ev/ZOFE/SOFE/MECR
			OR = {
				is_country_type = default
				has_country_flag = fallen_empire_hive_control
				is_country_type = default_ev		# ev
				is_country_type = ascended_empire	# ZOFE
				is_country_type = sbtg_stellarborne_empire_active	# SOFE
				MECR_trigger_0_community_country_type = yes		# MECR
			}
			##	+UR
			NOR = {
				has_civic = civic_fanatic_purifiers
				has_civic = civic_hive_devouring_swarm
				has_civic = civic_machine_terminator
				has_menace_perk = menp_behemoth_ever_hungry

				# UR
				has_country_flag = dark_side
			}
			##	wsg
			custom_tooltip = {#焚飞齐宣王被踢出共同体
				fail_text = "community_declared_crisis_failtext"
				NOT = { has_country_flag = wgfm_quit_community }
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_be_part_of_galactic_council_true
				NOT = { has_country_flag = community_can_be_part_of_galactic_council_false }
			}
		}
	}
}

# If, 'yes', forces an empire to be advanced at game start (overrides game settings)
# This = country
must_be_advanced_empire = { #一定是高级帝国
	OR = {
		has_country_flag = lost_colony_parent
		has_country_flag = MSI
	}
}

# If 'no', blocks an empire from being advanced at game start (overrides 'must_be_advanced_empire' above)
# This = country
is_allowed_to_be_advanced_empire = { #可以作为高级帝国生成
	always = yes
}

# This = planet
has_enough_pops_for_necrophage_on_planet = { #有足够pop可尸化的行星?
	owner = { has_origin = origin_necrophage }
	has_available_jobs = necro_apprentice
	if = {
		limit = {
			has_planet_flag = necrophage_alert_timer
		}
		count_owned_species = {
			count = 0
			limit = { species_can_be_necrophaged = yes }
		}
	}
	else = {
		NOT = { any_owned_pop_group = { can_work_specific_job = necro_apprentice } }
	}
}

###_[pop可移民]		ETCPM/HFE	####################################
# Root = current planet
# This = pop_group
# Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
can_pop_group_auto_migrate = { #可自动迁移的pop
	hidden_trigger = { # This is always true where this tooltip is called
		OR = {
			is_unemployed = yes
			is_pop_category = civilian
			is_pop_category = maintenance_drone
			# ETCPM
			has_job = grunt
			has_job = slave_toiler
			# HFE
			hfe_trigger_unemployed_auto_migrate = yes
		}
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ASSIMILATED
		is_being_assimilated = no
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ROOTED
		NOT = { has_trait = trait_rooted }
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_VIRTUALITY
		OR = {
			has_virtual_species_trait = no
			AND = {
				has_virtual_species_trait = yes
				exists = owner
				owner = {
					OR = {
						is_individual_machine = no
						is_machine_empire = no
					}
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_shackled_robot = yes
				is_enslaved = yes
			}
		}
		custom_tooltip = {
			fail_text = AUTO_MIGRATE_SLAVE_PROCESSING
			OR = {
				planet = {
					OR = {
						has_building = building_slave_processing
						AND = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = {
									has_starbase_building = ring_slave_processing_facility
								}
							}
						}
					}
				}
				solar_system = {
					count_starbase_buildings = {
						type = transit_hub
						count >= 1
						include_being_constructed = no
					}
				}
			}
		}
	}
	#雌伏于阴影之下
	NOT = {
		owner = {
			has_origin = origin_female_in_shadow
			hidden_trigger = {
				any_country = { has_country_flag = origin_female_in_shadow@prev }
			}
			NOT = { has_ascension_perk = ap_bumpy_cg_road_ahead_yield }
		}
	}
}

###_[星球可移民]	ETCPM/ZOFE/EE/ev/PDhab	####################################
# This = planet
# Checked before can_pop_auto_migrate to save performance
can_planet_auto_migrate = { #可自动迁移的行星
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_planet_auto_migrate_true
					has_planet_flag = community_can_planet_auto_migrate_false
				}
			}
			#
			hidden_trigger = {
				is_colony = yes
			}
			custom_tooltip = {
				fail_text = AUTO_MIGRATE_CULTURE_SHOCK
				NOT = { has_modifier = planet_culture_shock }
			}
			custom_tooltip = {
				fail_text = AUTO_MIGRATE_COLONY_TOO_NEW
				OR = {
					colony_age > 60
					is_capital = yes # Don't break Doomsday!
				}
			}
			custom_tooltip = {
				fail_text = AUTO_MIGRATE_ONLY_HAS_ONE_POP
				sapient_pop_amount > 100
			}
			hidden_trigger = {
				exists = owner
				owner = {
					OR = {
						is_country_type = default
						is_country_type = awakened_fallen_empire
						#	ZOFE
						is_country_type = ascended_empire
						is_country_type = lost_empire
						is_country_type = awakened_original_empire
						#	EE
						is_country_type = eternal_empire
						#	ev				
						is_country_type = default_ev
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_planet_auto_migrate_true
				NOT = { has_planet_flag = community_can_planet_auto_migrate_false }
			}
		}
	}
}

###	Eevt/EFevt	####################################
can_planet_receive_auto_migration = { #可接受自动迁移的行星
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_planet_receive_auto_migration_true
					has_planet_flag = community_can_planet_receive_auto_migration_false
				}
			}
			#
			NOR = {
				planet_devastation >= 10
				has_modifier = planet_culture_shock
				is_doomsday_planet = yes
				is_planet_class = pc_cosmogenesis_world

				# Eevt
				has_modifier = deteriorating_ecosystem
				has_modifier = catastrophe_approach
				has_modifier = apocalypse
				has_modifier = ravenous_locusts
				has_modifier = planet_active_worm
				# EFevt
				has_modifier = mzilli_events_dying_world
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_planet_receive_auto_migration_true
				NOT = { has_planet_flag = community_can_planet_receive_auto_migration_false }
			}
		}
	}
}

###_[基因修饰]	####################################
###_|宜居改造|	+PF
#This, root = country
can_gene_mod_habitability = { #基因修饰宜居性
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_gene_mod_habitability_true
					has_country_flag = community_can_gene_mod_habitability_false
				}
			}
			#
			# always = yes
			# See can_change_habitability_preference in 05__scripted_triggered_traits.txt
			NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_gene_mod_habitability_true
				NOT = { has_country_flag = community_can_gene_mod_habitability_false }
			}
		}
	}
}
###_|高级特质|	+FW/PF/wsg/涅槃
#This, root = country
can_add_advanced_traits = { #可以添加高级特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_add_advanced_traits_true
					has_country_flag = community_can_add_advanced_traits_false
				}
			}
			#
			OR = {
				has_tradition = tr_genetics_enhanced_expression
				has_active_tradition = tr_purity_exemplary_genetics
				has_active_tradition = tr_cloning_somatic_synthesization
				has_active_tradition = tr_cloning_somatic_synthesization_clone_army
				has_active_tradition = tr_mutation_unnatural_selection
				has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
				has_wsg_genemodding_tech = yes	# wsg
				is_nirvana_empire = yes			# 涅槃
			}
			#	PF
			NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_add_advanced_traits_true
				NOT = { has_country_flag = community_can_add_advanced_traits_false }
			}
		}
	}
}
###_|负面特质|	+FW/PF/wsg/涅槃/wv
#This, root = country
can_add_negative_traits_organic = { #可以添加有机负面特质
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_add_negative_traits_organic_true
					has_country_flag = community_can_add_negative_traits_organic_false
				}
			}	
			#	
			OR = {
				has_utopia = yes
				has_biogenesis_dlc = yes
			}
			OR = {
				has_tradition = tr_genetics_resequencing
				has_active_tradition = tr_cybernetics_integrated_anatomy
				has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
				has_active_tradition = tr_purity_genotype_regeneration
				has_active_tradition = tr_purity_genotype_regeneration_wilderness
				has_active_tradition = tr_mutation_unnatural_selection
			}
			#	PF
			NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_add_negative_traits_organic_true
				NOT = { has_country_flag = community_can_add_negative_traits_organic_false }
			}
		}
	}
}

#This, root = country
can_remove_positive_traits_organic = { #可以移除正面有机特质
	OR = {
		AND = { #香草 vanilla
			OR = {
				NAND = { #排除条件 Exclusions
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_remove_positive_traits_organic_true
						has_country_flag = community_can_remove_positive_traits_organic_false
					}
				}			
				#
				OR = {
					AND = {
						OR = {
							has_utopia = yes
							has_biogenesis_dlc = yes
						}
						#_|乌托邦|	+wsg
						OR = {
							has_tradition = tr_genetics_resequencing
							has_active_tradition = tr_cybernetics_integrated_anatomy
							has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
							has_active_tradition = tr_purity_genotype_regeneration
							has_active_tradition = tr_purity_genotype_regeneration_wilderness
							has_active_tradition = tr_cloning_somatic_synthesization
							has_active_tradition = tr_cloning_somatic_synthesization_clone_army
							has_active_tradition = tr_mutation_unnatural_selection
							has_wsg_genemodding_tech = yes	# wsg
							has_tradition = tr_objects_wv_integrated_physiology	# wv
						}
					}
					#_|毒种|
					AND = {
						has_toxoids = yes
						has_origin = origin_overtuned
					}
					#_|科技|
					has_technology = tech_gene_expressions
					has_technology = tech_epigenetic_triggers
					#_|mod|
					has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
					is_nirvana_empire = yes	#	涅槃
				}			
			}
			#	PF
			NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_remove_positive_traits_organic_true
				NOT = { has_country_flag = community_can_remove_positive_traits_organic_false }
			}
		}
	}
}

#This, root = country
can_modify_organic_portraits = { #可以修改有机肖像
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_modify_organic_portraits_true
					has_country_flag = community_can_modify_organic_portraits_false
				}
			}		
			#	
			OR = {
				has_tradition = tr_genetics_creation
				has_tradition = tr_purity_exemplary_genetics
				has_active_tradition = tr_cloning_somatic_synthesization
				has_active_tradition = tr_cloning_somatic_synthesization_clone_army
				has_tradition = tr_mutation_unnatural_selection
				has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
				has_wsg_genemodding_tech = yes	# wsg
				is_nirvana_empire = yes			# 涅槃
			}
			#	PF
			NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_modify_organic_portraits_true
				NOT = { has_country_flag = community_can_modify_organic_portraits_false }
			}
		}
	}
}

# This = country establishing contact | From = target country
# Final check for whether there should be a first contact site spawned. Main check is via country type 'contact_rule', in code. See also: error-logging/fixing event 'action.240', which duplicates this trigger.
can_have_first_contact = { #可以有第一次接触
	if = {
		limit = { from = { is_amoeba_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_amoeba_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_tiyanki_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_tiyanki_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_cutholoids_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_cutholoids_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_voidworms_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_voidworms_country_type = yes }
			}
		}
	}
	else_if = {
		limit = { from = { is_crystal_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_crystal_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_drone_country_type = yes } }
		NOT = {
			any_active_first_contact = {
				contact_country = {
					is_drone_country_type = yes
					NOT = { has_country_flag = queued_to_destroy }
				}
			}
		}
	}
	else_if = {
		limit = { from = { is_country_type = cloud } }
		NOT = {
			any_active_first_contact = {
				contact_country = { is_country_type = cloud }
			}
		}
	}
	else_if = {
		limit = {
			from = {
				OR = {
					is_country_type = caravaneer_fleet
					is_country_type = caravaneer_home
				}
			}
		}
		NOT = {
			any_active_first_contact = {
				contact_country = {
					OR = {
						is_country_type = caravaneer_fleet
						is_country_type = caravaneer_home
					}
				}
			}
		}
	}
	else_if = {
		limit = {
			from = {
				is_country_type = dragon_dummy
			}
		}
		has_origin = origin_here_be_dragons
		from = { has_country_flag = dragon_of@prev }
	}
	else_if = {
		limit = {
			from = {
				is_country_type = jaunting_traveler_dummy
			}
		}
		from = { has_country_flag = jaunting_traveler_of@prev }
	}
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_raise_imperial_authority = { #可利用特使提高帝国权威
	always = yes
}

# Root = Country with envoys to send
# This = Imperium leader country
can_use_envoys_to_lower_imperial_authority = { #可利用特使降低帝国权威
	custom_tooltip = {
		fail_text = cannot_lower_authority_emperor
		root = { is_galactic_emperor = no }
	}
	custom_tooltip = {
		fail_text = cannot_lower_authority_espionage_operation
		root = {
			NOT = { has_modifier = undermining_efforts_stalled }
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = { #可作为格式塔子个体的pop
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_flag = community_mod_rules_trigger
				OR = {
					has_pop_flag = community_can_fill_drone_job_true
					has_pop_flag = community_can_fill_drone_job_false
				}
			}			
			#
			custom_tooltip = DRONE_JOB_TRIGGER
			hidden_trigger = {
				exists = owner
				owner = { is_gestalt = yes }
				is_being_purged = no
				is_enslaved = no
				is_being_assimilated = no
				NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			}
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_flag = community_can_fill_drone_job_true
				NOT = { has_pop_flag = community_can_fill_drone_job_false }
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = { #可作为工人的pop
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_flag = community_mod_rules_trigger
				OR = {
					has_pop_flag = community_can_fill_worker_job_true
					has_pop_flag = community_can_fill_worker_job_false
				}
			}		
			#		
			custom_tooltip = WORKER_JOB_TRIGGER
			hidden_trigger = {
				if = {
					limit = {
						planet = {
							is_planet_class = pc_cosmogenesis_world #Everyone can become a chip slave
						}
					}
					always = yes
				}
				else = {
					NOT = { has_ethic = ethic_gestalt_consciousness }
					exists = owner
					is_being_purged = no
					is_being_assimilated = no
					NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
					NAND = {
						has_citizenship_type = { type = citizenship_slavery }
						OR = {
							has_slavery_type = { type = slavery_livestock }
							has_slavery_type = { type = slavery_matrix }
						}
					}
					if = {
						limit = {
							has_disconnected_drone_citizenship_type = yes
						}
						disconnected_drone_can_be_worker = yes
					}
					if = {
						limit = {
							divinity_right_to_work_job_check_trigger_exempt = no
						}
						divinity_right_to_work_job_check_trigger_worker = yes
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_flag = community_can_fill_worker_job_true
				NOT = { has_pop_flag = community_can_fill_worker_job_false }
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_specialist_job
can_fill_specialist_job = { #可作为专家的pop #奇妙的条件?
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_flag = community_mod_rules_trigger
				OR = {
					has_pop_flag = community_can_fill_specialist_job_true
					has_pop_flag = community_can_fill_specialist_job_false
				}
			}		
			#	
			can_fill_specialist_job_trigger = yes
			# Defined in 01_scripted_triggers_jobs.txt
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_flag = community_can_fill_specialist_job_true
				NOT = { has_pop_flag = community_can_fill_specialist_job_false }
			}
		}
	}
}
#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = { #可作为统治者的pop
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_flag = community_mod_rules_trigger
				OR = {
					has_pop_flag = community_can_fill_ruler_job_true
					has_pop_flag = community_can_fill_ruler_job_false
				}
			}	
			#		
			if = {
				limit = {
					exists = owner
					owner = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
				}
				custom_tooltip = {
					text = RULER_JOB_NECROPHAGE_TRIGGER
					has_trait = trait_necrophage
					is_enslaved = no
					is_being_purged = no
					is_being_assimilated = no
				}
			}
			else = {
				custom_tooltip = RULER_JOB_TRIGGER
				hidden_trigger = {
					NOT = { has_ethic = ethic_gestalt_consciousness }
					exists = owner
					OR = {
						is_enslaved = no
						owner = { has_valid_civic = civic_all_slave }
					}
					is_being_purged = no
					is_being_assimilated = no
					# Rule out Traits for servitude & lack of free will
					can_think = yes
					# Rule out Disconnected Drones
					has_disconnected_drone_citizenship_type = no
					# Rule out Machine Pops, unless they're rendered sapient
					OR = {
						NOT = { has_trait = trait_mechanical }
						AND = {
							owner = { has_technology = tech_synthetic_workers }
							owner = { has_policy_flag = ai_full_rights }
						}
					}
					# Rule out Organic Trophies
					NOT = {
						has_citizenship_type = {
							type = citizenship_organic_trophy
							country = owner
						}
					}
					# Rule out violations of the 'Right to Work' Resolution (prioritises organic workers)
					if = {
						limit = {
							divinity_right_to_work_job_check_trigger_exempt = no
						}
						divinity_right_to_work_job_check_trigger_ruler = yes
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_flag = community_can_fill_ruler_job_true
				NOT = { has_pop_flag = community_can_fill_ruler_job_false }
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_precursor_job
can_fill_precursor_job = { #可以担任土著？工作
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_pop_flag = community_mod_rules_trigger
				OR = {
					has_pop_flag = community_can_fill_precursor_job_true
					has_pop_flag = community_can_fill_precursor_job_false
				}
			}	
			#		
			custom_tooltip = SPECIALIST_JOB_TRIGGER
			hidden_trigger = {
				exists = owner
				owner = { is_fallen_empire = yes }
			}
		}
		AND = { #国防部 MOD
			has_pop_flag = community_mod_rules_trigger
			AND = {
				has_pop_flag = community_can_fill_precursor_job_true
				NOT = { has_pop_flag = community_can_fill_precursor_job_false }
			}
		}
	}
}

# Some parts in code still need to know some more specifics from script
#this/root = pop job
is_unemployment_job = { #是失业岗位
	OR = {
		has_job_category = ruler_unemployment
		has_job_category = specialist_unemployment
		has_job_category = worker_unemployment
		has_job_category = simple_drone_unemployment
		has_job_category = complex_drone_unemployment
		has_job_category = bio_trophy_unemployment
	}
}

# Some parts in code still need to know some more specifics from script
#this/root = pop job
is_civilian_job = { #是平民岗位
	OR = {
		has_job_category = civilian
		has_job_category = maintenance_drone
	}
}

# Checks whether the game should try and build a building or district on a planet via scripts in common/colony_automation
# Does not apply to "crisis building" (colony_automation_exceptions) or sector automation (sector_focuses)
# this = planet
should_planetary_automate = { #可自动建设的行星
	always = yes
}

#暂不考虑对此的兼容 仅作文本保留
	##开除领袖花费
	#dismiss_leader_cost = {
	#	base = 0
	#}
#

###_[解雇领袖]	SC/ECI	####################################
# this = leader
can_dismiss_leader = { #可以开除领袖
	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions
					has_leader_flag = community_mod_rules_trigger
					OR = {
						has_leader_flag = community_can_dismiss_leader_true
						has_leader_flag = community_can_dismiss_leader_false
					}
				}
				NAND = { #排除条件 Exclusions
					exists = owner
					owner = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_dismiss_leader_country_true
							has_country_flag = community_can_dismiss_leader_country_false
						}
					}
				}
			}		
			#
			if = {
				limit = {
					leader_class = commander
					is_idle = no
					# Rulers and heirs can't be dismissed any way and can be non-idle
					is_ruler = no
					is_heir = no
				}
				custom_tooltip = {
					fail_text = "requires_fleet_control"
					exists = fleet
					fleet = {
						controller = {
							is_same_value = prev.owner
							is_same_value = prevprev.owner
						}
					}
				}
			}
			if = {
				limit = {
					OR = {
						is_heir = yes
						is_ruler = yes
					}
				}
				custom_tooltip = {
					always = no
					fail_text = "can_not_dismiss_rulers"
				}
			}

			if = {
				limit = {
					leader_class = scientist
				}
				custom_tooltip = {
					fail_text = "can_not_dismiss_rift_explorer"
					NAND = {
						exists = fleet
						fleet = {
							has_fleet_order = explore_astral_rift_fleet_order
						}
					}
				}
			}
			if = {
				limit = {
					leader_class = commander
				}
				custom_tooltip = {
					fail_text = "no_dismissing_tacs"
					NOT = { has_trait = leader_trait_tactical_algorithms }
				}
			}
			if = {
				limit = {
					has_leader_flag = manifesti_divine_leader
				}
				custom_tooltip = {
					fail_text = "manifesti_leader_tt"
					NOT = { has_leader_flag = manifesti_divine_leader }
				}
			}
			# SC
			custom_tooltip = {
				fail_text = "cannot_fire_StellarisCraft_leader"
				NOT = { has_leader_flag = StellarisCraft_event_leader }
			}
			# ECI
			custom_tooltip = {
				fail_text = "requires_actor_not_coalition_government_society"
				exists = owner
				owner = {
					NOT = { has_valid_civic = civic_coalition_government }
				}
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = {
					has_leader_flag = community_mod_rules_trigger
					AND = {
						has_leader_flag = community_can_dismiss_leader_true
						NOT = { has_leader_flag = community_can_dismiss_leader_false }
					}
				}
				AND = {
					owner = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_dismiss_leader_country_true
							NOT = { has_country_flag = community_can_dismiss_leader_country_false }
						}
					}
				}
			}
		}
	}
}

# this = country
can_country_change_councilors = { #是否可变更委员会委员
	is_gestalt = no
}

# this = leader
should_count_towards_leader_cap = { #是否占用领袖数量
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_should_count_towards_leader_cap_true
					has_leader_flag = community_should_count_towards_leader_cap_false
				}
			}
			#
			NOR = {
				leader_class = envoy
				is_hidden = yes
				has_leader_flag = hired_admiral_merc_leader
				has_leader_flag = legendary_leader
				has_trait = leader_trait_rift_warped
				AND = {
					has_trait = leader_trait_eager
					has_base_skill < 4
				}
				AND = {
					is_ruler = yes
					OR = {
						has_trait = leader_trait_ruler_machine_intelligence
						has_trait = leader_trait_ruler_hive_mind
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_should_count_towards_leader_cap_true
				NOT = { has_leader_flag = community_should_count_towards_leader_cap_false }
			}
		}
	}
}

# From = country, country that tries to connect using relay network
# ROOT/This = country, target country to connect to using relay network
can_country_connect_to_relay_network = { #可连接星际铁路的国家
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_country_connect_to_relay_network_true
					has_country_flag = community_can_country_connect_to_relay_network_false
				}
			}		
			#	
			AND = {
				is_primitive = no
				OR = {
					is_country_type = default
					is_subject = yes
					is_overlord = yes
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_country_connect_to_relay_network_true
				NOT = { has_country_flag = community_can_country_connect_to_relay_network_false }
			}
		}
	}
}

# this = planet
should_ai_build_stronghold_on_vulnerable_planet = { #AI应该建造要塞的容易被攻陷的行星
	planet_stability > 50
	OR = {
		AND = {
			pop_amount <= 500
			num_buildings = { type = building_stronghold value < 1 }
		}
		AND = {
			pop_amount <= 1000
			num_buildings = { type = building_stronghold value < 2 }
		}
		AND = {
			pop_amount <= 1500
			num_buildings = { type = building_stronghold value < 3 }
		}
		AND = {
			pop_amount <= 2500
			num_buildings = { type = building_stronghold value < 4 }
		}
	}

	exists = sector
	sector = {
		NOT = { has_sector_type = core_sector }
	}

	IF = {
		LIMIT = {
			exists = owner
			owner = { is_gestalt = yes }
		}
		NOT = { has_available_jobs = warrior_drone }
		any_owned_pop_group = {
			is_unemployed = yes
			can_work_specific_job = warrior_drone
		}
	}
	ELSE = {
		NOT = { has_available_jobs = soldier }
		any_owned_pop_group = {
			is_unemployed = yes
			can_work_specific_job = soldier
		}
	}
}

# Used to call on the Retirement Toast when a leader dies
# This = leader
will_leader_retire = { #领导人是否会退休
	exists = owner
	NOT = { has_leader_flag = use_unspecific_death_reason }
	owner = {
		NOT = { has_ethic = ethic_gestalt_consciousness }
	}
	has_leader_flag = retirement_is_default # Randomized retirement instead of death in paragon.590
}

# Used to call the Second Chance toast when a leader dies, still need to clone it and actually have the leader survive
# This = leader
will_leader_survive = { #领袖复活
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_will_leader_survive_true
					has_leader_flag = community_will_leader_survive_false
				}
			}		
			#	
			exists = owner
			OR = {
				# Spare Organs trait
				AND = {
					species = { has_trait = trait_spare_organs }
					NOT = { has_trait = trait_leader_second_chanced }
				}
				leader_backup_clone_can_activate = yes
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_will_leader_survive_true
				NOT = { has_leader_flag = community_will_leader_survive_false }
			}
		}
	}
}

# This = country, Country that wants to get an external leader
# From = country, country that we are trying to get from
can_get_external_leader_pool_candidate = { #可以得到外部领袖候选池
	exists = from
	OR = {
		has_diplo_migration_treaty = from
		is_in_federation_with = from
		is_overlord_to = from
	}
	# Both empires must be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_machine_empire = yes
			}
			FROM = {
				is_machine_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_hive_empire = yes
			}
			FROM = {
				is_hive_empire = yes
			}
		}
	}
}

# This = leader, leader we'd like to trade
# Root = country, country that owns the leader currently
# From = country, country that would receive the leader
can_trade_leader = { #可交易的领导者
	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #所有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_leader_true
							has_country_flag = community_can_trade_leader_false
						}
					}
				}
				NAND = { #领袖域 leader
					has_leader_flag = community_mod_rules_trigger
					OR = {
						has_leader_flag = community_can_trade_leader_true
						has_leader_flag = community_can_trade_leader_false
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_leader_true
							has_country_flag = community_can_trade_leader_false
						}
					}
				}
			}		
			##_|mod特殊|	FW/
			hidden_trigger = {
				FW_trgr_ldr_SP = no	# |FW特殊领袖|
			}
			#	
			##_|特殊任务|	+rmaid/多彩
			# The leader must have a trait from a specialist subject type.
			this = {
				OR = {
					has_specialist_subject_leader_trait = yes
					has_specialist_subject_leader_trait_maid = yes	# rmaid
					has_leader_flag = tradable_leader	# 多彩
					GF_can_trade_robotic_leader = yes   # GF
				}
				is_councilor = no
				is_heir = no
			}
			##_|战术算法|
			OR = {
				AND = { # Either from subject to Overlord
					ROOT = {
						is_subject = yes
					}
					FROM = {
						is_overlord_to = ROOT
					}
				}
				AND = { # Or from a tactical cogitator empire to a NON tactical cogitator empire
					ROOT = { has_valid_civic = civic_machine_tactical_algorithms }
					FROM = {
						NOT = { has_valid_civic = civic_machine_tactical_algorithms }
						is_fallen_empire = no
						NOT = {
							any_owned_leader = {
								has_trait = leader_trait_tactical_algorithms
							}
						}
					}
				}
			}
			##_|同类政体|	+多彩
			# The subject and overlord must both be regular empires, machine intelligences or hive-minds.
			OR = {
				AND = {
					ROOT = {
						is_regular_empire = yes
					}
					FROM = {
						is_regular_empire = yes
					}
				}
				AND = {
					ROOT = {
						is_machine_empire = yes
					}
					FROM = {
						is_machine_empire = yes
					}
				}
				AND = {
					ROOT = {
						is_hive_empire = yes
					}
					FROM = {
						is_hive_empire = yes
					}
				}
				AND = { # Tactical Cogitator option
					ROOT = {
						has_valid_civic = civic_machine_tactical_algorithms
					}
					FROM = {
						OR = {
							is_regular_empire = yes
							is_hive_empire = yes
							is_machine_empire = yes
						}
						NOT = { has_country_flag = no_murdering_tactical_leaders }
						NOT = {
							any_owned_leader = {
								has_trait = leader_trait_tactical_algorithms
							}
						}
					}
				}
				#	多彩
				AND = {
					has_global_flag = nongestalt_leader_always_tradable
					this.species = {
						NOR = {
							has_trait = trait_hive_mind
							has_trait = trait_machine_unit
						}
					}
				}
			}
			##	|国家类型|	+ZOFE
			# Can't trade gestalt nodes
			is_gestalt_node = no
			# The overlord can't be a fallen or awakened empire.
			ROOT = {
				NAND = {
					is_overlord = yes
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
						#	ZOFE
						is_country_type = original_empire
						is_country_type = awakened_original_empire
					}
				}
			}
			NOR = {
				has_trait = leader_trait_fotd_scientist
				has_trait = leader_trait_fotd_commander
			}
		}
		AND = { #国防部 MOD
			OR = {
				NAND = { #领袖域 leader
					has_leader_flag = community_mod_rules_trigger
					AND = {
						has_leader_flag = community_can_trade_leader_true
						NOT = { has_leader_flag = community_can_trade_leader_false }
					}
				}
				NAND = { #所有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_leader_true
							NOT = { has_country_flag = community_can_trade_leader_false }
						}
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_leader_true
							NOT = { has_country_flag = community_can_trade_leader_false }
						}
					}
				}
			}
		}
	}
}

# This = fleet, fleet we'd like to trade
# Root = country, country that owns the fleet currently
# From = country, country that would receive the fleet
can_trade_fleet = { #可交易的舰队
	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #拥有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_fleet_true
							has_country_flag = community_can_trade_fleet_false
						}
					}
				}
				NAND = { #舰队域 fleet
					has_fleet_flag = community_mod_rules_trigger
					OR = {
						has_fleet_flag = community_can_trade_fleet_true
						has_fleet_flag = community_can_trade_fleet_false
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_fleet_true
							has_country_flag = community_can_trade_fleet_false
						}
					}
				}
			}		
			#	
			##	阿夸
			if = { limit = { has_global_flag = install_kuat_mod }	# 阿夸激活
				custom_tooltip = { fail_text = "cannot_sold_kuat_fleet"
					NOT = { any_owned_ship = { kuat_is_flagship_system_protection = yes } }
				}
			}
			##	|国家类型|	+ZOFE
			AND = {
				ROOT = {
					NAND = {
						is_overlord = yes
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
							#	ZOFE
							is_country_type = original_empire
							is_country_type = awakened_original_empire
						}
					}
				}
				NOT = { has_fleet_flag = dimensional_fleet }
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = { #舰队域 fleet
					has_fleet_flag = community_mod_rules_trigger
					AND = {
						has_fleet_flag = community_can_trade_fleet_true
						NOT = { has_fleet_flag = community_can_trade_fleet_false }
					}
				}
				AND = { #拥有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_fleet_true
							NOT = { has_country_flag = community_can_trade_fleet_false }
						}
					}
				}
				AND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_fleet_true
							NOT = { has_country_flag = community_can_trade_fleet_false }
						}
					}
				}
			}
		}
	}
}

# this = leader
# from = country scope
can_leader_be_ruler = { #领袖是否可成为统治者
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_be_ruler_true
					has_leader_flag = community_can_leader_be_ruler_false
				}
			}
			#
			NOT = { leader_class = envoy }
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_be_ruler_true
				NOT = { has_leader_flag = community_can_leader_be_ruler_false }
			}
		}
	}
}

# this = leader
# from = country scope
can_leader_be_councilor = { #领袖是否可担任议员
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_leader_be_councilor_true
					has_leader_flag = community_can_leader_be_councilor_false
				}
			}
			#
			is_exploring_astral_rift = no
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_leader_be_councilor_true
				NOT = { has_leader_flag = community_can_leader_be_councilor_false }
			}
		}
	}
}

# Determines if pre-ftl country is unaware of alien life
# this: pre-ftl country
are_pre_ftls_unaware = { #确定前FTL土著是否不知道外星生命
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_are_pre_ftls_unaware_true
					has_country_flag = community_are_pre_ftls_unaware_false
				}
			}		
			#	
			NOT = {
				current_awareness_level = full
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_are_pre_ftls_unaware_true
				NOT = { has_country_flag = community_are_pre_ftls_unaware_false }
			}
		}
	}
}

##TERRAFORMING CANDIDATES

# This = planet
# Checked if planet is a terraforming candidate
is_terraforming_candidate = { #可进行地貌改造-只控制图标显示
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_is_terraforming_candidate_true
					has_planet_flag = community_is_terraforming_candidate_false
				}
			}		
			#	
			OR = { 
				has_modifier = terraforming_candidate
				has_modifier = frozen_terraforming_candidate
				has_modifier = toxic_terraforming_candidate
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_is_terraforming_candidate_true
				NOT = { has_planet_flag = community_is_terraforming_candidate_false }
			}
		}
	}
}

# Root = country
# This = planet
# Checked if the planet is special terraforming candidate and the country has the required matching ascension perk to do it
has_ascension_for_terraforming_candidate = { #三种不同类型改造的飞升限制 怎么这东西还要靠ruler实现
	exists = root
	OR = {
		AND = {
			#No ascension perk required for terraforming_candidate modifier
			has_modifier = terraforming_candidate
		}
		AND = {
			root = {
				OR = {
					has_ascension_perk = ap_detox
					has_origin = origin_fallen_empire_hive
				}
			}
			has_modifier = toxic_terraforming_candidate
		}
		AND = {
			root = {
				OR = {
					has_ascension_perk = ap_hydrocentric
					has_origin = origin_fallen_empire_hive
				}
			}
			has_modifier = frozen_terraforming_candidate
		}
	}
}

# This = country that tries to rename
# Root = country owning the planet
# From = planet
# Checks if the planet (from) can be renamed by the country (this) that contains it in its borders, even if it has a different owner (Root)
# Renaming is never possible if the planet is not in your borders; and it is always possible if it is in your borders but the owner is yourself/no-one
# 是否可被重命名，即便不是行星所有者，要求行星在边界内
can_be_renamed_by = {
	OR = {
		AND	= { #香草 vanilla
			FROM = {
				NAND = { #排除条件 Exclusions
					has_planet_flag = community_mod_rules_trigger
					OR = {
						has_planet_flag = community_can_be_renamed_by_true
						has_planet_flag = community_can_be_renamed_by_false
					}
				}		
				#
				exists = owner
				owner = {
					is_same_species = root
				}
				has_planet_flag = haven_flag
			
			}
		}
		AND = { #国防部 MOD
			FROM = {
				has_planet_flag = community_mod_rules_trigger
				AND = {
					has_planet_flag = community_can_be_renamed_by_true
					NOT = { has_planet_flag = community_can_be_renamed_by_false }
				}
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_station_around = { #是否可建造轨道站
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_station_around_true
						has_country_flag = community_can_build_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_station_around_true
							has_planet_flag = community_can_build_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			always = yes
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_build_station_around_true
				NOT = { has_planet_flag = community_can_build_station_around_false }
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_mining_station_around = { #是否可建造采矿站
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_mining_station_around_true
						has_country_flag = community_can_build_mining_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_mining_station_around_true
							has_planet_flag = community_can_build_mining_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			always = yes
		}
		OR = {
			AND = { #国防部 MOD planet
				FROM = {
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_mining_station_around_true
						NOT = { has_planet_flag = community_can_build_mining_station_around_false }
					}
				}
			}
			AND = { #国防部 MOD country
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_build_mining_station_around_true
					NOT = { has_country_flag = community_can_build_mining_station_around_false }
				}
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_research_station_around = { #是否可建造研究站
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_research_station_around_true
						has_country_flag = community_can_build_research_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_research_station_around_true
							has_planet_flag = community_can_build_research_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			always = yes
		}
		OR = {
			AND = { #国防部 MOD planet
				FROM = {
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_research_station_around_true
						NOT = { has_planet_flag = community_can_build_research_station_around_false }
					}
				}
			}
			AND = { #国防部 MOD country
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_build_research_station_around_true
					NOT = { has_country_flag = community_can_build_research_station_around_false }
				}
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_military_station_around = { #是否可建造防御站
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_military_station_around_true
						has_country_flag = community_can_build_military_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_military_station_around_true
							has_planet_flag = community_can_build_military_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			always = yes
		}
		OR = {
			AND = { #国防部 MOD planet
				FROM = {
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_military_station_around_true
						NOT = { has_planet_flag = community_can_build_military_station_around_false }
					}
				}
			}
			AND = { #国防部 MOD country
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_build_military_station_around_true
					NOT = { has_country_flag = community_can_build_military_station_around_false }
				}
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
can_build_observation_station_around = { #是否可建造观测站
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_observation_station_around_true
						has_country_flag = community_can_build_observation_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_observation_station_around_true
							has_planet_flag = community_can_build_observation_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			FROM = {
				is_scope_type = planet
				NOR = {
					has_planet_flag = haven_flag #FotD
					has_planet_flag = no_observation #Solarpunk
				}
			}
		}
		OR = {
			AND = { #国防部 MOD planet
				FROM = {
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_observation_station_around_true
						NOT = { has_planet_flag = community_can_build_observation_station_around_false }
					}
				}
			}
			AND = { #国防部 MOD country
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_build_observation_station_around_true
					NOT = { has_country_flag = community_can_build_observation_station_around_false }
				}
			}
		}
	}
}

# Root/this = country
# From = planet OR astral_rift
# Checks if the country is allowed to build a starbase around this planet/star/astral_rift
can_build_starbase_around = { #是否可建造恒星基地
	OR = {
		AND	= { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #排除条件 Exclusions country
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_build_starbase_station_around_true
						has_country_flag = community_can_build_starbase_station_around_false
					}
				}
				FROM = { #排除条件 Exclusions planet
					NAND = { 
						has_planet_flag = community_mod_rules_trigger
						OR = {
							has_planet_flag = community_can_build_starbase_station_around_true
							has_planet_flag = community_can_build_starbase_station_around_false
						}
					}	
				}
			}
			#
			exists = root
			always = yes
		}
		OR = {
			AND = { #国防部 MOD planet
				FROM = {
					has_planet_flag = community_mod_rules_trigger
					AND = {
						has_planet_flag = community_can_build_starbase_station_around_true
						NOT = { has_planet_flag = community_can_build_starbase_station_around_false }
					}
				}
			}
			AND = { #国防部 MOD country
				has_country_flag = community_mod_rules_trigger
				AND = {
					has_country_flag = community_can_build_starbase_station_around_true
					NOT = { has_country_flag = community_can_build_starbase_station_around_false }
				}
			}
		}
	}
}

# Root/this = country
# Checks if the country's capital has any kind of relevancy (aka is the capital in the galaxy really theirs)
has_inworld_capital = { #是否真的拥有首都？ （根据注释，是说检查银河系中的首都是否真的是归属这个域的country）
	NOT = { is_country_type = mirrored_country }
}

# Root/this = trading country
# From = country traded with
# Checks if target country has economy power relative to begin with
has_relative_economy_power = { #拥有相对经济实力
	exists = this
	exists = from

	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #拥有者域 owner
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_has_relative_economy_power_true
						has_country_flag = community_has_relative_economy_power_false
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_has_relative_economy_power_true
							has_country_flag = community_has_relative_economy_power_false
						}
					}
				}
			}		
			#	
			exists = this
			exists = from
			NOR = {
				is_country_type = mirrored_country
				from = { is_country_type = mirrored_country }
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = { #拥有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_has_relative_economy_power_true
							NOT = { has_country_flag = community_has_relative_economy_power_false }
						}
					}
				}
				AND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_has_relative_economy_power_true
							NOT = { has_country_flag = community_has_relative_economy_power_false }
						}
					}
				}
			}
		}
	}
}

# Root/this = trading country
# From = country traded with
# Checks if the country can trade sensor
can_trade_sensor = { #可交易传感器
	exists = this
	exists = from

	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #拥有者域 owner
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_trade_sensor_true
						has_country_flag = community_can_trade_sensor_false
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_sensor_true
							has_country_flag = community_can_trade_sensor_false
						}
					}
				}
			}		
			#	
			NOR = {
				is_country_type = mirrored_country
				from = { is_country_type = mirrored_country }
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = { #拥有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_sensor_true
							NOT = { has_country_flag = community_can_trade_sensor_false }
						}
					}
				}
				AND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_sensor_true
							NOT = { has_country_flag = community_can_trade_sensor_false }
						}
					}
				}
			}
		}
	}
}

# Root/this = trading country
# From = country traded with
# Checks if the country can trade favor
can_trade_favor = { #可交易好感
	exists = this
	exists = from

	OR = {
		AND = { #香草 vanilla
			OR = { #排除条件 Exclusions
				NAND = { #拥有者域 owner
					has_country_flag = community_mod_rules_trigger
					OR = {
						has_country_flag = community_can_trade_favor_true
						has_country_flag = community_can_trade_favor_false
					}
				}
				NAND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						OR = {
							has_country_flag = community_can_trade_favor_true
							has_country_flag = community_can_trade_favor_false
						}
					}
				}
			}		
			#	
			NOR = {
				OR = {
					is_country_type = mirrored_country
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				from = {
					OR = {
						is_country_type = mirrored_country
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
		}
		AND = { #国防部 MOD
			OR = {
				AND = { #拥有者域 owner
					ROOT = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_favor_true
							NOT = { has_country_flag = community_can_trade_favor_false }
						}
					}
				}
				AND = { #接收者域 receive
					FROM = {
						has_country_flag = community_mod_rules_trigger
						AND = {
							has_country_flag = community_can_trade_favor_true
							NOT = { has_country_flag = community_can_trade_favor_false }
						}
					}
				}
			}
		}
	}
}

# THIS = country
# FROM = Astral Rift checked
can_interact_with_astral_rift = { #可与星界裂缝互动
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_interact_with_astral_rift_true
					has_country_flag = community_can_interact_with_astral_rift_false
				}
			}
			#
			OR = {
				from = {
					is_surveyed = { who = prev status = yes }
				}
				intel_level = {
					level >= low
					system = from.solar_system
				}
				from = {
					exists = explorer
					explorer = {
						is_same_value = prevprev
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_interact_with_astral_rift_true
				NOT = { has_country_flag = community_can_interact_with_astral_rift_false }
			}
		}
	}
}

# THIS = country
# FROM = Astral Rift checked
can_explore_astral_rift = { #可探索星界裂缝
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_explore_astral_rift_true
					has_country_flag = community_can_explore_astral_rift_false
				}
			}
			#
			has_technology = tech_rift_sphere
			hidden_trigger = {
				OR = {
					is_astral_rift_pool_empty = no
					AND = {
						exists = from.explorer
						from.explorer = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_explore_astral_rift_true
				NOT = { has_country_flag = community_can_explore_astral_rift_false }
			}
		}
	}
}

# THIS = leader
# FROM = Astral Rift checked
# Checks if the selected leader can explore the rift
can_leader_explore_astral_rift = { #领袖可探索星界裂缝
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_leader_flag = community_mod_rules_trigger
				OR = {
					has_leader_flag = community_can_explore_astral_rift_true
					has_leader_flag = community_can_explore_astral_rift_false
				}
			}
			#
			OR = {
				AND = { #香草 vanilla
					NAND = { #排除条件 Exclusions
						has_leader_flag = community_mod_rules_trigger
						OR = {
							has_leader_flag = community_can_leader_explore_astral_rift_true
							has_leader_flag = community_can_leader_explore_astral_rift_false
						}
					}
					#
					custom_tooltip = {
						fail_text = "CANNOT_EXPLORE_WITH_COUNCIL_LEADER"
						is_councilor = no
					}
					custom_tooltip = {
						fail_text = "CANNOT_EXPLORE_WITH_HEIR_LEADER"
						is_heir = no
					}
				}
				AND = { #国防部 MOD
					has_leader_flag = community_mod_rules_trigger
					AND = {
						has_leader_flag = community_can_leader_explore_astral_rift_true
						NOT = { has_leader_flag = community_can_leader_explore_astral_rift_false }
					}
				}
			}
		}
		AND = { #国防部 MOD
			has_leader_flag = community_mod_rules_trigger
			AND = {
				has_leader_flag = community_can_explore_astral_rift_true
				NOT = { has_leader_flag = community_can_explore_astral_rift_false }
			}
		}
	}
}

# FROM = country of the ai (in case it's relevant)
# THIS = planet
# this determines if the planet is allowed to receive a governor at all, and isn't called for a specific candidate
can_ai_assign_governor = { #控制AI是否可分配星球总督
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_planet_flag = community_mod_rules_trigger
				OR = {
					has_planet_flag = community_can_ai_assign_governor_true
					has_planet_flag = community_can_ai_assign_governor_false
				}
			}
			#
			OR = {
				is_sector_capital = yes
				is_capital = yes
			}
			pop_amount >= 100	# replaces the MINIMUM_POPS_TO_CONSIDER_GOVERNOR define
			NOT = {
				exists = leader
			}
		}
		AND = { #国防部 MOD
			has_planet_flag = community_mod_rules_trigger
			AND = {
				has_planet_flag = community_can_ai_assign_governor_true
				NOT = { has_planet_flag = community_can_ai_assign_governor_false }
			}
		}
	}
}

# if the galactic community exists, is a galactic empire, and the country is part of it
# the ai will call this to see if it should set its delegate to strengthn it
# It is guaranteed that the galactic community exists, is an empire, and the country is part of it
# when this rule is called
# THIS = Country
# FROM = Galactic Emperor (Country)
should_ai_support_galactic_empire = { #控制AI是否支持银河帝国
	OR = {
		is_galactic_emperor = yes
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			imperial_authority <= 0.75
			is_part_of_galactic_council = yes
			opinion = {
				who = FROM
				value >= 300	# value defined as "GOOD" in for opinion 00_defines.txt
			}
		}
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			imperial_authority <= 0.75
			opinion = {
				who = FROM
				value >= 750	# value define as "EXCELLENT" for opinion in 00_defines.txt
			}
		}
		AND = {
			# Subjects of the Galactic Emperor that are loyal or cannot vote
			# should support the Imperium
			FROM = {
				is_overlord_to = prev
			}
			OR = {
				has_loyalty >= 0
				NOT = {
					any_agreement = {
						has_term_value = {
							term = subject_diplomacy
							value = subject_can_do_diplomacy
						}
					}
				}
			}
		}
	}
}

# if the galactic community exists, is a galactic empire, and the country is part of it
# and if it didn't decided to strengthen the empire,
# the ai will call this to see if it should set its delegate to undermine it
# if the ai neither wants to support nor undermine the galactic empire, it will just keep
# its emissary as a standard delegate
# It is guaranteed that the galactic community exists, is an empire, and the country is part of it
# when this rule is called
# THIS = Country
# FROM = Galactic Emperor (Country)
should_ai_undermine_galactic_empire = {
	is_galactic_emperor = no
	imperial_authority >= 0.25
	OR = {
		AND = {
			NOT = {
				FROM = {
					is_overlord_to = prev
				}
			}
			opinion = {
				who = FROM
				value <= -300	# value defined as "POOR" for opinion in 00_defines.txt
			}
		}
		AND = {
			FROM = {
				is_overlord_to = prev
			}
			has_loyalty < 0
			any_agreement = {
				has_term_value = {
					term = subject_diplomacy
					value = subject_can_do_diplomacy
				}
			}
		}
	}
}

# root/this = country
can_country_initiate_storm = { #可以引发风暴的国家
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_country_initiate_storm_true
					has_country_flag = community_can_country_initiate_storm_false
				}
			}
			#
			has_ascension_perk = ap_weather_control
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_country_initiate_storm_true
				NOT = { has_country_flag = community_can_country_initiate_storm_false }
			}
		}
	}
}

# root/this = star
can_initiate_storm_on_planet = { #可以引发风暴的行星？
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_IS_NOT_STAR"
		is_star = yes
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_ALREADY_INITIATED"
		NOT = {
			any_fleet_in_orbit = {
				has_fleet_flag = is_initiating_storm_at@root
			}
		}
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_INITIATE_COSMIC_STORM_OCCUPIED"
		solar_system = {
			NOT = { has_star_flag = storm_system }
		}
	}
}

# root/this = system
can_force_see_fleets_in_system = { #可以强制在星系内看到舰队
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_star_flag = community_mod_rules_trigger
				OR = {
					has_star_flag = community_can_force_see_fleets_in_system_true
					has_star_flag = community_can_force_see_fleets_in_system_false
				}
			}
			#
			is_inside_storm = solar_storm
		}
		AND = { #国防部 MOD
			has_star_flag = community_mod_rules_trigger
			AND = {
				has_star_flag = community_can_force_see_fleets_in_system_true
				NOT = { has_star_flag = community_can_force_see_fleets_in_system_false }
			}
		}
	}
}

# root/this = country
# from = cosmic storm
has_breached_shroud_storm = { #已突破虚境风暴
	exists = this
	exists = from
	has_country_flag = breached_shroud
	from = { is_storm_type = shroud_storm }
}


# THIS = Fleet
is_science_fleet_gravity_snare_on_cooldown = { #是重力捕获网冷却
	custom_tooltip = {
		success_text = FLEETORDER_SEND_SNARE_ON_COOLDOWN
		OR = {
			has_fleet_flag = gravity_snare_is_in_cooldown
			controller = {
				has_country_flag = gravity_snare_is_in_cooldown_ai
			}
		}
	}
}

# THIS = Fleet
# FROM = Country / Snare sender
can_fleet_be_captured_by_snares = { #舰队可以被捕获网捕获
	custom_tooltip = {
		fail_text = "FLEETORDER_GRAVITY_SNARE_NO_COMMUNICATIONS"
		exists = from
		exists = owner
		from = {
			has_communications = root.owner
		}
	}
	custom_tooltip = {
		fail_text = "FLEETORDER_MUST_BE_SPACE_CRITTER"
		exists = owner
		owner = {
			OR = {
				is_capturable_space_critter_country_type = yes
				is_country_type = grave_guardian
				is_country_type = lured_fauna_faction
			}
			is_guardian_country = no
		}
		any_owned_ship = {
			is_space_fauna = yes
		}
	}
}

# THIS = country
can_fauna_grow = { #可以生长生物舰队
	NOT = { has_policy_flag = nutrient_rationing }
}

# THIS = country
can_use_exhibits = { #可以使用展览馆
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_use_exhibits_true
					has_country_flag = community_can_use_exhibits_false
				}
			}
			#
			hidden_trigger = { exists = this }
			custom_tooltip = {
				fail_text = "GALACTIC_ARCHIVISM_NOT_RESEARCHED"
				has_technology = tech_galactic_archivism
			}
			custom_tooltip = {
				fail_text = "GRAND_ARCHIVE_NOT_BUILT"
				any_owned_megastructure = {
					is_megastructure_type = grand_archive_0
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_use_exhibits_true
				NOT = { has_country_flag = community_can_use_exhibits_false }
			}
		}
	}
}

# THIS = country
can_access_vivarium = { #可以访问生物园
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_access_vivarium_true
					has_country_flag = community_can_access_vivarium_false
				}
			}
			#
			custom_tooltip = {
				fail_text = "GRAVITY_WELLS_NOT_RESEARCHED"
				has_technology = tech_gravity_wells
			}
			custom_tooltip = {
				fail_text = "VIVARIUM_NO_ROOM"
				check_variable_arithmetic = {
					which = value:get_vivarium_capacity
					value > 0
				}
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_access_vivarium_true
				NOT = { has_country_flag = community_can_access_vivarium_false }
			}
		}
	}
}

# this = debris
# root = country who can explore debris
can_scavenge_and_research_debris = { #可以同时研究和回收残骸
	OR = {
		AND = {
			exists = root
			root = {
				has_policy_flag = scavenge_and_research_debris
			}
		}
		AND = {
			must_scavenge = yes
			must_research = yes
		}
	}
}

# this = debris
# root = country who can explore debris
can_scavenge_debris = { #可以回收残骸
	OR = {
		AND = {
			exists = root
			root = {
				has_policy_flag = scavenge_debris
			}
		}
		AND = {
			must_scavenge = yes
			must_research = no
		}
	}
}

# this = country
# from = location (galactic_object)
can_excavate_outside_borders = { #可以境外挖坟
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_excavate_outside_borders_true
					has_country_flag = community_can_excavate_outside_borders_false
				}
			}
			#
			exists = this
			exists = from
			has_tradition = tr_archivism_frontier_archaeology
			from = {
				solar_system = { NOT = { exists = owner } }
			}
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_excavate_outside_borders_true
				NOT = { has_country_flag = community_can_excavate_outside_borders_false }
			}
		}
	}
}

# this = country
can_voidworms_bombard_country = { #虚空虫可以轰炸的国家
	hidden_trigger = {
		exists = event_target:voidworms_country
		exists = this
	}
	OR = {
		is_country_type = default
		is_country_type = primitive
	}
	# During crisis, they should bombard no matter what, otherwise check tech and max voidworms
	if = {
		limit = {
			event_target:voidworms_country = {
				is_country_type = voidworms_crisis
			}
		}
		always = yes
	}
	else = {
		NOT = { has_technology = tech_voidworm_immunity }
		event_target:voidworms_country = {
			check_variable_arithmetic = {
				which = value:voidworm_ships_owned
				value < value:voidworm_maximum_population
			}
		}
	}
}

# this = country
can_use_mutations = { #可以使用突变
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_use_mutations_true
					has_country_flag = community_can_use_mutations_false
				}
			}
			#
			hidden_trigger = { exists = this }
			has_technology = tech_controlled_mutations
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_use_mutations_true
				NOT = { has_country_flag = community_can_use_mutations_false }
			}
		}
	}
}

can_use_artificial_breeding = { #可以人工养殖
	OR = {
		AND = { #香草 vanilla
			NAND = { #排除条件 Exclusions
				has_country_flag = community_mod_rules_trigger
				OR = {
					has_country_flag = community_can_use_artificial_breeding_true
					has_country_flag = community_can_use_artificial_breeding_false
				}
			}
			#
			hidden_trigger = { exists = this }
			has_technology = tech_alien_cloning
		}
		AND = { #国防部 MOD
			has_country_flag = community_mod_rules_trigger
			AND = {
				has_country_flag = community_can_use_artificial_breeding_true
				NOT = { has_country_flag = community_can_use_artificial_breeding_false }
			}
		}
	}
}

# this = actor (country)
# from = recipient (country)
can_trade_specimens = { #可以交易藏品
	exists = this
	exists = from
	count_exhibit = {
		limit = { contains_specimen = yes }
		count > 0
	}
	NOT = { has_country_flag = has_already_traded_specimens }
	from = {
		count_exhibit = {
			limit = { contains_specimen = yes }
			count < @archive_max_exhibit_count
		}
	}
}

# this = ship design
# from = owner (country)
force_create_default_ship_design = { #强制生成默认设计
	exists = this
	exists = from
	is_designable = yes
	OR = {
		AND = {
			is_space_fauna = yes
			from = {
				uses_fauna_ship_sizes = yes
			}
		}
		# Add other cases here if any
	}
}

#this = leader
is_organic_leader = { #是有机领袖
	exists = this
	is_organic_species = yes
}

# from = owner (country)
#This = fleet
is_seeded = { #是苗床（？）
	has_fleet_flag = fruitful_seeded_critter
}


#this = popgroup
is_organic_pop_group = { #是有机人口组
	exists = this
	is_organic_species = yes
}

# this = destroyed ship
# from = attacker (ship)
can_capture_ship = {
	exists = this
	exists = from
	exists = controller
	controller = {
		is_country_type = default
	}
	OR = {
		# Civilian Ships
		is_ship_size = constructor
		is_ship_size = science
		# Regular Ships
		is_ship_size = corvette
		is_ship_size = frigate
		is_ship_size = destroyer
		is_ship_size = cruiser
		is_ship_size = battleship
		# Biological Ships
		is_ship_size = mauler_stage_1
		is_ship_size = mauler_stage_2
		is_ship_size = mauler_stage_3
		is_ship_size = weaver_stage_1
		is_ship_size = weaver_stage_2
		is_ship_size = weaver_stage_3
		is_ship_size = harbinger_stage_1
		is_ship_size = harbinger_stage_2
		is_ship_size = harbinger_stage_3
		is_ship_size = stinger_stage_1
		is_ship_size = stinger_stage_2
		is_ship_size = stinger_stage_3
		# Galactic Nemesis Ships
		is_ship_size = crisis_corvette
		is_ship_size = crisis_destroyer
		is_ship_size = crisis_cruiser
		# Offspring Ships
		AND = {
			controller = {
				has_origin = origin_progenitor_hive
			}
			OR = {
				is_ship_size = offspring_corvette
				is_ship_size = offspring_destroyer
				is_ship_size = offspring_cruiser
				is_ship_size = offspring_battleship
				is_ship_size = offspring_mauler_stage_1
				is_ship_size = offspring_mauler_stage_2
				is_ship_size = offspring_mauler_stage_3
				is_ship_size = offspring_weaver_stage_1
				is_ship_size = offspring_weaver_stage_2
				is_ship_size = offspring_weaver_stage_3
				is_ship_size = offspring_harbinger_stage_1
				is_ship_size = offspring_harbinger_stage_2
				is_ship_size = offspring_harbinger_stage_3
				is_ship_size = offspring_stinger_stage_1
				is_ship_size = offspring_stinger_stage_2
				is_ship_size = offspring_stinger_stage_3
			}
		}
		# Cosmogenesis Ships
		is_ship_size = cosmo_crisis_destroyer
		is_ship_size = cosmo_crisis_battlecruiser
		# Nanotech Ships
		AND = {
			controller = {
				has_tradition = tr_nanotech_finish
			}
			OR = {
				is_ship_size = nanite_swarmer
				is_ship_size = nanite_interdictor
			}
		}
		# Fallen Empire Ships
		is_ship_size = large_ship_fallen_empire
		is_ship_size = small_ship_fallen_empire
		# Marauder Ships
		is_ship_size = marauder_corvette
		is_ship_size = marauder_destroyer
		is_ship_size = marauder_cruiser
		is_ship_size = marauder_galleon
	}
}

# this = country
# all countries which pass this rule only add 1 to num_fallen_empires
count_as_split_fallen_empire = { #被视作同一个堕落
	OR = {
		has_country_flag = fallen_empire_hive_war
		has_country_flag = fallen_empire_hive_growth
		has_country_flag = fallen_empire_hive_control
	}
}

# this = country
# from = planet
# When "colonize" is clicked, open the terraform menu instead
#
# This also means the ai_colonize_plans will only contain planets the AI can colonize via colony ships.
# The rest will be stored as ai_terraform_plans instead.
# See energy_expenditure_terraforming_to_colonize in common/ai_budget/00_energy_budget.txt for the AI budget implementation.
#
should_colonize_use_terraform = { #使用环境改造进行殖民
	exists = this
	is_wilderness_empire = yes
	# in case this is true for empires that can build Ring Worlds/Habitats, this should be false for these specific planet classes
}

# this = pop_group
# from = country
should_hide_pop_group_size = { #应该隐藏人口组大小
	exists = this
	exists = from
	species = {
		has_trait = trait_wilderness
	}
	from = {
		is_wilderness_empire = yes
	}
}

# this = country
should_hide_planet_sector_pop_amount = { #应该隐藏行星人口总数
	exists = this
	is_wilderness_empire = yes
}

# this = leader
should_leader_gain_trait_every_level = { #领袖应该每一级都获得特质
	has_trait = "leader_trait_legendary_leader"
}