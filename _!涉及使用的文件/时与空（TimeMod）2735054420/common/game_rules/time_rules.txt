#Root = planet
#This = species
species_can_live_on_planet = {
	hidden_trigger = {
		exists = root #somehow this appeared in the error log. No idea how!
	}
	custom_tooltip = {
		fail_text = "can_not_live_on_pc_machine"
		if = {
			limit = {
				root = { is_planet_class = pc_machine }
			}
			OR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
				AND = {
					has_trait = trait_cybernetic
					exists = root.owner
					root.owner = {
						has_authority = auth_machine_intelligence
						OR = {
							has_civic = civic_machine_assimilator # Assimilator empire
							has_ascension_perk = ap_mechromancy
						}
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = "can_not_live_on_pc_hive"
		if = {
			limit = {
				root = { is_planet_class = pc_hive }
			}
			OR = {
				has_trait = trait_hive_mind
				AND = { #Necrophage Hive Mind can have Necrophytes
					exists = root.owner
					root.owner = {
						is_hive_empire = yes
						has_origin = origin_necrophage
						prev = { species_can_be_necrophaged = yes }
					}
				}
			}
		}
	}
	
	if = {
		limit = {
			exists = root.owner
			root.owner = {
				has_origin = origin_clone_army
			}
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
		}
		custom_tooltip = {
			fail_text = CLONE_ARMY_FORCE_DECLINE
			root = {
				check_variable = { which = clone_pops_missing value >= 0 }
			}
		}
	}
	TIME_RULE_trgr_spcs_CAN_live_on_planet = yes
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = {
		has_trait = trait_exd
	}
	NOT = {
		AND = {
			has_trait = trait_mechanical
			root.owner = { is_individual_machine = yes }
		}
	}
	NOT = {
		AND = {
			has_virtual_species_trait = yes
			root.owner = {
				is_fallen_empire = no
				has_active_tradition = tr_virtuality_finish
			}
		}
	}
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				owner = {
					NOT = { has_country_flag = synth_assembly_stopped }
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
	TIME_RULE_trgr_CAN_spcs_be_assembled = yes
}

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	NOT = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		FROM = { is_planet_class = pc_infested }
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		ROOT.CONTROLLER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = debt_collectors
				is_country_type = gray_goo
				is_country_type = vol
				AND = {
					OR = {
						is_country_type = awakened_marauders
						is_country_type = formless
					}
					FROM.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = ROOT.CONTROLLER }
			}
			from.owner = {
				is_same_value = ROOT.CONTROLLER
			}
		}
	}
	TIME_RULE_trgr_CAN_orbital_bombard = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		is_enslaved = no
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
	}
	TIME_RULE_trgr_CAN_fill_drone_job = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			# Rule out Traits for servitude & lack of free will
			NOR = {
				has_trait = trait_syncretic_proles
				has_trait = trait_zombie
				has_trait = trait_nerve_stapled
			}
			# Rule out Machine Pops, unless they're rendered sapient
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					owner = { has_technology = tech_synthetic_workers }
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			# Rule out Organic Trophies
			NOT = {
				has_citizenship_type = {
					type = citizenship_organic_trophy
					country = owner
				}
			}
			# Rule out violations of the 'Right to Work' Resolution (prioritises organic workers)
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
	TIME_RULE_trgr_CAN_fill_ruler_job = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_specialist_job
can_fill_specialist_job = {
	can_fill_specialist_job_trigger = yes # Defined in 01_scripted_triggers_jobs.txt
	TIME_RULE_trgr_CAN_fill_specialist_job = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	custom_tooltip = WORKER_JOB_TRIGGER
	hidden_trigger = {
		if = {
			limit = {
				planet = {
					is_planet_class = pc_cosmogenesis_world #Everyone can become a chip slave
				}
			}
			always = yes
		}
		else = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			NAND = {
				has_citizenship_type = { type = citizenship_slavery }
				OR = {
					has_slavery_type = { type = slavery_livestock }
					has_slavery_type = { type = slavery_matrix }
				}
			}
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_worker = yes
			}
		}
	}
	TIME_RULE_trgr_CAN_fill_worker_job = yes
}

# this = leader
can_leader_get_destiny_trait = {
	NAND = {
		exists = owner
		owner = { is_gestalt = yes }
	}
	if = {
		limit = {
			exists = owner
		}
		owner = { is_crisis_faction = no }
	}
}