# 这些建筑极为重要，绝不能被覆盖
# extremly important buildings, mustn't be overwritten

# sanctuaries
building_organic_sanctuary = {
	base_buildtime = @b2_time

	category = unity

	potential = {
		NOT = { is_planet_class = pc_machine }
		exists = owner
		owner = { has_valid_civic = civic_machine_servitor }
		
	}
	allow = {
		custom_tooltip = { #ai不要造太多这个
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_servitor
						is_ai = yes
					}
				}
				OR = {
					check_variable_arithmetic = { which = value:available_bio_trophy_jobs value < 5 }
					free_amenities < 5
				}
			}
		}
	}
	destroy_trigger = {
		exists = owner
		OR = {
			is_planet_class = pc_machine
			owner = { NOT = { has_valid_civic = civic_machine_servitor } }
		}
	}
	convert_to = {
		building_luxury_residence
		building_communal_housing
	}
	upgrades = {
		"building_organic_paradise"
	}
	on_built = { # maid AI advance
		if = { #虚拟飞升
			limit = { has_active_building = building_virtual_immersion_center }
			remove_building = building_organic_sanctuary
			change_variable = {
				which = building_virtual_immersion_center_level
				value = 1
			}
		}
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
					is_ai = yes
				}
			}
			if = {
				limit = { is_planet_class = pc_ringworld_habitable }
				if = {
					limit = { check_variable_arithmetic = { which = value:count_sanctuaries value > 6 } }
					remove_building = building_organic_sanctuary
					add_building = building_research_lab_1
				}
			}
			else = {
				if = {
					limit = {
						check_variable_arithmetic = { which = value:available_bio_trophy_jobs value > 14 }
						free_building_slots = 0
						free_amenities > 5
					}
					remove_building = building_organic_sanctuary
					if = {
						limit = { has_research_designation = yes }
						add_building = building_research_lab_1
					}
					else_if = {
						limit = {
							owner = { has_technology = tech_exotic_gases }
							OR = {
								has_building = building_refinery
								has_building = building_chemical_plant
								has_building = building_crystal_plant
								has_refinery_designation = yes
								owner = {
									resource_income_compare = {
										resource = exotic_gases
										value < 3
									}
								}
							}
							NOR = {
								uses_district_set = city_world
								uses_district_set = ring_world
							}
						}
						add_building = building_refinery
					}
					else = {
						add_building = building_research_lab_1
					}
				}
			}
		}
	}
	ai_resource_production = { # We need to cheat here and tell AI that this will probably give some complex output since AI can not evaluate what this building does without the pops which it cant get without the building - chicken and egg
		unity = 20
		physics_research = 5
		consumer_goods = 10
		alloys = 5
		trigger = {
			NOT = { has_building = building_organic_sanctuary }
		}
	} # Here we try to adress the second issue that the AI cant evaluate the pop job output of the bio trophy given the happiness trigger that was put inplace to guard against players exploiting bio trophies

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
		}
		upkeep = {
			energy = @b2_upkeep
		}
	}

	triggered_planet_modifier = {
		potential = { NOT = { has_modifier = resort_colony } }
		planet_carry_cap_add = 10
		job_bio_trophy_add = 10
		job_healthcaring_drone_add = 1
	}
	triggered_planet_modifier = {
		potential = {
			NOT = { has_modifier = resort_colony }
			exists = owner
			owner = { has_modifier = country_modifier_maid_law_XO_4 }
		}
		planet_carry_cap_add = 2.5
	}
	triggered_planet_modifier = {
		potential = { has_modifier = resort_colony }
		planet_carry_cap_add = 5
		job_vacation_bio_trophy_add = 5
		job_healthcaring_drone_add = 1
	}
	triggered_planet_modifier = {
		potential = {
			has_modifier = resort_colony
			exists = owner
			owner = { has_modifier = country_modifier_maid_law_XO_4 }
		}
		planet_carry_cap_add = 1.25
	}
	triggered_planet_modifier = {
		potential = {
			OR = {
				owner = { NOT = { has_civic = civic_machine_crafters } }
				is_ECI_activated = yes
			}
		}
		job_artisan_drone_add = 1
	}
	triggered_planet_modifier = {
		potential = {
			is_ECI_activated = no
			owner = { has_civic = civic_machine_crafters }
		}
		job_artificer_drone_add = 1
	}

	triggered_desc = {
		trigger = { NOT = { has_modifier = resort_colony } }
		text = job_bio_trophy_effect_desc
	}
	triggered_desc = {
		trigger = { has_modifier = resort_colony }
		text = job_vacation_bio_trophy_effect_desc
	}
	triggered_desc = {
		text = job_healthcaring_drone_effect_desc
	}
	triggered_desc = {
		trigger = {
			OR = {
				owner = { NOT = { has_civic = civic_machine_crafters } }
				is_ECI_activated = yes
			}
		}
		text = job_artisan_drone_effect_desc
	}
	triggered_desc = {
		trigger = {
			is_ECI_activated = no
			owner = { has_civic = civic_machine_crafters }
		}
		text = job_artificer_drone_effect_desc
	}
}
building_organic_paradise = {
	base_buildtime = @b3_time
	can_build = no
	icon = building_paradise_dome

	category = unity

	potential = {
		exists = owner
		owner = { has_valid_civic = civic_machine_servitor }
	}
	destroy_trigger = {
		exists = owner
		OR = {
			is_planet_class = pc_machine
			owner = { NOT = { has_valid_civic = civic_machine_servitor } }
		}
	}
	convert_to = {
		building_paradise_dome
		building_communal_housing_large
	}
	prerequisites = { "tech_paradise_dome" }
	show_tech_unlock_if = {
		owner = { has_valid_civic = civic_machine_servitor }
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b3_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = @b3_upkeep
			exotic_gases = @b2_rare_upkeep
		}
	}
	
	triggered_planet_modifier = {
		potential = { NOT = { has_modifier = resort_colony } }
		planet_carry_cap_add = 20
		job_bio_trophy_add = 20
		job_healthcaring_drone_add = 2
	}
	triggered_planet_modifier = {
		potential = {
			NOT = { has_modifier = resort_colony }
			exists = owner
			owner = { has_modifier = country_modifier_maid_law_XO_4 }
		}
		planet_carry_cap_add = 5
	}
	triggered_planet_modifier = {
		potential = { has_modifier = resort_colony }
		planet_carry_cap_add = 10
		job_vacation_bio_trophy_add = 10
		job_healthcaring_drone_add = 2
	}
	triggered_planet_modifier = {
		potential = {
			has_modifier = resort_colony
			exists = owner
			owner = { has_modifier = country_modifier_maid_law_XO_4 }
		}
		planet_carry_cap_add = 2.5
	}
	triggered_planet_modifier = {
		potential = {
			OR = {
				owner = { NOT = { has_civic = civic_machine_crafters } }
				is_ECI_activated = yes
			}
		}
		job_artisan_drone_add = 2
	}
	triggered_planet_modifier = {
		potential = {
			is_ECI_activated = no
			owner = { has_civic = civic_machine_crafters }
		}
		job_artificer_drone_add = 2
	}

	triggered_desc = {
		trigger = { NOT = { has_modifier = resort_colony } }
		text = job_bio_trophy_effect_desc
	}
	triggered_desc = {
		trigger = { has_modifier = resort_colony }
		text = job_vacation_bio_trophy_effect_desc
	}
	triggered_desc = {
		text = job_healthcaring_drone_effect_desc
	}
	triggered_desc = {
		trigger = {
			OR = {
				owner = { NOT = { has_civic = civic_machine_crafters } }
				is_ECI_activated = yes
			}
		}
		text = job_artisan_drone_effect_desc
	}
	triggered_desc = {
		trigger = {
			is_ECI_activated = no
			owner = { has_civic = civic_machine_crafters }
		}
		text = job_artificer_drone_effect_desc
	}
}

building_fe_sky_dome = {
	base_buildtime = @b2_time
	can_build = yes
	can_demolish = yes

	category = amenity

	potential = {
		exists = owner
		owner = {
			OR = {
				is_fallen_empire = yes
				has_technology = tech_fe_dome_1
				has_country_flag = skydome_can_build
			}
		}
		NOT = {
			has_modifier = slave_colony
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = ancrel.10004.failtext
			owner = {
				OR = {
					check_variable = { which = skydome_build_count value >= 1 }
					is_fallen_empire = yes
					has_technology = tech_fe_dome_1
				}
			}
		}
	}
	destroy_trigger = {
		always = no
	}
	on_queued = {
		owner = {
			subtract_variable = { which = skydome_build_count value = 1 }
		}
	}
	on_unqueued = {
		owner = {
			change_variable = { which = skydome_build_count value = 1 }
		}
	}
	upgrades = {
		building_fe_dome
	}
	show_in_tech = tech_fe_dome_1

	resources = {
		category = planet_buildings
		cost = {
			alloys = @b2_minerals
		}
		upkeep = {
			alloys = @b1_alloy_upkeep
			energy = 10
		}
	}

	planet_modifier = {
		planet_housing_add = 20
		planet_amenities_add = 20
	}
	triggered_planet_modifier = { #
		potential = {
			owner = { is_servitor_empire = yes }
			NOT = { has_modifier = resort_colony }
		}
		planet_housing_add = -20
		job_bio_trophy_add = 30
		planet_carry_cap_add = 30
	}
	triggered_planet_modifier = { #
		potential = {
			owner = { is_servitor_empire = yes }
			has_modifier = resort_colony
		}
		planet_housing_add = -20
		job_vacation_bio_trophy_add = 15
		planet_carry_cap_add = 15
	}

	triggered_desc = {
		trigger = {
			owner = { is_servitor_empire = yes }
			NOT = { has_modifier = resort_colony }
		}
		text = job_bio_trophy_effect_desc
	}
	triggered_desc = {
		trigger = {
			owner = { is_servitor_empire = yes }
			has_modifier = resort_colony
		}
		text = job_vacation_bio_trophy_effect_desc
	}
}
building_fe_dome = {
	base_buildtime = @b2_time
	can_build = no

	category = amenity

	potential = {
		exists = owner
		owner = {
			OR = {
				is_fallen_empire = yes
				has_technology = tech_fe_dome_2
				has_country_flag = skydome_can_build
			}
		}
		NOT = {
			has_modifier = slave_colony
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = ancrel.10004.failtext
			exists = owner
			owner = {
				OR = {
					check_variable = { which = skydome_upgrade_count value >= 1 }
					is_fallen_empire = yes
					has_technology = tech_fe_dome_2
				}
			}
		}
	}
	destroy_trigger = {
		always = no
	}
	on_queued = {
		owner = {
			subtract_variable = { which = skydome_upgrade_count value = 1 }
		}
	}
	on_unqueued = {
		owner = {
			change_variable = { which = skydome_upgrade_count value = 1 }
		}
	}
	show_in_tech = tech_fe_dome_2

	resources = {
		category = planet_buildings
		cost = {
			alloys = @b2_minerals
		}
		upkeep = {
			alloys = @b1_alloy_upkeep
			energy = 10
		}
	}

	planet_modifier = {
		planet_housing_add = 50
		planet_amenities_add = 50
		planet_pops_upkeep_mult = -0.05
	}
	triggered_planet_modifier = { #
		potential = {
			owner = { is_servitor_empire = yes }
			NOT = { has_modifier = resort_colony }
		}
		planet_housing_add = -50
		job_bio_trophy_add = 50
		planet_carry_cap_add = 50
	}
	triggered_planet_modifier = { #
		potential = {
			owner = { is_servitor_empire = yes }
			has_modifier = resort_colony
		}
		planet_housing_add = -50
		job_vacation_bio_trophy_add = 25
		planet_carry_cap_add = 25
	}

	triggered_desc = {
		trigger = {
			owner = { is_servitor_empire = yes }
			NOT = { has_modifier = resort_colony }
		}
		text = job_bio_trophy_effect_desc
	}
	triggered_desc = {
		trigger = {
			owner = { is_servitor_empire = yes }
			has_modifier = resort_colony
		}
		text = job_vacation_bio_trophy_effect_desc
	}
}

holding_organic_sanctuary = {
	base_buildtime = @b2_time
	owner_type = subject_holding
	icon = building_paradise_dome
	base_cap_amount = 1

	category = unity

	potential = {
		owner.overlord = { has_valid_civic = civic_machine_servitor }
		owner = { is_machine_empire = no }
	}
	destroy_trigger = {
		OR = {
			owner.overlord = { NOT = { has_valid_civic = civic_machine_servitor } }
			owner = { is_machine_empire = yes }
		}
	}

	resources = {
		category = planet_holdings
		upkeep = {
			energy = @b3_upkeep
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = planet.owner
			planet.owner = { is_gestalt = no }
		}
		job_overlord_bio_trophy_maid_add = 5
	}
	triggered_planet_modifier = {
		potential = {
			exists = planet.owner
			planet.owner = { is_gestalt = yes }
		}
		job_overlord_bio_trophy_drone_maid_add = 5
	}
	
	triggered_desc = {
		text = holding_organic_sanctuary_effect
	}
	triggered_desc = {
		trigger = {
			exists = planet.owner
			planet.owner = { is_gestalt = no }
		}
		text = job_overlord_bio_trophy_maid_effect_desc
	}
	triggered_desc = {
		trigger = {
			exists = planet.owner
			planet.owner = { is_gestalt = yes }
		}
		text = job_overlord_bio_trophy_drone_maid_effect_desc
	}
}