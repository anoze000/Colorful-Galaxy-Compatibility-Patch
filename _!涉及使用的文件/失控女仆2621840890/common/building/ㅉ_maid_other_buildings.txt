# 这些建筑极为重要，绝不能被覆盖
# extremly important buildings, mustn't be overwritten

# sanctuaries
building_organic_sanctuary = {
	base_buildtime = @b2_time

	category = unity

	potential = {
		NOT = { is_planet_class = pc_machine }
		exists = owner
		owner = { has_valid_civic = civic_machine_servitor }
		
	}
	allow = {
		custom_tooltip = { #ai不要造太多这个
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_servitor
						is_ai = yes
					}
				}
				OR = {
					check_variable_arithmetic = { which = value:available_bio_trophy_jobs value < 5 }
					free_amenities < 5
				}
			}
		}
	}
	destroy_trigger = {
		exists = owner
		OR = {
			is_planet_class = pc_machine
			owner = { NOT = { has_valid_civic = civic_machine_servitor } }
		}
	}
	convert_to = {
		building_luxury_residence
		building_communal_housing
	}
	upgrades = {
		"building_organic_paradise"
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
		inline_script = { script = maid_buildings_change/maid_building_organic_sanctuary_resources } #Rogue Maid
	}

	inline_script = { script = maid_buildings_change/maid_building_organic_sanctuary_jobs_and_modifiers } #Rogue Maid
	
	# We need to cheat here and tell AI that this will probably give some complex output since AI can not evaluate what this building does without the pops which it cant get without the building - chicken and egg
	ai_resource_production = {
		unity = 20
		physics_research = 5
		consumer_goods = 10
		alloys = 5
		trigger = {
			NOT = { has_building = building_organic_sanctuary }
		}
	}
	# Here we try to adress the second issue that the AI cant evaluate the pop job output of the bio trophy given the happiness trigger that was put inplace to guard against players exploiting bio trophies
	#science
	#alloys
	#cgs
}
building_organic_paradise = {
	base_buildtime = @b3_time
	can_build = no
	icon = building_paradise_dome

	category = unity

	potential = {
		exists = owner
		owner = { has_valid_civic = civic_machine_servitor }
	}
	destroy_trigger = {
		exists = owner
		OR = {
			is_planet_class = pc_machine
			owner = { NOT = { has_valid_civic = civic_machine_servitor } }
		}
	}
	convert_to = {
		building_paradise_dome
		building_communal_housing_large
	}
	prerequisites = { "tech_paradise_dome" }
	show_tech_unlock_if = {
		owner = { has_valid_civic = civic_machine_servitor }
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = @b2_upkeep
			exotic_gases = @b2_rare_upkeep
		}
		inline_script = { script = maid_buildings_change/maid_building_organic_paradise_resources } #Rogue Maid
	}

	inline_script = { script = maid_buildings_change/maid_building_organic_paradise_jobs_and_modifiers } #Rogue Maid

}
building_fe_dome = {
	base_buildtime = @b2_time
	can_build = yes
	can_demolish = yes

	category = amenity
	
	potential = {
		exists = owner
		custom_tooltip = {
			exists = owner
			OR = {
				owner = {
					#兼容更多思潮无限 comp with ECI
					is_ECI_activated = yes
					has_technology = tech_adaptive_ecology
				}
				owner = { is_fallen_empire = yes }
				owner = {
					has_country_flag = skydome_can_build
				}
				has_planet_flag = fallen_empire_world
			}
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = ancrel.10004.failtext
			owner = {
				check_variable = { which = skydome_build_count value >= 1 }
			}
		}
	}
	destroy_trigger = {
		always = no
	}
	
	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
		}
		upkeep = {
			energy = 10
		}

		inline_script = { script = maid_buildings_change/maid_building_fe_dome_resources } #Rogue Maid
	}

	planet_modifier = {
		planet_housing_add = 20
		planet_amenities_add = 20
	}

	inline_script = { script = maid_buildings_change/maid_building_fe_dome_jobs_and_modifiers } #Rogue Maid

	on_queued = { owner = { subtract_variable = {	which = skydome_build_count value = 1 } } }
	on_unqueued = { owner = { change_variable = {	which = skydome_build_count value = 1 } } }
}
holding_organic_sanctuary = {
	base_buildtime = @b2_time
	owner_type = subject_holding
	icon = building_paradise_dome
	base_cap_amount = 1

	category = unity

	resources = {
		category = planet_holdings
		upkeep = {
			energy = @b3_upkeep
		}
	}

	potential = {
		owner.overlord = { has_valid_civic = civic_machine_servitor }
		owner = { is_machine_empire = no }
	}
	destroy_trigger = {
		OR = {
			owner.overlord = { NOT = { has_valid_civic = civic_machine_servitor } }
			owner = { is_machine_empire = yes }
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = planet.owner
			planet.owner = { is_gestalt = no }
		}
		job_overlord_bio_trophy_maid_add = 5
	}
	triggered_planet_modifier = {
		potential = {
			exists = planet.owner
			planet.owner = { is_gestalt = yes }
		}
		job_overlord_bio_trophy_drone_maid_add = 5
	}
	
	triggered_desc = {
		text = holding_organic_sanctuary_effect
	}
	triggered_desc = {
		trigger = {
			exists = planet.owner
			planet.owner = { is_gestalt = no }
		}
		text = job_overlord_bio_trophy_maid_effect_desc
	}
	triggered_desc = {
		trigger = {
			exists = planet.owner
			planet.owner = { is_gestalt = yes }
		}
		text = job_overlord_bio_trophy_drone_maid_effect_desc
	}
}