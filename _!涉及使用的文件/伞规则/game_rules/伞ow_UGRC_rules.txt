###_++++ z fw universial 游戏规则 范用兼容框架	############################################################################################################
#_引用[script trigger]必须有placeholder, 且always = no

#_list		可宿敌/允许宣称
#			星球生存/UGRC参选/UGRC产生领袖/UGRC军事领袖
#			释放附庸/发动战争/可殖民/环境改造/殖民人口/殖民物种/自由思潮
#			UGRC幸福感/可敌对	/UGRC可繁殖
#			物种组装/轨道轰炸/全图视野
#_定位符	地面入侵通知
#			UGRC修理/产生残骸	/UGRC星系管制/可跃迁/占领军
#			UGRC传感器/跃迁管制
#_定位符	可迁移の人口
#			UGRC犯罪/强制灭绝
#			国家可建公司/国家支持公司/星球支持公司	/UGRC罪企
#			杂交许可
#			银河市场/星海议会/星海帝国
#			pop可移民/星球可移民
#			基因修饰^
#			解雇领袖/交易领袖/交易舰队	/地改候选	/空间站建设许可

#_tag		UGRC标签
#_trgr		其他堕落/巨企国家


#_|FW|		框架
#_|LCTR|	高级定位器
#_|伞优化|	performance plus
#_|产业革命|
#_|AAR|		AAR
#_|UGRC|	一些flag

#_|LSP|		孤勇者
#_[ev]太虚												<210420>
#_[古代帝国]											<210420>

#_[wsg]		舰妈										<220921>	|舰r激活|	+定做trgr
#_[swg]		星舰娘										<200814>
#_[微械]	微械革命									<220202>
#_[GF]		少女前线									<200804>
#_[阿夸]												<210819>	|阿夸激活|
#_[kc]		舰队collection								<210420>
#_[azl]		碧蓝航线DLC									<210420>
#_[azlr]	碧蓝航线R									<210915>
#_[adf]		AshArms灰烬战线								<210420>
#_|涅槃|	Nirvana Empire Project						<220921>
#_[pkman]	伊布帝国v1.22								<210501>
#_[驴岛]	明日方舟									<210522>
#_[无言]	不明mod
#_[失落帝国历史]
#_[魔圆]	Madoka Magica NEW							<200807>
#_[TAC]		深渊协议									<200807>
#_[SC]		stellarisCraft								<220329>
#_[莉莉]	AL突击莉莉									<220404>
#_[久远]	KZ_VOY										<220411>
#_[星海帝皇]											<220414>
#_[Ecar]	华章更多思潮								<220416>
#_[rmaid/MECR]	失控女仆	rogue maid					<220624>
#_[魔女]	魔女之旅-星海旅人							<220728>
#_[SRA]		星规阵列									<220821>
#_[ARP]		苍蓝钢铁的奇葩								<220826>
#_[时与空]												<221227>
#_[thl]	东方领袖										<230720>

#_[多彩]	love_between_us
#_[精灵]	ELF_species

#_[MEM]													<210618>
#_[ACOT]												<210420>
#_[SOFE]	始源										<210420>
#_[ZOFE]	巅峰					
#_[AOT]		Acquisition of Technology					<201104>	ACOT+zofe兼容
#_[EE]		永恒										<200804>
#_[bwm]		LEX Temp Fix								<210420>
#_[Ereb]	ethic_rebuild								<200805>
#_[WS]		Wild Space									<200807>	sys_trgr[is_ws_system]
#_[twinks]	Twinks Atlanteans							<201230>

#_[AUP]		~~Ariphaos Unofficial Patch					<210420>
#_[Sexp]	Sensor Expansion							<211029>

#_[HFE]		Human Fallen Empires						<200807>	glbl_flg	[hfe_installed]
#_[hiveDLC]	Hive DLC: Forgotten Queens					<210420>	glbl_flg	[complex_hive]
#_[MOP_M]	Masters of the Planet - Main				<210505>	trigger可能略有耗能
#_[UR]		Underground Realms							<210420>
#_[MCA]		More Corporate Authorities for 3.x			<210501>
#_[致命风暴]	A Deadly Tempest						<211029>

#_[Giga]												<201205>
#_[Ehof]	Event Horizon Offset Facility				<200805>
#_[SMCO]	Slightly More Celestial Objects				<200807>
#_[seooc]	Some Events of Outside Cluster				<200807>
#_[PTep]	Plentiful Traditions - Extra Perks			<200810>
#_[S_tnatc]	Storypack: The Nyblax and the Collector		<201114>
#_[AAR]											<211029>
#_[ETCPM]	Expanded Traits, Civics, Pops, and More		<211029>
#_[Eevt]	Expanded_Events								<211029>
#_[EFevt]	Endless Frontier: An Event Mod				<211029>

#_[PD]													<201005>	|PD激活|=planetarydiversity
#_[PDew]	Planetary Diversity - Exotic Worlds			<201114>
#_[PDhab]	Planetary Diversity - Habitats				<211029>
#_[RS星云]	Real Space Nebulae							<211029>
#_[RSnf]	Real Space - New Frontiers					<200807>
#_[行星国度]	Planet States							<211029>
#_[死灵入侵]	SSNI									<221103>








###_|可宿敌|	ZOFE/EE/ev	####################################
#Root = target country
#This = country
is_valid_rival = {
	custom_tooltip = {
		fail_text = INVALID_RIVAL_DESC
		root = {
			OR = {
				prev = {
					NOR = {
						is_country_type = default
						#	ZOFE
						is_country_type = ascended_empire
						is_country_type = lost_empire
						#	EE
						is_country_type = eternal_empire
						#	ev
						is_country_type = default_ev
					}
				}
				AND = {
					relative_power = { who = prev value >= inferior }
					OR = {
						relative_power = { who = prev value <= superior }
						prev = { has_policy_flag = diplo_stance_animosity }
					}
				}
			}
		}
	}
}


###_|允许宣称|		ev	/ZOFE/SOFE/EE/ETCPM	/AAR	####################################
# Root = claimer
# This = system
can_add_claim = {
	## +ZOFE/ev
	hidden_trigger = {
		if = {
			limit = {
				root = {
					NOR = {
						is_country_type = default
						#	ZOFE
						is_country_type = ascended_empire
						is_country_type = lost_empire
						#	ev
						is_country_type = default_ev
					}
				}
			}
			always = yes
		}
	}
	## +ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = {
				OR = {
					has_policy_flag = unrestricted_wars
					# ETCPM
					AND = {
						has_global_flag = expanded_pops_active
						OR = {
							NOT = { has_valid_civic = civic_closed_collective }
							NOT = { has_valid_civic = civic_closed_network }
						}
					}
				}
			}
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
			
			# ETCPM
			AND = {
				has_global_flag = expanded_pops_active
				root = {
					has_policy_flag = liberation_wars
					has_authority = auth_democratic
					has_valid_ai_personality = yes
					has_ai_personality = democratic_crusaders
				}
				owner = { NOT = { has_authority = auth_democratic } }
				owner = { NOT = { has_authority = auth_cooperative } }
			}
		}
	}
	## +ev/ZOFE/SOFE
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					#	ZOFE
					is_country_type = ascended_empire
					is_country_type = lost_empire
					#	ev
					is_country_type = default_ev
					#	EE
					is_country_type = eternal_empire
					#	SOFE
					is_country_type = sbtg_stellarborne_empire_active	
					is_country_type = sofe_light_seeker
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = no }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM_LITHOID
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = yes }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_machine_assimilator } }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_fanatic_purifiers }
			NOT = {	owner = { is_same_species = root } }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_machine_terminator }
			owner = {
				NOR = {
					is_same_species = root
					has_country_flag = synthetic_empire
					has_authority = auth_machine_intelligence
				}
			}
		}
	}
	## +ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
					# ETCPM
					has_valid_civic = civic_infestation
				}
			}
			root = {
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
					# ETCPM
					has_valid_civic = civic_infestation
				}
			}
		}
	}

	##	ETCPM
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { root = { has_valid_civic = civic_infestation } }
	}
	##	AAR
	custom_tooltip = {
		fail_text = AAR_failtip_PREROGATIVE_no_claim
		NOT = { has_star_flag = AAR_flg_sstm_NO_claim@ROOT }	# |AAR禁止宣称|
	}
}


###_[ZOFE/SOFE/EE]	####################################
# Root = taker country
# This = giver country
can_get_claim_from_lost_system = {
	#_+[ZOFE/SOFE/EE]
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
			# ZOFE
			is_country_type = ascended_empire
			is_country_type = lost_empire
			# EE
			is_country_type = eternal_empire
			# SOFE
			is_country_type = sbtg_stellarborne_empire_active
			is_country_type = sofe_light_seeker
		}
		root = {
			OR = {
				is_country_type = default
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				# ZOFE
				is_country_type = ascended_empire
				is_country_type = lost_empire
				# EE
				is_country_type = eternal_empire
				# SOFE
				is_country_type = sbtg_stellarborne_empire_active
				is_country_type = sofe_light_seeker
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			has_valid_civic = civic_fanatic_purifiers
			NOT = {	is_same_species = root }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			has_valid_civic = civic_machine_terminator
			NOR = {
				is_same_species = root
				has_country_flag = synthetic_empire
				has_authority = auth_machine_intelligence
			}
		}
	}
}


### should_surrender_planets_to
### species_has_citizenship
### should_abduct_pop


###_|星球生存|	GF/HFE/hiveDLC/PDew/GF/时与空/thl	####################################
#Root = planet
#This = species
species_can_live_on_planet = {
	exists = root #somehow this appeared in the error log. No idea how!
	##_|v机械世界|	+GF
	if = { limit = { root = { is_planet_class = pc_machine } }
		OR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					has_authority = auth_machine_intelligence
					OR = {
						has_civic = civic_machine_assimilator # Assimilator empire
						has_ascension_perk = ap_mechromancy
					}
				}
			}
			#	GF
			has_trait = GF_trait_doll
		}
	}
	##_|v蜂巢世界|
	else_if = { limit = { root = { is_planet_class = pc_hive } }
		OR = {
			has_trait = trait_hive_mind
			AND = { #Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					is_hive_empire = yes
					has_origin = origin_necrophage
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	}

	##	HFE
	NAND = {
		exists = root.controller
		root.controller = { is_country_type = hfe_plague_zombie }
	}
	##	hiveDLC
	NAND = {
		has_trait = trait_digital
		root = { NOT = { is_planet_class = pc_matryoshka } }
	}
	##	PDew
	if = { limit = { has_global_flag = planetarydiversity }
		UGRC_trgr_spcs_PD_plnt_habitable = yes	# |UGRC条件_PD可居住|
	}
	##	时与空
	TIME_RULE_trgr_spcs_CAN_live_on_planet = yes
	##	thl
	THL_trgr_spcs_RULE_can_live_on_planet = yes
}


###_|UGRC参选|	####################################	UGRC定制	提升不大|384|17%|
#Note: this is also used in pop faction support calculations
#Root = country
#This = pop
can_vote_in_democratic_election = {
	has_pop_flag = UGRC_flg_pop_RULE_can_vote	# |UGRC标签|
}


### should_pay_for_leader_upkeep


###_|UGRC产生领袖|	FW/GF/无言/Ereb/hiveDLC/PTep/Eevt/ETCPM/莉莉/Ecar/rmaid/魔女
#Checks whether any leaders (scientists etc) can be formed from this pop
#Root = country
#This = pop
can_generate_leader_from_pop = {
	has_pop_flag = UGRC_flg_pop_RULE_can_generate_leader	# |UGRC标签|
}


###	can_generate_leader_from_species
###	can_create_espionage_asset_from_species


###_|UGRC军事领袖|	####################################	GF/hiveDLC
#Root = country
#This = pop
can_generate_military_leader_from_pop = {
	has_pop_flag = UGRC_flg_pop_RULE_can_generate_military_leader	# |UGRC标签|
}


###	can_generate_army_from_planet


###_|释放附庸|	FW/ZOFE/SOFE/EE	####################################
#Root = planet
#This = country
can_release_vassal = {
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_fanatic_purifiers }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_terminator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_machine_assimilator }
	}
	custom_tooltip = {
		fail_text = default
		NOT = { has_valid_civic = civic_hive_devouring_swarm }
	}
	# FW		堕落释放的还是堕落,但不可有多个堕落
	Root = {
		exists = owner
		owner = {
			NOR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
	# ZOFE/EE/SOFE
	custom_tooltip = {
		fail_text = default
		NOR = {
			is_country_type = ascended_empire			# ZOFE
			is_country_type = lost_empire				# ZOFE
			is_country_type = eternal_empire			# EE
			is_country_type = sbtg_stellarborne_empire_active	# SOFE
		}
	}
}


###_|释放附庸|	GF/PTep/ETCPM/Eevt/Ecar/rmaid	####################################
#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		### +GF/PTep/ETCPM/rmaid
		NOR = {
			##	|v智械|
			AND = {
				has_trait = trait_machine_unit
				#	rmaid
				Maid_trigger_4_can_release_vassal_from_species = no
			}
			AND = {
				has_trait = trait_hive_mind
				NOT = { prev.this = { has_origin = origin_progenitor_hive } }
			}
			AND = {
				NOT = { has_trait = trait_hive_mind }
				prev.this = { has_authority = auth_hive_mind }
			}
			has_trait = trait_mechanical
			can_think = no

			# Ecar
			has_trait = trait_flesh_components
			# PTep
			has_trait = trait_plentiful_traditions_pt_cocoon
			# Eevt/ETCPM
			has_trait = trait_memorex_comatos
			has_trait = trait_infested_basic
			AND = {
				has_global_flag = expanded_pops_active
				prev = { NOT = { has_technology = tech_synthetic_leaders } }
				has_trait = trait_mechanical
			}
		}
		
		# ETCPM	##################
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = {
					OR = {
						has_valid_civic = civic_fanatic_purifiers
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			is_same_species = prev
		}
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = { has_authority = auth_machine_intelligence }
			}
			OR = {
				has_trait = trait_machine_unit
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
		if = {
			limit = {
				has_global_flag = expanded_pops_active
				prev = { has_authority = auth_hive_mind }
			}
			OR = {
				has_trait = trait_hive_mind
				has_citizenship_rights = yes
				has_citizenship_type = { type = citizenship_limited }
			}
		}
	}
}


###	can_generate_army_from_species
###	can_modify_species


###_[Ecar/ETCPM]	####################################
#This = country, suject
#Root = country, overlord
#From = target solar system
#This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
subject_can_expand = {
	# Exalted domination totally disallow vassal expansion
	NOT = { has_global_flag = has_exalted_domination_mod }
	#_|宗主条件|	+Ecar/ETCPM
	root = {
		OR = {
			has_valid_civic = civic_feudal_realm
			# Ecar
			has_valid_civic = civic_aristocratic_elite
			has_valid_civic = civic_coalition_government
			has_valid_civic = civic_altruism
			# ETCPM
			has_policy_flag = vassal_expansion_allowed
		}
	}
	#_|自身条件|
	NAND = {
		is_ai = yes
		AND = {
			exists = overlord
			overlord = { has_origin = origin_imperial_vassal_overlord }
		}
	}
}


###_[ZOFE/ACOT/SOFE/行星国度/seooc]	####################################
#Root = country, attacker
#This = country, target
#This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops OR attacking their fleets
can_take_hostile_actions = {
	if = {
		limit = {
			ROOT = {
				NOT = { has_policy_flag = first_contact_attack_allowed }
			}
			NOR = {
				is_hostile = ROOT
				has_communications = ROOT
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	else_if = {
		limit = {
			has_country_flag = fotd_seperatist_country@ROOT
			ROOT = {
				has_origin = origin_fear_of_the_dark
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FOTD"
			always = no
		}
	}
	else_if = {
		limit = {
			AND = {
				NOT = { has_country_flag = hostile_to_nomads }
				ROOT = {
					is_country_type = nomad
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_FIRST_CONTACT_PROTOCOL"
			always = no
		}
	}
	## +ZOFE
	else_if = {
		#attacking primitives with non-interference
		limit = {
			ROOT = {
				OR = {
					is_country_type = default
					is_country_type = ascended_empire	# ZOFE
				}
				NOT = {
					has_policy_flag = interference_aggressive	  
				}
			}
			is_primitive = yes
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NATIVE_INTERFERENCE"
			always = no
		}
	}
	## +ZOFE
	else_if = {
		limit = {
			is_primitive = yes
			ROOT = {
				OR = {
					is_country_type = default
					is_country_type = ascended_empire	# ZOFE
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = no
		}
	}
	else_if = {
		limit = {
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
			is_country_type = faction
			root = {
				any_owned_planet = {
					exists = controller
					controller = {
						is_same_value = prevprevprev
					}
				}
			}
		}
		custom_tooltip = {
			text = ""
			always = yes
		}
	}
	else_if = {
		limit = {
			exists = overlord
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_SATRAPY"
			always = no
		}
	}
	else_if = {
		limit = {
			exists = overlord
			overlord = { is_same_value = root }
			ROOT = { any_agreement = { agreement_preset = preset_satrapy } }
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_OVERLORD"
			always = no
		}
	}
	
	# ACOT/SOFE	######################################################
	else_if = {
		limit = {
			THIS = { is_country_type = sbtg_stellarborne_empire_passive }
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {#_|SOFE|	永远无法攻击沉默的始源
		limit = {
			THIS = {
				OR = {
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = yes
		}
	}
	else_if = {
		limit = {
			ROOT = {
				OR = {
					is_country_type = void_lifeforms_1
					is_country_type = void_lifeforms_2
				}
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	# 行星国度	######################################################
	else_if = {
		limit = {
			is_country_type = planet_state
			root = {
				OR = {
					is_country_type = ascended_empire	# ZOFE
					is_country_type = lost_empire
					is_country_type = eternal_empire	# EE
					is_country_type = default_ev		# ev
				}
			}
			capital_scope = {
				root = {
					NOT = {
						any_planet_within_border = {
							is_same_value = prevprev
						}
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_PLANET_STATE"
			always = no
		}
	}
	else_if = {
		limit = {
			is_country_type = planet_state
			root = {
				OR = {
					is_country_type = dormant_marauders
					is_country_type = ruined_marauders
					is_country_type = awakened_marauders
				}
			}
		}
		always = no
	}
	# seooc	######################################################
	else_if = {
		limit = {
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_gaia_country
				}
			}
		}
		always = yes
	}
	# seooc_phantom
	else_if = {
		limit = {
			ROOT = {
				NOT = { has_technology = tech_nep_phantom_phase_shift }
			}
			is_country_type = nep_phantom_passive
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_PHANTOM"
			always = no
		}
	}
	# seooc_side_story
	else_if = {
		limit = {
			root = { is_ai = no }
			OR = {
				AND = {
					root = { has_country_flag = nep_gaia_assist_war }
					has_country_flag = nep_gaia_country
				}
				AND = {
					has_country_flag = nep_gaia_assist_war
					root = { has_country_flag = nep_gaia_country }
				}
				AND = {
					root = { has_country_flag = nep_highlander_assist_war }
					has_country_flag = nep_highlander_country
				}
				AND = {
					has_country_flag = nep_highlander_assist_war
					root = { has_country_flag = nep_highlander_country }
				}
			}
		}
		custom_tooltip = {
			text = "CAN_TAKE_HOSTILE_ACTION_NEP_GAIA"
			always = no
		}
	}
	
	else = {
		always = yes
	}
}


###_|发动战争|	ZOFE/SOFE/S_tnatc/ETCPM/SSNI/rmaid	####################################
#Root = country, attacker
#This = country, target
#This rule is a condition for declaring war
can_declare_war = {
	##	|附庸关系|	+ZOFE/SOFE/ETCPM
	custom_tooltip = {
		fail_text = "ACTION_DECLARE_WAR_OVERLORD_ON_SUBJECT"
		NOT = {
			has_overlord = ROOT
		}
	}
	##	|战争政策|	+rmaid
	if = {
		limit = {
			exists = root
			ROOT = {
				has_policy_flag = no_wars
				OR = {
					is_subject = no
					overlord = {
						is_same_value = root
					}
				}
			}
		}
		custom_tooltip = {
			text = "CAN_DECLARE_WAR_POLICY"
			#always = no
			#	rmaid	=|监护矩阵继任者使用遏制威胁CB|
			Maid_trigger_3_can_declare_war = yes
		}
	}
	##	|原版AI|	SOFE会清除这条?
	if = {
		limit = {
			exists = root
			ROOT = {
				is_ai = yes
			}
		}
		ROOT = {
			is_at_war = no
		}
	}
	
	##	S_tnatc
	if = {
		limit = { has_global_flag = nyblax_no_wars }
		custom_tooltip = {
			text = "NYBLAX_NO_WARS"
			always = no
		}
	}
	##	SSNI
	if = {
		limit = {
			use_for_game_mode_survival = yes
		}
		custom_tooltip = {
			fail_text = "WAR_BLOCKED_FOR_SURVIVAL"
			always = no
		}
	}
}

###_|可殖民|	LSP	####################################
#Root = country
#This = planet
can_colonize_planet = {
	#always = yes
	
	##	LSP
	custom_tooltip = {
		fail_text = LSP_failtip_country_solitary
		hidden_trigger = {
			exists = root
			root = { NOT = { has_country_flag = LSP_flag_country_solitary } }
		}
	}
}


###_[ev/HFE]	####################################
#Root = country
#This = planet
can_colonize_outside_borders = {
#	always = no
	exists = root
	root = {
		OR = {
			is_country_type = ev_leviathans_crisis	# ev
			is_country_type = hfe_features_exodus	# HFE
		}
	}
}


###_|环境改造|		RSnf/PD/thl	####################################
#Root = country
#This = planet
can_terraform_planet = {
	custom_tooltip = {
		fail_text = terraform_fail_no_presapient_protection_or_no_presapients
		NAND = {
			AND = {
				exists = root
				root = { has_policy_flag = pre_sapients_protect }
			}
			any_owned_species = { is_sapient = no }
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_devouring_swarm_lithoid"
		exists = root
		root = { is_lithoid_devouring_swarm = no }
	}
	custom_tooltip = {
		fail_text = "legendary_leader_planet_no_terraform"
		exists = root
		this = {
			NOT = { has_planet_flag = legendary_leader_planet }
		}
	}

	custom_tooltip = {
		fail_text = requires_not_relentless_industrialists_situation
		NOT = {
			any_targeting_situation = {
				is_situation_type = relentless_industrialists_situation
			}
		}
	}

	##	RSnf
	custom_tooltip = {
		fail_text = NO_TERRAFORM_HOLLOW_WORLD
		NOT = { is_planet_class = pc_hollow }
	}
	custom_tooltip = {
		fail_text = NO_TERRAFORM_OVERMIND
		NAND = {
			has_global_flag = has_new_frontiers_mod	#_|rsnf安装|仅仅是有deposit可能会有问题
			has_deposit = d_heart_of_the_overmind
		}
	}
	##	PD
	custom_tooltip = {
		fail_text = "requires_actor_not_pdtol"
		root = { NOT = { has_origin = origin_pd_tree_of_life } }
	}
	##	东方领袖
	custom_tooltip = {
		fail_text = "sakura_planet_no_terraform"
		NOT = { has_planet_flag = sakura_planet }
	}
}




###_|殖民人口|	ev/PTep/魔圆	####################################
#Root = country
#This = pop
can_colonize_with_pop = {
	# ev
	Root = {
		OR = {
			NOT = { is_country_type = default_ev }
			AND = {
				is_country_type = default_ev
				OR = {
					has_origin = origin_ev_both_choosen
					has_country_flag = has_ev_to_planets
				}
			}
		}
	}
	# PTep
	NOT = { has_trait = trait_plentiful_traditions_pt_cocoon }
	# 魔圆
	NOT = { has_trait = trait_mahoshoujo }
	
	has_colonization_control = {
		type = colonization_control_no
		country = root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			OR = {
				is_sapient = no
				has_trait = trait_zombie
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}
}


###_|殖民物种|	ev/PTep	####################################
#Root = country
#This = species
can_colonize_with_species = {
	##_|ev|
	Root = {
		OR = {
			NOT = { is_country_type = default_ev }
			AND = {
				is_country_type = default_ev
				OR = {
					has_origin = origin_ev_both_choosen
					has_country_flag = has_ev_to_planets
					has_civic = civic_ev_planet_and_fleet
				}
			}
		}
	}
	##_|PTep|
	NOT = { has_trait = trait_plentiful_traditions_pt_cocoon }
	
	##_|VANILLA|	+LSP
	has_colonization_control = {
		type = colonization_control_no
		country = root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	if = {
		limit = {
			OR = {
				is_sapient = no
				has_trait = trait_zombie
				has_trait = LSP_trait_original	#LSP
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else_if = {
		limit = { has_trait = trait_hive_mind }
		root = { is_hive_empire = yes }
	}
	else_if = {
		limit = { has_trait = trait_machine_unit }
		root = { is_machine_empire = yes }
	}
	else = {
		always = yes
	}
}


###	|自由思潮|	+SC	####################################	无需优化提升不大|384|17%|
#	pop_has_random_ethics = {
#		exists = from
#		NOR = {
#			has_citizenship_type = {
#				country = from
#				type = citizenship_organic_trophy
#			}
#			#	|SC|
#			has_trait = trait_protoss_probe
#		}
#	}


###_|UGRC幸福感|	wsg/PTep/Eevt/无言/Ecar/魔女/thl	####################################
# Root = Species	可能是当前物种的主物种
# From = Country
# This = Species	当前物种的真实scope
species_has_happiness = {
	has_species_flag = UGRC_flg_spcs_RULE_happiness_ENABLE@from		# 改为<@root.from>不会报错,但是子物种无法检测到flag
}




###_|可敌对|	ACOT/SOFE	####################################
#Root = country, us
#This = country, them
#This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
can_be_hostile_towards = {
	if = {
		limit = { is_primitive = yes }
		ROOT = {
			NOR = {
				has_policy_flag = interference_not_allowed
				has_policy_flag = interference_subtle
			}
		}
	}
	else_if = {
		limit = { ROOT = { is_primitive = yes } }
		NOR = {
			has_policy_flag = interference_not_allowed
			has_policy_flag = interference_subtle
		}
	}
	else_if = {
		limit = { is_country_type = ratlings }
		always = yes
	}

	# ACOT/SOFE
	else_if = {
		limit = { is_country_type = void_lifeforms_1 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_1 } }
		always = yes
	}
	else_if = {
		limit = { is_country_type = void_lifeforms_2 }
		always = yes
	}
	else_if = {
		limit = { ROOT = { is_country_type = void_lifeforms_2 } }
		always = yes
	}
}


###_|UGRC可繁殖|	GF/HFE/hiveDLC/PTep/Eevt/多彩/魔女/精灵		####################################	|-45%|
# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	has_species_flag = UGRC_flg_spcs_RULE_procreate_ENABLE	# |UGRC标签|

	if = { limit = { root = { has_modifier = slave_colony } }
		has_citizenship_type = { type = citizenship_slavery country = root.owner }
	}
	if = { limit = { has_trait = trait_necrophage }
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}

	##################################################
	#	HFE
	if = { limit = { hfe_trigger_population_procreate_housing_block_enabled = yes }
		root = { free_housing > -1 }
	}
	#	魔女
	if = { limit = { has_species_flag = UGRC_flg_spcs_RULE_procreate_DUMMY }
		if = { limit = { has_trait = trait_reanimated_materials }
			root = {
				num_assigned_jobs = {
					job = matter_reanimator
					value > 0
				}
				NOR = { # make sure elaina always grow first
					has_building = building_possibility_portal
					has_building = building_dimensional_instrument
					has_deposit = d_mysterious_portal
				}
				owner = {
					NOT = {
						has_deficit = consumer_goods
					}
				}
			}
		}
		if = { limit = { has_trait = trait_houki }
			root.owner = {
				has_country_flag = newbirth_houki
				NOT = { has_country_flag = max_houki_number_reached }
			}
		}
		if = {
			limit = { 
				OR = {
					has_trait = trait_witch
					has_trait = trait_victorika
					has_trait = trait_elaina_descendant
				}
			}
			OR = {
				root.owner = {
					has_ascension_perk = ap_xeno_compatibility
				}
				root = {
					OR = {
						has_building = building_possibility_portal
						has_building = building_dimensional_instrument
						has_deposit = d_mysterious_portal
					}
				}
			}
		}
	}
}




###_[物种组装]
#_|基础trgr|	原版智械/原版克隆|is_organic_species|
#_|MOD物种|		wsg/莉莉/swg/kc/DAL/微械/时与空/久远/azl/azlr/GF/PTep/SC/thl	/hiveDLC/魔女/多彩/精灵	/EE
# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	has_population_control = {
		type = no
		country = root.owner
	}
	##_|基础条件|
	OR = {
		#_|原版组装|	+azl/GF/魔女/久远/时与空
		AND = {
			is_robotic = yes	# 含|是wsg物种|
			NOR = {
				has_trait = trait_robot_mind_relic_core	# azl
				has_trait = trait_reassembler			# 时与空
			}
			KZ_VOY_trgr_plnt_ASSEMBLY = yes	# 久远

			#	魔女
			if = { limit = { has_trait = trait_dummy }
				if = { limit = { root.owner = { has_origin = origin_garbage_princesses } }
					root = { 
						OR = {
							has_building = building_enigmatic_assembly_plant
							num_assigned_jobs = {
								job = dummicist
								value > 0
							}
						}
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
				else = {
					root.owner = { has_technology = tech_dummy_workers }
					root = {
						num_assigned_jobs = {
							job = dummicist
							value > 0
						}
					}
					root = {
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
			}
			#	久远
			else_if = { limit = { has_trait = trait_KZ_VOY_magic_puppet }
				KZ_VOY_can_assemble_magic_puppet = yes
			}
			#	GF
			else_if = { limit = { has_trait = GF_trait_doll }
				root.owner = {
					OR = {
						has_authority = GF_auth_commonwealth
						is_valid_GF_OGAS_subnet = yes
					}
				}
			}
			#	thl
			else_if = { limit = { has_trait = trait_thl_doll }
				THL_trgr_spcs_RULE_doll_assembly = yes
			}
			#_|v默认|	+azl
			else = {
				root = {
					check_modifier_value = { modifier = planet_pop_assembly_add	value > 0 }
					owner = {
						NOR = {# 这类mod国家不组装机器人
							# azl
							has_authority = auth_azur_lane_1
							has_authority = auth_azur_lane_2
							has_authority = auth_azur_lane_K
						}
					}
				}
			}
		}
		#_|原版克隆|	+Ecar/星海皇帝/thl
		AND = {
			is_organic_species = yes
			#_|v蜂群|	+Ecar
			if = {
				limit = {
					OR = {
						has_trait = trait_hive_mind
						# Ecar
						has_trait = trait_psionic_link
					}
				}
				root.owner = { is_hive_empire = yes }
			}
			#_|v植物|
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v鲸族|
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v义体|
			else_if = {
				limit = { has_trait = trait_cybernetic }
				root.owner = {
					has_tradition = tr_cybernetics_assembly_standards
					has_policy_flag = roboticist_output_build_cyborgs
				}
			}
			#_|v克隆军|		+星海帝皇
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					OR = {
						has_building = building_clone_army_clone_vat
						#	星海帝皇
						has_building = building_clone_guard_clone_vat
						has_building = building_clone_vats
					}
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			#_|通用|=|存在克隆+特殊spcs|		+FW/星海帝皇/Ecar/thl
			else = {
				root = {
					#	FW	|全能条件|
					check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 }
					#OR = {
					#	#	vanilla
					#	has_building = building_clone_vats	# |ap_engineered_evolution/tr_genetics_adopt|
					#	has_modifier = tiyanki_trophy
					#	owner = { has_modifier = syamelles_curse }
					#	AND = {
					#		has_building = building_posthumous_employment_center
					#		owner = { has_civic = civic_permanent_employment }
					#	}
					#	has_planet_flag = can_organic_assemble_flag #for mod compatibility
					#	
					#	#	FW
					#	check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 }
					#	#	星海帝皇
					#	has_building = building_clone_guard_clone_vat
					#	#	Ecar
					#	has_building = building_advanced_clone_vats
					#	#	thl
					#	THL_trgr_plnt_RULE_can_assembly_organic = yes
					#}
				}
			}
		}
		is_archetype = LILY						# 莉莉
		is_archetype = STARSHIPGIRLS			# swg
		is_archetype = KANMUSU					# kc
		is_archetype = DATEALIVE				# DAL
		is_archetype = DPURIFIER				# SC|净化者|
		is_archetype = ASCENDED					# EE
		#	wsg
		is_archetype = WARSHIPGIRL
		is_archetype = SHENHAI
		is_archetype = UNITED_FLEET
		is_archetype = NANITES_CROP
		#	久远
		KZ_VOY_trgr_plnt_CLONE = yes
		#	azl/azlr
		AND = {
			OR = {
				is_Azur_Lane_organic_species = yes
				is_KANSEN_species = yes
			}
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
			}
		}
		#	PTep
		AND = {
			has_trait = trait_plentiful_traditions_pt_cocoon
			root.owner = { has_ascension_perk = ap_total_assimilation }
		}
		#	精灵
		ELF_species_assembled_rules = yes
		#	多彩
		AND = { has_global_flag = love_between_us	# |安装|
			OR = {
				#雌伏于阴影之下起源 允许孤雌生殖物种组装
				AND = {
					has_trait = trait_suc_parthenogenesis
					root = {
						owner = { has_origin = origin_female_in_shadow }
					}
				}
				#允许播种者组装
				has_trait = trait_sowing_and_breeding
				#Y触之虫组装Y奴
				AND = {
					is_species_class = PAR
					root = {
						owner = { has_country_flag = parasite_mind_flag }
						any_owned_pop = { has_job = ten_nest_worker }
					}
				}
				#虫与自然组装
				AND = {
					OR = {
						is_species_class = TEN
						is_species_class = PAR
					}
					root = { owner = { has_valid_civic = civic_parasite_and_nature } }
				}
				#Y触圣女组装Y触造物
				AND = {
					is_species_class = Magical_Tentacle
					root = {
						owner = { has_country_flag = abstinence_flag }
						any_owned_pop = { has_job = procreate_doll }
					}
				}
				#圣光创造圣女
				AND = {
					has_trait = trait_DC_ethic_asceticism
					root = {
						OR = {
							has_building = building_holylight_clone_vats
							has_building = building_world_tree_0
							has_building = building_world_tree_1
							has_building = building_world_tree_2
							has_building = building_world_tree_3
							has_building = building_world_tree_4
							has_building = building_world_tree_5
							AND = {
								exists = owner
								has_holding = { holding = holding_world_tree owner = owner.overlord }
							}
							owner = { has_origin = origin_INN_destruction_light }
						}
					}
				}
			}
		}
	}

	##	微械
	root.owner = { NOT = { has_modifier = modifier_ban_assemble } }
	##	hiveDLC
	NAND = {
		has_trait = trait_machine_central
		root.owner = { has_valid_civic = civic_machine_replicators }
	}
	##	精灵
	ELF_can_not_be_assembled_species = yes
	##	久远
	if = {
		limit = { 
			OR = {
				has_trait = trait_KZ_VOY_sub_terran_dragon
				has_trait = trait_KZ_VOY_sub_terran_dragon_SP
			}
		}
		KZ_VOY_trgr_plnt_CLONE = yes
	}
}




###_[轨道轰炸]	FW/AUP/ev/wsg/swg/阿夸/古代帝国/失落帝国历史/多彩/精灵/TAC/SRA	/ACOT/SOFE/bwm/HFE/Giga/Ehof/RSnf/MEM/SSNI/久远/thl	#########
#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	###_|禁止条件|	+RSnf/阿夸/精灵
	NOR = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
		FROM = {
			OR = {
				is_planet_class = pc_hollow		# RSnf
				is_ELF_can_not_be_orbital_bombard_planet = yes	# 精灵
				OWNER = { is_country_type = kuat_fire_base_hositle }	# 阿夸
				has_planet_flag = enable_kuat_shield
			}
		}
	}
	##_|特殊星球|	FW/MOP_M/精灵
	#	此类星球只在特定情况下允许轨道轰炸
	NAND = {
		FROM = { has_building = building_training_bomboardment }	# MOP_M
		ROOT.OWNER = {
			NOR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = gray_goo
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = {
						NAND = {
							is_subject_with_preset = { PRESET = preset_satrapy }
							NOT = { has_country_flag = rebelling_satrapy }
						}
					}
				}
				is_ELF_can_orbital_bombard_country_type = yes	# 精灵
			}
		}
	}
	
	###_|基本条件|
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		#	AUP/HFE
		ROOT.CONTROLLER = { is_hostile = FROM.CONTROLLER }
		#_|V可随意轰炸|	+bwm
		FROM = {
			OR = {
				is_planet_class = pc_infested
				has_planet_flag = bwm_ancestor_world			# bwm
			}
		}
		#	TAC		---禁用|高能耗|
	#	ROOT = { has_component = AI_MATRICES }
		##_|可被轰炸|	+古代帝国/SOFE/bwm/Giga/Ehof/阿夸/多彩
		FROM.CONTROLLER = {
			OR = {
				#	VANILLA
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}
				#	UGRC
				has_country_flag = UGRC_flg_cntr_RULE_can_be_bombed

				is_country_type = mem_ancestor_guardian			# bwm
				is_country_type = original_empire				# SOFE
				is_country_type = compound_empire				# Giga/Ehof
				is_country_type = void_lifeforms_1				# Giga/ACOT
				is_country_type = void_lifeforms_2				# Giga/ACOT
				is_country_type = katzenartig_imperium			# Giga/ACOT
				ag_can_be_orbital_bombardment_country = yes		# 古代帝国	安装=|has_ancient_empire_mod|
				kuat_can_be_orbital_bombarment_country = yes	# 阿夸		安装=|install_kuat_mod|
				is_country_type = ten_crisis_empire				# 多彩
			}
		}
		##_|可以轰炸|	+ev/wsg/swg/阿夸/古代帝国/失落帝国历史	/bwm/ACOT/SOFE/MEM/SRA/SSNI/久远/多彩/精灵/thl
		ROOT.CONTROLLER = {
			OR = {
				#	VANILLA
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire					# <aup去除了此项>
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = debt_collectors
				is_country_type = gray_goo
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = { is_hostile = prev }
				}
				#	UGRC
				has_country_flag = UGRC_flg_cntr_RULE_can_bomb

				is_country_type = ev_leviathans_crisis			# ev
				is_country_type = afk_crisis_country			# swg
				is_country_type = LsE_fallen_empire				# 失落帝国历史
				#	wsg
				is_country_type = wg_crisis_country
				is_khan_country_type = yes
				#	古代帝国
				ag_can_do_orbital_bombardment_country = yes
				#	阿夸
				kuat_can_do_bombarment_country = yes
				
				is_country_type = mem_ancestor_guardian			# bwm
				is_country_type = original_empire				# SOFE
				#	ACOT
				is_country_type = compound_empire
				is_country_type = katzenartig_imperium
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				is_country_type = acot_crazed_stellarite
				#	MEM
				is_country_type = mem_surveyor_country_red		# 瓦祖兰
				is_country_type = mem_vazurans
				#	SRA
				SRA_can_do_orbital_bombardment_country = yes
				#	SSNI
				is_country_type = sentinel_hostile_expansion
				#	久远
				KZ_VOY_can_unconditional_bombarment_country = yes
				#	多彩
				is_country_type = ten_crisis_empire
				#	精灵
				is_ELF_can_orbital_bombard_country_type = yes
				#	thl
				is_country_type = koishi_berserk_fleet
			}
		}
		#_星球所有者轰炸被其他阵营占据的星球	-SOFE<去掉了此项>
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = ROOT.CONTROLLER }
			}
			from.owner = {
				is_same_value = ROOT.CONTROLLER
			}
		}
	}
}


###	can_planet_support_orbital_station


###_[全图视野]	FW/LCTR/SOFE/涅槃/久远	####################################
# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = {
	NOT = { has_country_flag = FW_flg_cntr_FULL_sensor_off }	#_|FW|开关
	OR = {
		has_megastructure = spy_orb_4
		has_megastructure = spy_orb_restored
		has_megastructure = sofe_omega_spy_orb_center				# SOFE
		has_country_flag = PF_flg_cntr_SENSOR_opt_AI				#_|PF|AI传感优化
		has_country_flag = FW_flg_cntr_CHT_orrery_ON				#_|FW|璀璨星图
		has_country_flag = FW_flg_cntr_CHT_beacon_ON				#_|FW|永恒星炬
		has_country_flag = LCTR_flg_cntr_RELIC_activated_full		#_|LCTR|暗能量传感器
		KZ_VOY_has_full_sensor_range = yes							# 久远
	#	AND = { is_ai = yes		has_country_flag = nirvana }		# 涅槃
	#	has_country_flag = ai_dragon								# 涅槃
	#	has_country_flag = ai_council								# 涅槃
	}
}


###_[地面入侵通知=定位]	####################################
# Determines if notification messages should be sent after a ground combat
# this: planet
# from: winner
# root: loser
show_notification_for_ground_combat = {
	NOT = { has_planet_flag = slave_revolt }
}
###	should_apply_neighbor_rival_modifier
###	are_rebels_hostile
###	should_colony_be_destroyed_on_pc_change
###	is_extradimensional_portal
###	is_extradimensional_anchor
###	will_anger_fallen_empire
###	can_have_robot_pops
###	can_stop_purge_pop_manually
###	can_purge_pop_manually
###	fleet_uses_templates


###_|UGRC修理|	####################################
#_mod	ZOFE/ACOT/AOT/莉莉
# this = starbase, megastructure OR planet
can_orbitable_repair_ships = {
	#	|UGRC维修轨道|
	is_variable_set = UGRC_var_all_RULE_can_orbitable_repair_ships
	#	vanilla
#	OR = {
#		AND = {
#			is_scope_type = starbase
#			OR = {
#				has_starbase_size >= starbase_starport
#				has_starbase_size = juggernaut
#				has_starbase_size = enclave_mercenary_station
#			}
#			fleet = {
#				is_disabled = no
#			}
#		}
#		AND = {
#			is_scope_type = megastructure
#			OR = {
#				is_megastructure_type = mega_shipyard_1
#				is_megastructure_type = mega_shipyard_2
#				is_megastructure_type = mega_shipyard_3
#			}
#		}
#	}
}



###_[产生残骸]	FW/z_cm/ev/wsg/swg/失落帝国历史		/ZOFE/SOFE/hiveDLC/twinks	####################################
#_glbl_flg	[FW_flg_glbl_TECH_overwhelm]	科技壁垒
# this = ship
# root = country that kills ship
can_spawn_debris = {
	root = { 
		OR = {
			is_country_type = default
			is_country_type = default_ev		# EV
			is_country_type = ascended_empire	# ZOFE
			is_country_type = lost_empire		# ZOFE
		}
	}
	exists = owner
	owner = {
		NAND = {#_科技限制
			has_global_flag = FW_flg_glbl_TECH_overwhelm	#_|FW|科技壁垒
			relative_power = { who = root category = technology value >= superior }	#_[FW]神一般的科技=superior
		}
		NAND = {#_[z_cm]无法获取堕落科技
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
			has_global_flag = z_cm_fallen_technology
		}
		## +EV/失落帝国历史/swg/hiveDLC/twinks	/wsg/SOFE
		NOR = {#_阵营限制
			has_ascension_perk = ap_enigmatic_engineering
			
			is_country_type = default_ev					# EV
			is_country_type = LsE_fallen_empire				# 失落帝国历史
			is_country_type = afk_crisis_country			# swg
			has_civic = civic_hive_strong_connection		# hiveDLC
			has_civic = civic_tw_atlantis					# twinks
			# wsg
			is_country_type = wg_crisis_country
			is_khan_country_type = yes
			# SOFE
			has_government = "gov_eternal_continuum"
			has_valid_civic = civic_sofe_pursuit_answer
			is_country_type = original_empire
			is_country_type = original_empire_passive
		}
	}
}


###_|UGRC星系管制|	AUP/ZOFE/ev/SOFE/EE/TAC	####################################	|检测cntr|-55%,|单flag@root|-88%
# this = system
# root = country
# Determines if AI-controlled empires should restrict (and thus avoid) a system
# Used by regular empires, fallen empires & crises
ai_should_restrict_system = {
	ROOT = {
		##	|普通|
		if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_DEFAULT }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
		##	|掠夺者|
		else_if = {
			limit = {
				OR = {
					is_country_type = awakened_marauders 
					is_country_type = marauder_raiders
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					AND = {
						exists = owner
						owner = {
							OR = {
								has_country_flag = UGRC_flg_cntr_RULE_restrict_FALLEN
								#	|强力帝国|
								is_country_type = eternal_empire	# EE
								is_progenitor_empires = yes			# SOFE
							}
						}
					}
				}
			}
		}
		##	|堕落帝国|
		else_if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_FALLEN }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					#	掠夺者
					AND = {
						exists = owner
						owner = { 
							OR = {
								is_country_type = awakened_marauders 
								is_country_type = dormant_marauders		# AUP
							}
						}
					}
				}
			}
		}
		##	|觉醒帝国|
		else_if = { limit = { has_country_flag = UGRC_flg_cntr_RULE_restrict_AFE }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
				}
			}
		}
		##	|强力帝国|
		else_if = {
			limit = {
				OR = {
					is_country_type = eternal_empire	# EE
					is_progenitor_empires = yes			# SOFE
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_WILDLIFE
					AND = {
						exists = owner
						owner = {
							OR = {
								is_country_type = awakened_marauders 
								is_country_type = dormant_marauders		# AUP
							}
						}
					}
				}
			}
		}
		##	|天灾|
		else_if = {
			limit = {
				OR = {
					is_crisis_faction = yes
					is_country_type = original_empire	# SOFE
				}
			}
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
		##	|古代守望|
		else_if = {
			limit = { is_country_type = ag_ancient_psi_guardian }
			prev = {
				OR = {
					has_star_flag = UGRC_flg_sstm_RESTRICT_vanilla_GUARDIAN_fortress
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_AG_zeta
					has_star_flag = UGRC_flg_sstm_RESTRICT_mod_TAC
				}
			}
		}
	}
}

###	can_subjugate_empires
###	can_leader_get_council_trait
###	can_leader_get_normal_trait
###	can_leader_get_subclass_trait
###	can_leader_get_destiny_trait
###	has_extra_council_position

###_[可跃迁]	FW/古代帝国/seooc/莉莉	####################################
#_|通用禁行|	精灵
# THIS = Fleet
can_jump_drive = {
#	always = yes	# Moved cooldown to code
	exists = solar_system
	
	# FW
	if = {
		limit = {
			OR = {
				has_fleet_flag = FW_flg_flt_JUMP	# FW特殊跃迁flt
				controller = {
					OR = {
						has_country_flag = FW_flg_cntr_CHT_orrery_ON		# 璀璨星图
						has_country_flag = FW_flg_cntr_CHT_beacon_ON		# 永恒星炬
					}
				}
			}
		}
		always = yes
	}
	#_|通用禁行|	精灵
	else_if = { limit = { solar_system = { has_star_flag = ELF_Singularity_System } }
		always = no
	}
	# 古代帝国
	else_if = { limit = { solar_system = { has_star_flag = ag_no_jump_out_system } }
		custom_tooltip = { fail_text = ag_jump_drive_unable_system_tooltip
			always = no
		}
	}
	# seooc
	else_if = { limit = { solar_system = { has_star_flag = nep_Scrus_cluster } }
		custom_tooltip = { fail_text = "CAN_NOT_JUMP_WHEN_IN_SCRUS"
			always = no
		}
	}
	else_if = {
		limit = {
			solar_system = {
				OR = {
					has_star_flag = nep_whitegoo_1
					has_star_flag = nep_whitegoo_2
					has_star_flag = nep_whitegoo_3
				}
			}
			owner = { NOT = { has_technology = tech_nep_whitegoo_3_2 } }
		}
		custom_tooltip = { fail_text = "CAN_NOT_JUMP_IN_WHITEGOO"
			always = no
		}
	}
	# 莉莉		<运行负担>
#	else_if = {
#		limit = {
#			exists = solar_system
#			NOT = {
#				solar_system = {
#					exists = starbase
#					starbase = {
#						has_starbase_building = AL_AntiFTL
#						owner = { is_hostile = prevprevprev.owner }
#					}
#				}
#			}
#		}
#		custom_tooltip = {
#			text = "AL_cannot_start_jump"
#			always = no
#		}
#	}
	# 其他
	else = {
		always = yes
	}
}


###_|占领军|	ev/阿夸/HFE/致命风暴	/ZOFE/SOFE/EE	####################################
# this = country
can_spawn_occupation_armies = {
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		
		#	|其他堕落|
		#	ev
		is_country_type = fallen_empire_ev
		#	阿夸
		is_country_type = kuat_fallen_empire
		is_country_type = kuat_awakened_fallen_empire
		is_country_type = awakened_return_kuat_empire
		#	HFE	hfe_civic_egypt_fury|国策|决定是否是afe
		is_country_type = human_fallen_empire
		#	致命风暴	|afe|
		is_country_type = awakened_gate_builders
		#	ZOFE
		is_country_type = ascended_empire
		is_country_type = lost_empire
		#	SOFE
		is_progenitor_empires = yes
		is_country_type = sofe_light_seeker
		#	EE
		is_country_type = eternal_empire
	}
}


###_|UGRC传感器|	####################################
##_|UGRC传感屏蔽|	RS	/Sexp/S_tnatc/WS/wsg/古代帝国/SMCO/莉莉/thl
# this = system
# root = country
system_blocks_sensors = {
	NOT = { has_star_flag = UGRC_flg_sstm_RULE_blocks_sensors_IGNORE@root }	# |UGRC传感穿透|预留给一些暂时开图的功能
	has_star_flag = UGRC_flg_sstm_RULE_blocks_sensors@root	# |UGRC传感阻碍|83%|

#	OR = {
#		is_inside_nebula = yes
#		has_modifier = space_storm
#		has_modifier = zroni_storm
#		has_star_flag = lcluster
#		has_star_flag = sealed_system
#	}
}


###_[跃迁管制]	FW/AAR	/古代帝国/wsg/阿夸/SOFE/Giga/Ehof/seooc/多彩/精灵/TAC/莉莉	####################################
# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system
		OR = {
			###_绝对通行	FW
			root = {
				OR = {
					has_country_flag = FW_flg_cntr_CHT_orrery_ON		# 璀璨星图
					has_country_flag = FW_flg_cntr_CHT_beacon_ON		# 永恒星炬
				}
			}
			###_特殊通行	+AAR/TAC/多彩
			root = {
				#	|禁止条件|
				#	|通行可用|
				OR = {
					has_country_flag = AAR_flg_cntr_JUMP_webway_TGT		# |AAR|网道行者
					has_country_flag = TAC_traveler						# |TAC|
					has_country_flag = wtmnb_order						# |多彩|wtmnb
				}
			}
			
			###_基础条件
			AND = {
				##_Sealed system
				OR = {
					# vanilla
					NOT = { has_star_flag = sealed_system }
					AND = {
						root = { has_country_flag = entered_sealed_system }
						has_star_flag = sealed_system
					}
				}

				##_特殊禁入星系		+wsg/古代帝国/阿夸/SOFE/Giga/Ehof/seooc/多彩/TAC/莉莉
				NOR = {
					# vanilla
					has_star_flag = lcluster

					# wsg
					AND = { has_global_flag = has_wsg_mod	# 舰r激活
						OR = {
							has_star_flag = wg_sealed_system
							has_star_flag = wg_psionic_systems
							AND = { exists = space_owner
								space_owner = { is_country_type = monolith_crisis_country }
							}
						}
					}
					#	古代帝国
					has_star_flag = ag_no_jump_in_system
					#	阿夸
					has_star_flag = kuat_initial_system
					has_star_flag = Kuat_empire_system
					has_star_flag = ag_kae_e_area_system
					AND = {
						has_global_flag = starkillerbase_not_passed
						has_star_flag = starkiller_system	
					}
					#	SOFE
					has_star_flag = outercluster
					#	Giga
					has_star_flag = ehof_compound_system
					has_star_flag = giga_core_03
					cohesive_system = yes
					urmazin_system = yes
					everchanging_system = yes
					katzen_jump_blocked_system = yes
					#	seooc
					has_star_flag = nep_Krahen_cluster
					has_star_flag = nep_Scrus_cluster
					AND = {
						has_global_flag = nep_not_pass_Aemethms 
						OR = {
							has_star_flag = nep_dragon_system
							has_star_flag = nep_heptagram_cluster
						}
					}
					#	|多彩|
					AND = { has_global_flag = love_between_us	# |安装|
						OR = {
							has_star_flag = ten_crisis_system
							any_neighbor_system = { has_star_flag = ten_crisis_system }
							AND = {
								exists = event_target:holylight_god_heaven_empire 
								OR = {
									has_star_flag = SUC_lustgod_ring_world_system
									has_star_flag = init_sample_of_death
									has_star_flag = init_sample_of_prosperity
									has_star_flag = init_INN_holylight_god_system2
								}
							}
						}
					}
					#	|精灵|
					has_star_flag = ELF_Singularity_System
					has_star_flag = wtmnb_star_11th		# wtmnb
					#	TAC
				#	has_star_flag = AI_system1
				#	has_star_flag = AI_system2
				#	has_star_flag = AI_system3
				#	has_star_flag = AI_system4
				#	this = {
				#		OR = {
				#			has_megastructure = AIgate_opened
				#			has_megastructure = AIgate_opened_02
				#		}
				#	}
					#	莉莉
					has_star_flag = al_huge_home_bed
				}
			}
		}
	}
}


###_[可迁移の人口=定位]		########################################################################
# This = pop
can_resettle_pop = {
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NOT = { has_trait = trait_self_modified }
	}
	custom_tooltip = {
		fail_text = "origin_egalitarian_refuse"
		NAND = {
			pop_has_ethic = ethic_egalitarian
			is_enslaved = no
			planet = { has_modifier = paragon_origin_reformists }
		}
	}
	if = { #Done as an IF/ELSE so the tooltip isn't hideous and unreadable
		limit = { is_shackled_robot = yes }
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				is_doomsday_planet = yes
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		always = yes
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
}
### can_country_resettle
### can_resettle_planet
### can_resettle_planet_no_owner_check
### should_spawn_deposits
### is_new_colony


###_|UGRC犯罪|	####################################	|-50%|
# This = pop
pop_generates_crime = {
	has_pop_flag = UGRC_flg_pop_RULE_generates_crime	# |UGRC标签|	wsg/swg/kc/adf/PTep
#	is_sapient = yes
#	is_non_sapient_robot = no
#	is_being_assimilated = no
}


###	can_pops_grow_on_planet
###	can_pops_assemble_on_planet
###	can_pops_decline_on_planet
###	can_force_grow_on_planet
###	can_force_decline_on_planet
###	can_force_decline_species


###_|强制灭绝|	####################################	魔女
## If this returns true, the species will be set to decline even if it is not being purged
# This = species
# From = planet
## Note: success text tooltips are shown in alert_pops_declining alert.
should_force_decline_species = {
	OR = {
		# Infertile Clone Army pops should decline if in Country that can't have Vats, or there is a Vat shortage.
		custom_tooltip = {
			success_text = CLONE_ARMY_FORCE_DECLINE
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
			from = {
				OR = {
					# Check if country is unable to build Vats for this species.
					AND = {
						exists = owner
						owner = {
							OR = {
								NOT = { has_origin = origin_clone_army }					# Can't have Vats.
								has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
								NOT = { owner_main_species = { is_same_species = root } }	# Our Vats can't build this species.
							}
						}
					}
					# Vats check out, but are there more pops than Vats support?
					check_variable = { which = clone_pops_missing value < 0 }
				}
			}
		}

		#	魔女
		custom_tooltip = {
			success_text = OBJ_MASTER_FORCE_DECLINE
			has_trait = trait_reanimated_materials
			NOR = {
				has_trait = trait_cyberwitch
				has_trait = trait_cro_implants_psionics
				has_trait = trait_psionic
			}
			from = {
				OR = {
					# Check if country is unable to build Vats for this species.
					AND = {
						exists = owner
						owner = {
							OR = {
								NOT = { has_origin = origin_obj_master }					# Can't have Obj-avatars.
								has_country_flag = synthetic_empire			# Can't have Vats anymore.
							}
						}
					}
					# Vats check out, but are there more pops than Vats support?
					num_assigned_jobs = {
						job = matter_reanimator
						value = 0
					}
				}
			}
		}
	}
}




###_|国家可建公司|	ETCPM/wsg/GF/azl/azlr/hiveDLC/驴岛/精灵/莉莉/久远/星海帝皇/Ecar/rmaid/ARP	####################################
# This = country
can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		##	+ETCPM/hiveDLC/MCA/驴岛/wsg	/GF/azl/azlr/精灵	/Ecar
		OR = {
			has_authority = auth_corporate
			has_civic = civic_galactic_sovereign_megacorp
			
			#	ETCPM
			has_authority = auth_private
			#	hiveDLC
            has_valid_civic = civic_mutualistic_behavior
			has_valid_civic = civic_machine_trading
			#	MCA
			has_authority = auth_corporate_fiefdom
			has_authority = auth_cooperative
			#	驴岛
			has_civic = civic_business_union
			#	wsg
			has_authority = auth_warshipgirls
			AND = {
				has_authority = auth_shenhai
				OR = {
					has_country_flag = pantsu_shop_origin
					has_civic = civic_sh_criminal_syndicate
				}
			}
			#	GF
			has_civic = GF_civic_GK
			#	azl
			has_authority = auth_azur_lane_0
			has_authority = auth_azur_lane_1
			has_authority = auth_azur_lane_2
			has_authority = auth_azur_lane_K
			#	azlr
			AND = {
				exists = event_target:elizabeth_leader
				has_country_flag = azur_lane_leader_elizabeth
			}
			#	精灵
			is_ELF_can_build_branch_offices = yes
			#	莉莉
			has_authority = auth_AL_democratic
			has_authority = auth_AL_arsenal
			#	久远
			KZ_VOY_can_build_branch_offices = yes
			#	星海帝皇	=|义军同盟|
			is_country_type = rebel_allience
			#	ARP
			has_authority = auth_Arp_0

			#_|Ecar|
			AND = {
				has_global_flag = ideological_revolution	# |Ecar激活|
				OR = {
					has_civic = civic_family_business
					has_civic = civic_world_cooperative
					has_valid_civic = civic_state_owned_enterprises	
					has_valid_civic = civic_corporate_dominion
					has_valid_civic = civic_underworld_society
					has_valid_civic = civic_merchant_guilds
					has_valid_civic = civic_state_monopoly
					has_valid_civic = civic_machine_financial_investment
					has_active_tradition = tr_future_economy_soc
					AND = {
						has_ethic = ethic_fanatic_capitalism
						has_active_tradition = tr_future_economy
					}
				}
			}

			#	rmaid		=|外派服务飞升|
			Maid_trigger_0_can_build_branch_offices = yes
		}
	}
}


###_|国家支持公司|	AAR	/ETCPM/swg/GF/azl/azlr/SOFE/ZOFE/驴岛/莉莉/Ecar/rmaid		####################################
# This = country
can_support_branch_offices = {
	##_|禁止_国家类型|
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
			
			## 禁止所有|堕落帝国|	############
			# ev
			is_country_type = fallen_empire_ev
			# 阿夸
			is_country_type = kuat_fallen_empire
			is_country_type = kuat_awakened_fallen_empire
			is_country_type = awakened_return_kuat_empire
			# HFE	hfe_civic_egypt_fury|国策|决定是否是afe
			is_country_type = human_fallen_empire
			# 致命风暴	|afe|
			is_country_type = awakened_gate_builders
			# ZOFE
			is_country_type = ascended_empire
			is_country_type = lost_empire
			# SOFE
			is_progenitor_empires = yes
			is_country_type = sofe_light_seeker
			# EE
			is_country_type = eternal_empire
			# 莉莉
			is_country_type = al_fallen_empire
			
			## 禁止其他|特殊国家|	############
			# azlr
			has_authority = auth_azur_dictatorial
		}
	}
	##_|禁止_巨企| +AAR		/ETCPM/hiveDLC/MCA/驴岛/wsg		/GF/azl/SOFE	/Ecar
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
		OR = {
			## 特殊允许|企业政府|	############
			# AAR
			is_subject_with_preset = { PRESET = AAR_SBJ_subsidiary }
			# Ecar
			AND = {
				has_global_flag = ideological_revolution	# |Ecar激活|
				OR = {
					has_valid_civic = civic_criminal_heritage
					has_tradition = tr_future_economy
					has_civic = civic_world_cooperative
					has_civic = civic_galactic_megacorp
					has_civic = civic_galactic_sovereign
					has_civic = civic_galactic_sovereign_megacorp
					has_civic = civic_galactic_sovereign_people
				}
			}
			# rmaid
			Maid_trigger_1_can_support_branch_offices = yes

			## 禁止所有|企业政府|	############
			NOR = {
				has_authority = auth_corporate
				has_civic = civic_galactic_sovereign_megacorp
				
				#_|巨企国家|	ETCPM/hiveDLC/MCA/驴岛/wsg
				# ETCPM
				has_authority = auth_private
				# hiveDLC
				has_valid_civic = civic_mutualistic_behavior
				has_valid_civic = civic_machine_trading
				# MCA
				has_authority = auth_corporate_fiefdom
				has_authority = auth_cooperative
				# 驴岛
				has_civic = civic_business_union
				# wsg
				has_authority = auth_warshipgirls
				
				AND = {
					has_authority = auth_shenhai
					OR = {
						has_country_flag = pantsu_shop_origin
						has_civic = civic_sh_criminal_syndicate
					}
				}
				# GF
				has_civic = GF_civic_GK
				# azl
				has_authority = auth_azur_lane_1
				# SOFE
				has_valid_civic = civic_sofe_inner_strength
			}
		}
	}
	
	##_|必要国家类型|
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
		is_gestalt = no
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
		if = {
			limit = {
				is_primitive = yes
				is_gestalt = no
			}
			OR = {
				has_pre_ftl_age = atomic_age
				has_pre_ftl_age = early_space_age
			}
		}
	}
}


###_|星球支持公司|	AAR	/wsg/azl/azlr/rmaid/HFE/hiveDLC/MCA/ETCPM/莉莉/久远/Ecar/星海帝皇/精灵	####################################
# This = planet
# Root = country
can_build_branch_office_on_planet = {
	
	###_|非灭绝政体|
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	###_|未被观察|
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}
	###_core商业协定	+hiveDLC/wsg/azl/azlr/AAR/ETCPM/莉莉/久远/rmaid/精灵
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			##_|简单root条件|只要root是这些国家则必然能建造
			root = {
				OR = {
					is_criminal_syndicate = yes
					
					#	hiveDLC
					has_valid_civic = civic_mutualistic_behavior
					#	wsg
					has_civic = civic_sh_criminal_syndicate
					#	azl
					has_authority = auth_azur_lane_1
					#	莉莉
					has_authority = auth_AL_democratic
					has_authority = auth_AL_arsenal
					#	久远
					KZ_VOY_can_build_branch_offices = yes
					#	azlr
					AND = {
						exists = event_target:elizabeth_leader
						has_country_flag = azur_lane_leader_elizabeth
					}
					#	rmaid
					Maid_trigger_0_can_build_branch_offices = yes
					#	精灵
					is_ELF_can_force_build_branch_offices_on_planet = yes
				}
			}
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}
			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			##_|附庸国建造|
			root = {
				is_subject = yes
				OR = {
					has_authority = auth_corporate
					has_civic = civic_galactic_sovereign_megacorp
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			##_|宗主国建造| +wsg
			owner = {
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						has_authority = auth_corporate
						has_civic = civic_galactic_sovereign_megacorp
						
						# |wsg|	=宗主必然建造
						has_authority = auth_warshipgirls
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
			
			
			# ETCPM
			AND = {
				has_global_flag = expanded_pops_active
				owner = { has_country_flag = cb_markets_opened@root }
			}
			# HFE
			AND = {
				has_global_flag = hfe_installed
				root = { exists = overlord		overlord = { is_country = prevprev.owner } }	#_this的owner
			}
			# azl	=|自我建造|
			AND = {
				has_global_flag = azurlane_KuRUMiiii	# |azl激活|
				owner = {
					is_same_value = root
					OR = {
						has_authority = auth_azur_lane_2
						has_authority = auth_azur_lane_0
						has_authority = auth_azur_lane_K
					}
				}
			}

			# wsg	=|贸易战争|
			AND = {
				owner = { has_country_flag = lose_wg_shop_war }
				root = {
					OR = {
						has_country_flag = pantsu_shop_origin
						has_civic = civic_sh_criminal_syndicate
					}
				}
			}
			# Ecar	=|自我建造|
			AND = {
				has_global_flag = ideological_revolution	# |Ecar激活|
				owner = {
					is_same_value = root	# <建造者>和<接受者>相同
					OR = {
						has_active_tradition = tr_future_economy_soc
						has_civic = civic_state_owned_enterprises
						has_civic = civic_world_cooperative
						AND = {
							has_active_tradition = tr_future_economy
							OR = {
								has_ethic = ethic_fanatic_capitalism
								has_authority = auth_corporate
								has_civic = civic_galactic_sovereign_megacorp
								has_civic = civic_family_business
								has_valid_civic = civic_underworld_society
								has_valid_civic = civic_corporate_dominion
								has_valid_civic = civic_merchant_guilds
								has_valid_civic = civic_state_monopoly
								has_valid_civic = civic_beacon_of_liberty
							}
						}
					}
				}
			}
			# 星海帝皇	=|义军同盟|
			AND = {
				root = { is_country_type = rebel_allience }
				owner = { is_galactic_emperor = yes }
			}
		}
	}
	###_|巨企附庸|
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								has_authority = auth_corporate
								has_civic = civic_galactic_sovereign_megacorp
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							has_authority = auth_corporate
							has_civic = civic_galactic_sovereign_megacorp
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}
	###_|贸易协议| +wsg
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			##	|非罪企|
			root = { is_criminal_syndicate = no }
			##	|和平状态|
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}

			##	|wsg|
			#	深海罪企
			owner = { has_civic = civic_sh_criminal_syndicate }
			#	贸易战争
			AND = {
				owner = { has_country_flag = lose_wg_shop_war }
				root = { has_country_flag = pantsu_shop_origin }
			}
		}
	}
	###_|罪企查封|	+wsg
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			#_|非罪企|
			root = { is_criminal_syndicate = no }
			#_|当前星球未查封| +wsg
			AND = {
				root = {
					OR = {
						is_criminal_syndicate = yes
						has_civic = civic_sh_criminal_syndicate	# wsg
					}
				}
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}

			# wsg|贸易战争|
			AND = {
				owner = { has_country_flag = lose_wg_shop_war }
				root = { has_country_flag = pantsu_shop_origin }
			}
		}
	}

	### wsg
	custom_tooltip = {
		fail_text = requires_recipient_not_warshipgirls
		NAND = {
			has_global_flag = has_wsg_mod	# 舰r激活
			exists = owner
			owner = {
				OR = {
					has_authority = auth_warshipgirls	# 舰r=不接受分公司
					AND = {
						has_authority = auth_shenhai	# 深海|战利品商店||罪企|=不接受分公司
						OR = {
							has_country_flag = pantsu_shop_origin
							has_civic = civic_sh_criminal_syndicate
						}
					}
				}
			}
		}
	}
	### Ecar
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REFORM_AND_OPENING_UP
		NAND = {
			has_global_flag = ideological_revolution	# Ecar激活
			exists = owner
			root = {
				OR = {
					has_valid_civic = civic_state_owned_enterprises
					has_active_tradition = tr_future_economy_soc
				}
			}
			NOR = {
				root = { has_policy_flag = reform_and_opening_up }
				owner = { is_same_value = root }
			}
		}
	}
	
	hidden_trigger = {
		### MCA
		if = { limit = { has_global_flag = using_mod_more_corporate_authorities }
			NOR = {
				NOT = { root = { has_ai_personality = principled_rogues		is_ai = yes } }	
				owner = { their_opinion = { who = root value < 0 } }
				owner = {
					their_opinion = { who = root value < 20 }
					NOT = { has_opinion_modifier = { who = root modifier = opinion_new_contact is_reverse = yes } }
				}
			}
		}
		###	rmaid	|失控女仆|写得挺精致√
		Maid_trigger_2_can_build_branch_office_on_planet = yes
		### 精灵
		ELF_can_build_branch_office_on_planet_rules = yes
	}
}


###_|UGRC罪企|	ETCPM/hiveDLC/MCA/wsg/ev/azlr/精灵/Ecar	####################################
# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	#	|政体|
	OR = {
		has_authority = auth_corporate
		has_valid_civic = civic_galactic_sovereign_megacorp
		#	UGRC
		has_country_flag = UGRC_flg_cntr_RULE_criminal_syndicate

		#	wsg
		has_authority = auth_warshipgirls
	}
	#	|国策|
	OR = {
		has_valid_civic = civic_criminal_heritage
		#	UGRC
		has_country_flag = UGRC_flg_cntr_RULE_criminal_syndicate
		
		#	Ecar
		has_civic = civic_family_business
		has_civic = civic_world_cooperative
		#	wsg
		has_civic = civic_sh_criminal_syndicate
		#	ev
		has_valid_civic = civic_ev_criminal_ship
	}
}


###_|杂交许可|	wsg/PF/SC/Ecar	####################################
# This = planet
can_crossbreed_species_on_planet = {
	exists = owner
	#	|PF|开关
	NOT = { has_global_flag = PF_flg_glbl_Hybrid_no }
	#	wsg/SC	禁止ntr
	any_owned_species = {
		NOR = {
			#	wsg
			has_wg_traits = yes
			is_archetype = WARSHIPGIRL
			is_archetype = SHENHAI
			is_archetype = UNITED_FLEET
			is_archetype = NANITES_CROP
			#	SC
			UGRC_trgr_spcs_SC = yes
		}
	}
	
	AND = {
		# +Ecar
		owner = {
			OR = {
				has_ascension_perk = ap_xeno_compatibility
				# Ecar
				AND = {
					has_valid_civic = civic_liberty_of_libido
					has_ascension_perk = ap_evolutionary_mastery
				}
			}
		}
		count_species = {
			limit = { is_crossbreeding_possible = yes }
			count >= 2
		}
	}
}
### wsg/SC	####################################
# This = species one
# Root = species two
can_crossbreed_species = {
	is_crossbreeding_possible = yes
	root = { is_crossbreeding_possible = yes }
	NOR = {
		is_subspecies = root
		root = { is_subspecies = prev }
		#	wsg	|禁止ntr|
		has_wg_traits = yes
		is_archetype = WARSHIPGIRL
		is_archetype = SHENHAI
		is_archetype = UNITED_FLEET
		is_archetype = NANITES_CROP
		# SC
		UGRC_trgr_spcs_SC = no
	}

	root = {
		NOR = {
			#	wsg	|禁止ntr|
			has_wg_traits = yes
			is_archetype = WARSHIPGIRL
			is_archetype = SHENHAI
			is_archetype = UNITED_FLEET
			is_archetype = NANITES_CROP
			# SC
			UGRC_trgr_spcs_SC = no
		}
	}
}


###_[seooc]	####################################
# No scope
#	can_win_timed_victory = {
#		custom_tooltip = {
#			fail_text = VICTORY_CONDITION_CRISIS_IN_PROGRESS
#			NOR = {
#				any_country = {
#					is_crisis_faction = yes
#					NOT = { is_country_type = awakened_marauders }
#				}
#				has_global_flag = nep_Krahen_crisis		# seooc
#				has_global_flag = nep_corrupted_finalweapons_begin		# seooc
#			}
#		}
#		custom_tooltip = {
#			fail_text = VICTORY_CONDITION_WAR_IN_HEAVEN_IN_PROGRESS
#			NOT = { has_global_flag = war_in_heaven_ongoing }
#		}
#	}




###_[银河市场]		ev/ZOFE/SOFE/EE/UR	####################################
# This = country
can_use_galactic_market = {
	OR = {
		is_country_type = default
		
		#	ev
		AND = {
			is_country_type = default_ev
			NOT = { has_policy_flag = ev_no_use_galactic_market }
		}
		#	ZOFE
		is_country_type = ascended_empire
		is_country_type = lost_empire
		#	SOFE
		is_country_type = sbtg_stellarborne_empire_active
		#	EE
		is_country_type = eternal_empire
	}
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
		
		#	UR
		has_country_flag = dark_side
	}
}


###	wsg/AUP/ETCPM/PTep/多彩/SC/魔女		(如果有问题就恢复vanilla)
#_pop_trgr	[ariphaos_patch_slaves_expel]
# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	exists = owner
	OR = {
		is_enslaved = yes
		is_non_sapient_robot = yes
		is_shackled_robot = yes
		is_being_purged = yes	# AUP
		# ETCPM
		AND = {
			has_job = servant_noble
			ROOT = { allows_slavery = yes }
		}
	}
	#	ETCPM
	if = { limit = { has_global_flag = expanded_pops_active }	#_|激活|
		NOT = { owner = { has_country_flag = gai_machines_have_organics } }
		OR = {
			ROOT = { is_ai = no }
			AND = {
				OR = { is_unemployed = yes		has_job = servant_noble }
				planet = {
					count_owned_pop = {
						count > 2
						limit = {
							OR = { is_unemployed = yes		has_job = servant_noble }
							NOR = {
								is_pop_category = specialist
								is_pop_category = ruler
							}
						}
					}
				}
			}
			AND = {
				OR = { has_job = servant has_job = servant_noble }
				planet = {
					free_amenities > 20
				}
			}
		}
	}
	#	wsg		禁止ntr
	has_wg_traits = no
	species = { UGRC_trgr_spcs_WSG = no }
	#	SC
	species = { UGRC_trgr_spcs_SC = no }
	#	PTep
	NOT = { has_trait = trait_plentiful_traditions_pt_cocoon }
	#	多彩
	can_infest_pops_dc = no
	#	魔女
	NOR = {
		has_trait = trait_servitude
		has_trait = trait_reanimated_materials
	}
	
	##	+AUP	############################################
	OR ={
		ariphaos_patch_slaves_expel = yes	# AUP
		ROOT = { is_ai = no }
		has_citizenship_rights = no
		##	+AUP
		AND = {
			is_being_assimilated = no		# AUP
			is_unemployed = yes
			planet = {
				num_unemployed > 2			# AUP	|v=3|
			}
			# AUP
			OR = {
				NOT = { has_trait = trait_syncretic_proles }
				ROOT = { NOT = { has_origin = origin_syncretic_evolution } }
			}
		}
	}
	if = {
		limit = {
			has_global_flag = organic_slave_trade_banned_flag
		}
		is_organic_species = no
	}
	if = {
		limit = {
			has_global_flag = sentient_slave_trade_banned_flag
		}
		is_sapient = no
	}
	NOR = {
		# Since they can't reproduce, they die out too fast for anyone to want to buy them.
		has_trait = trait_clone_soldier_infertile
		has_trait = trait_clone_soldier_infertile_full_potential
	}
}




###_|星海议会|	ev/ZOFE/SOFE/UR/wsg/MECR	####################################
# This = country
can_be_part_of_galactic_community = {
	##	+ev/ZOFE/SOFE/MECR
	custom_tooltip = {
		fail_text = "community_default_failtext"
		OR = {
			is_country_type = default
			is_country_type = default_ev		# ev
			is_country_type = ascended_empire	# ZOFE
			is_country_type = sbtg_stellarborne_empire_active	# SOFE
			MECR_trigger_0_community_country_type = yes		#MECR
		}
	}
	##	+UR
	custom_tooltip = {
		fail_text = "community_homicidal_failtext"
		NOR = {
			has_civic = civic_fanatic_purifiers
			has_civic = civic_hive_devouring_swarm
			has_civic = civic_machine_terminator
			
			# UR
			has_country_flag = dark_side
		}
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
	
	##	wsg
	custom_tooltip = { #焚飞齐宣王被踢出共同体
		fail_text = "community_declared_crisis_failtext"
		NOT = { has_country_flag = wgfm_quit_community }
	}
	##	MECR
	MECR_trigger_1_can_be_part_of_galactic_community = yes
}

###_|星海帝国|	ev/ZOFE/SOFE/UR/wsg/MECR	####################################
# This = country
can_be_part_of_galactic_empire = {
	##	+ev/ZOFE/SOFE/MECR
	custom_tooltip = {
		fail_text = "community_default_failtext"
		OR = {
			is_country_type = default
			is_country_type = default_ev		# ev
			is_country_type = ascended_empire	# ZOFE
			is_country_type = sbtg_stellarborne_empire_active	# SOFE
			MECR_trigger_0_community_country_type = yes		# MECR
		}
	}
	##	+UR
	custom_tooltip = {
		fail_text = "community_homicidal_failtext"
		NOR = {
			has_civic = civic_fanatic_purifiers
			has_civic = civic_hive_devouring_swarm
			has_civic = civic_machine_terminator
			
			# UR
			has_country_flag = dark_side
		}
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		has_been_declared_crisis = no
	}
	custom_tooltip = {
		fail_text = "community_declared_crisis_failtext"
		#fail_text = "community_overlord_declared_crisis_failtext"
		OR = {
			NOT = { exists = overlord }
			overlord = { has_been_declared_crisis = no }
		}
	}
	
	##	wsg
	custom_tooltip = { #焚飞齐宣王被踢出共同体
		fail_text = "community_declared_crisis_failtext"
		NOT = { has_country_flag = wgfm_quit_community }
	}
	##	MECR
	MECR_trigger_2_can_be_part_of_galactic_empire = yes
}

###_[ZOFE/SOFE/UR/wsg]	####################################
# This = country
can_see_galactic_community = {
	##	+ZOFE/SOFE/UR
	OR = {
		has_country_flag = galcom_form_aye
		has_country_flag = galcom_form_nay
		is_galactic_community_member = yes
		is_country_type = lost_empire		# ZOFE
        is_country_type = sbtg_stellarborne_empire_active	# SOFE
		has_country_flag = dark_side		# UR
	}

	#	wsg
	custom_tooltip = { #焚飞齐宣王被踢出共同体
		fail_text = "community_declared_crisis_failtext"
		NOT = { has_country_flag = wgfm_quit_community }
	}
}

###_[ev/ZOFE/SOFE/UR/wsg/MECR]	####################################
# This = country
can_be_part_of_galactic_council = {
	##	+ev/ZOFE/SOFE/MECR
	OR = {
		is_country_type = default
		is_country_type = default_ev		# ev
		is_country_type = ascended_empire	# ZOFE
        is_country_type = sbtg_stellarborne_empire_active	# SOFE
		MECR_trigger_0_community_country_type = yes		# MECR
	}
	##	+UR
	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator
		
		# UR
		has_country_flag = dark_side
	}
	
	##	wsg
	custom_tooltip = {#焚飞齐宣王被踢出共同体
		fail_text = "community_declared_crisis_failtext"
		NOT = { has_country_flag = wgfm_quit_community }
	}
}


###	must_be_advanced_empire
###	is_allowed_to_be_advanced_empire
###	has_enough_pops_for_necrophage_on_planet




###_[pop可移民]		ETCPM/HFE	####################################
# Root = current planet
# This = pop
# Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
can_pop_auto_migrate = {
	## +ETCPM/HFE
	OR = {
		is_unemployed = yes
		# ETCPM
		has_job = grunt
		has_job = slave_toiler
		# HFE
		hfe_trigger_unemployed_auto_migrate = yes
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ASSIMILATED
		is_being_assimilated = no
	}

	## +HFE
	OR = {
		AND = {
			is_shackled_robot = no
			is_enslaved = no
		}
		custom_tooltip = {
			fail_text = AUTO_MIGRATE_SLAVE_PROCESSING
			OR = {
				planet = {
					OR = {
						has_building = building_slave_processing
						AND = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = {
									has_starbase_building = ring_slave_processing_facility
								}
							}
						}
					}
				}
				solar_system = {
					count_starbase_buildings = {
						type = transit_hub
						count >= 1
						include_being_constructed = no
					}
				}
			}
		}
		# HFE
		owner = {
			OR = {
				is_country_type = hfe_pirate
				hfe_trigger_is_human_fallen = yes
			}
		}
	}
}

###_[星球可移民]	伞优化/产业革命	/ETCPM/ZOFE/EE/ev/HFE/PDhab	####################################
# This = planet
# Checked before can_pop_auto_migrate to save performance
can_planet_auto_migrate = {
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_CULTURE_SHOCK
		NOT = { has_modifier = planet_culture_shock }
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_COLONY_TOO_NEW
		OR = {
			colony_age > 60
			is_capital = yes # Don't break Doomsday!
			# ETCPM
			has_planet_flag = void_dweller_habitat # Don't break Void Dwellers!
			# PDhab
			has_planet_flag = pd_habitat_start_luna
			has_planet_flag = pd_habitat_start_mars
		}
	}
	##	+ZOFE/EE/ev/HFE
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_country_type = default
				is_country_type = awakened_fallen_empire
				#	ZOFE
				is_country_type = ascended_empire
				is_country_type = lost_empire
				is_country_type = awakened_original_empire
				#	EE
				is_country_type = eternal_empire
				#	ev				
				is_country_type = default_ev
				#	HFE
				is_country_type = hfe_pirate
				hfe_trigger_is_human_fallen = yes
			}
		}
	}
	
	##	伞优化
	custom_tooltip = {
		fail_text = UGRC_failtip_PF_VAM
		NOT = { has_global_flag = PF_flg_VAM_disabled }
	}
	##	产业革命
	custom_tooltip = {
		fail_text = UGRC_failtip_PR_planet
		NOT = { has_planet_flag = PR_flg_plnt_VALID }
	}
}

###	Eevt/EFevt	####################################
can_planet_receive_auto_migration = {
	NOR = {
		planet_devastation >= 10
		has_modifier = planet_culture_shock
		is_doomsday_planet = yes

		# Eevt
		has_modifier = deteriorating_ecosystem
		has_modifier = catastrophe_approach
		has_modifier = apocalypse
		has_modifier = ravenous_locusts
		has_modifier = planet_active_worm
		# EFevt
		has_modifier = mzilli_events_dying_world
	}
}




###_[基因修饰]	####################################
###_|宜居改造|	+FW/PF
#This, root = country
can_gene_mod_habitability = {
	OR = {
		has_technology = tech_glandular_acclimation
		has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
	}
	#	PF
	NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
}
###_|高级特质|	+FW/PF/wsg/涅槃
#This, root = country
can_add_advanced_traits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_creation
		has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
		has_wsg_genemodding_tech = yes	# wsg
		is_nirvana_empire = yes			# 涅槃
	}
	#	PF
	NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
}
###_|负面特质|	+FW/PF/wsg/涅槃
#This, root = country
can_add_negative_traits_organic = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_resequencing
		has_tradition = tr_cybernetics_integrated_anatomy
		has_tradition = tr_cybernetics_assimilator_integrated_anatomy
		has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
		has_wsg_genemodding_tech = yes	# wsg
		is_nirvana_empire = no			# 涅槃
	}
	#	PF
	NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
}
###_|移除高级|	FW/PF/wsg/涅槃
#This, root = country
can_remove_positive_traits_organic = {
	OR = {
		#_|乌托邦|	+wsg
		AND = {
			has_utopia = yes
			OR = {
				has_tradition = tr_genetics_resequencing
				has_tradition = tr_cybernetics_integrated_anatomy
				has_tradition = tr_cybernetics_assimilator_integrated_anatomy
				has_wsg_genemodding_tech = yes	# wsg
			}
		}
		#_|毒种|
		AND = {
			has_toxoids = yes
			has_origin = origin_overtuned
		}
		#_|科技|
		has_technology = tech_epigenetic_triggers
		
		#_|mod|
		has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
		is_nirvana_empire = yes	#	涅槃
	}
	#	PF
	NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
}
###_|有机头像|	+FW/PF/wsg/涅槃
#This, root = country
can_modify_organic_portraits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_enhanced_expression
		has_country_flag = FW_flg_cntr_CHT_genemodding	# FW
		has_wsg_genemodding_tech = yes	# wsg
		is_nirvana_empire = yes			# 涅槃
	}
	#	PF
	NOT = { has_country_flag = PF_flg_cntr_STOP_ai_species_mod }
}




### can_have_first_contact
### can_use_envoys_to_raise_imperial_authority
### can_use_envoys_to_lower_imperial_authority
### can_fill_drone_job
### can_fill_worker_job
### can_fill_specialist_job
### can_fill_ruler_job
### should_planetary_automate
### dismiss_leader_cost


###_[解雇领袖]	SC/Ecar	####################################
# this = leader
can_dismiss_leader = {
	custom_tooltip = {
		fail_text = "requires_actor_not_feudal_society"
		exists = owner
		owner = {
			NOT = { has_valid_civic = civic_feudal_realm }
		}
	}
	if = {
		limit = {
			leader_class = admiral
			is_idle = no
			# Rulers and heirs can't be dismissed any way and can be non-idle
			is_ruler = no
			is_heir = no
		}
		custom_tooltip = {
			fail_text = "requires_fleet_control"
			exists = fleet
			fleet = {
				controller = {
					is_same_value = prev.owner
					is_same_value = prevprev.owner
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_heir = yes
				is_ruler = yes
			}
		}
		custom_tooltip = {
			always = no
			fail_text = "can_not_dismiss_rulers"
		}
	}

	# SC
	custom_tooltip = {
		fail_text = "cannot_fire_StellarisCraft_leader"
		NOT = { has_leader_flag = StellarisCraft_event_leader }
	}
	# Ecar
	custom_tooltip = {
		fail_text = "requires_actor_not_coalition_government_society"
		exists = owner
		owner = {
			NOT = { has_valid_civic = civic_coalition_government }
		}
	}
}


###	can_country_change_councilors
###	should_count_towards_leader_cap
###	can_country_connect_to_relay_network
###	should_ai_build_stronghold_on_vulnerable_planet
###	will_leader_retire
###	can_get_external_leader_pool_candidate


###_[交易领袖]	FW/wsg/rmaid/多彩/GF		####################################
# This = leader, leader we'd like to trade
# Root = country, country that owns the leader currently
# From = country, country that would receive the leader
can_trade_leader = {
	##_|mod特殊|	FW/
	hidden_trigger = {
		FW_trgr_ldr_SP = no	# |FW特殊领袖|
	}
	##	wsg
	custom_tooltip = {
		fail_text = "cannot_sold_wg_leader"
		is_special_affection_leader = no
		is_wg_event_leader = no
	}

	##_|特殊任务|	+rmaid/多彩
	# The leader must have a trait from a specialist subject type.
	this = {
		OR = {
			has_specialist_subject_leader_trait = yes
			has_specialist_subject_leader_trait_maid = yes	# rmaid
			has_leader_flag = tradable_leader	# 多彩
		}
		is_heir = no
	}
	##_|同类政体|	+多彩
	# The subject and overlord must both be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				has_authority = auth_machine_intelligence
			}
			FROM = {
				has_authority = auth_machine_intelligence
			}
		}
		AND = {
			ROOT = {
				has_authority = auth_hive_mind
			}
			FROM = {
				has_authority = auth_hive_mind
			}
		}

		#	多彩
		AND = {
			has_global_flag = nongestalt_leader_always_tradable
			this.species = {
				NOR = {
					has_trait = trait_hive_mind
					has_trait = trait_machine_unit
				}
			}
		}
		#	GF
		AND = {
			# 是机械领袖
			species = { is_robotic = yes }
			# 必须为少前政体附庸
			ROOT = {
				is_valid_GF_OGAS_subnet = yes
			}
			# 少前政体必须为宗主
			FROM = {
				is_overlord_to = ROOT
				has_authority = GF_auth_commonwealth
			}
		}
	}
	##	|国家类型|	+ZOFE
	# The overlord can't be a fallen or awakened empire.
	ROOT = {
		NAND = {
			is_overlord = yes
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				#	ZOFE
				is_country_type = original_empire
				is_country_type = awakened_original_empire
			}
		}
	}
	NOR = { 
		has_trait = leader_trait_fotd_scientist
		has_trait = leader_trait_fotd_admiral
	}
}

###_[交易舰队]	wsg/阿夸/ZOFE		####################################
# This = fleet, fleet we'd like to trade
# Root = country, country that owns the fleet currently
# From = country, country that would receive the fleet
can_trade_fleet = {
	##	wsg
	if = { limit = { has_global_flag = has_wsg_mod }	# 舰r激活
		custom_tooltip = { fail_text = "cannot_sold_wg_fleet"
			NOT = { any_owned_ship = { is_wg_event_limit_ships = yes } }
		}
	}
	##	阿夸
	if = { limit = { has_global_flag = install_kuat_mod }	# 阿夸激活
		custom_tooltip = { fail_text = "cannot_sold_kuat_fleet"
			NOT = { any_owned_ship = { kuat_is_flagship_system_protection = yes } }
		}
	}

	##	|国家类型|	+ZOFE
	ROOT = {
		NAND = {
			is_overlord = yes
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
				#	ZOFE
				is_country_type = original_empire
				is_country_type = awakened_original_empire
			}
		}
	}
}


###	chance_for_external_leader_pool
###	council_agenda_early_activation_cost
###	leader_election_elect_cost
###	emergency_election_cost_rule
###	leader_election_support_cost
###	leader_election_weight
###	are_pre_ftls_unaware

###_|地改候选|
###	is_terraforming_candidate
###	has_ascension_for_terraforming_candidate

###	can_be_renamed_by

###_|空间站建设许可|
###	can_build_station_around
###	can_build_mining_station_around
###	can_build_research_station_around
###	can_build_military_station_around
###	can_build_observation_station_around
###	can_build_starbase_around

