country = {
	hidden = yes
	use_for_ai_budget = yes
	generate_mult_modifiers = {
		produces
		cost
		upkeep
	}
	generate_add_modifiers = {
		produces
		cost
		upkeep
	}
}

country_base = {
	parent = country
	generate_add_modifiers = {
		produces
	}
	generate_mult_modifiers = {
		produces
	}
	modifier_category = country
}

ships = {
	use_for_ai_budget = yes
	generate_mult_modifiers = {
		upkeep
		cost
	}
	ai_use_parent_for_resources_upkeep = {
		energy
	}
	parent = country
	modifier_category = ship
	triggered_cost_modifier = {
		key = starbase_shipyard_build
		use_parent_icon = yes
		modifier_types = {
			mult
		}
	}
	triggered_cost_modifier = {
		key = gdf_ship
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			has_ship_owner_type = galactic_community
		}
	}
	triggered_cost_modifier = {
		key = ship_corvette
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			OR = {
				is_ship_size = corvette
				is_ship_size = offspring_corvette
				is_ship_size = frigate
			}
		}
	}
	triggered_cost_modifier = {
		key = ship_destroyer
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			OR = {
				is_ship_size = destroyer
				is_ship_size = offspring_destroyer
			}
		}
	}
	triggered_cost_modifier = {
		key = ship_cruiser
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			OR = {
				is_ship_size = cruiser
				is_ship_size = offspring_cruiser
			}
		}
	}
	triggered_cost_modifier = {
		key = ship_battleship
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			OR = {
				is_ship_size = battleship
				is_ship_size = offspring_battleship
			}
		}
	}
	triggered_cost_modifier = {
		key = ship_military_station_small
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = military_station_small
		}
	}
	triggered_upkeep_modifier = {
		key = ship_military_station_small
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes
			is_ship_size = military_station_small
		}
	}
	triggered_cost_modifier = {
		key = ship_military
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_class = shipclass_military
				is_ship_class = shipclass_military_special
			}
		}
	}
	triggered_upkeep_modifier = {
		key = ship_military
		use_parent_icon = yes
		modifier_types = {
			mult
		}
		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_class = shipclass_military
				is_ship_class = shipclass_military_special
			}
		}
	}
}

planets = {
	parent = country
	use_for_ai_budget = yes
	ai_use_parent_for_resources_upkeep = {
		energy
		food
		minerals
		love_juice
		holylight_crystal
		alloys
		sr_christian
		excellent_slave
		sr_beauty
	}
	hidden = yes
}

planet_districts = {
	parent = planet_structures
	generate_mult_modifiers = {
		cost
		upkeep
	}
	generate_add_modifiers = {
		produces
	}
	modifier_category = planet
}

planet_jobs = {
	parent = planets
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
	modifier_category = pop
	triggered_produces_modifier = {
		key = planet_jobs_slave
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = slave
			has_job_category = worker
		}
	}
	triggered_produces_modifier = {
		key = planet_psionic_jobs
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				has_trait = trait_psionic
				has_trait = trait_latent_psionic
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_worker_ownership_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = owner
			has_living_standard = {
				country = owner
				type = living_standard_worker_ownership
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_cyborg_jobs
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
		}
	}
	triggered_produces_modifier = {
		key = planet_virtual_jobs
		modifier_types = {
			mult
		}
		trigger = {
			has_virtual_species_trait = yes
		}
	}
	triggered_produces_modifier = {
		key = habitat_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = planet
			planet = { is_planet_class = pc_habitat }
		}
	}
	triggered_produces_modifier = {
		key = non_artificial_planet_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = planet
			planet = { is_artificial = no }
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_worker
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave					# Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_cyborg_worker
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_robot_worker
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = worker
				is_pop_category = simple_drone
				is_pop_category = robot_servant
			}
		}
	}
	triggered_produces_modifier = {
		#use this one if deliberately excluding worker drones
		key = planet_jobs_worker_only
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave					# Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_specialist
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = specialist
				is_pop_category = complex_drone				#planet_jobs_complex_drone is preferable for stuff visible during galaxy setup
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}
	triggered_produces_modifier = {
		#use this one if deliberately excluding complex drones
		key = planet_jobs_specialist_only
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = specialist
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_ruler
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = ruler
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_simple_drone
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = simple_drone
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_complex_drone
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = complex_drone
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_complex_and_simple_drone
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = complex_drone
				is_pop_category = simple_drone
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_robotic
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
		}
	}
	triggered_produces_modifier = {
		key = planet_jobs_organics
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = no
		}
	}
}

planet_livestock = {
	parent = planet_jobs_productive
	generate_add_modifiers = {
		produces
	}
	generate_mult_modifiers = {
		produces
	}
	modifier_category = pop
	# Inherited Modifiers
	triggered_produces_modifier = {
		key = planet_farmers
		modifier_types = {
			mult
			add
		}
		trigger = {
			has_job = livestock	# This check is done so that livestock working zoo jobs don't inherit the modifier
			is_organic_species = yes
			is_lithoid = no
		}
		use_parent_icon = yes
	}
	triggered_produces_modifier = {
		key = planet_miners
		modifier_types = {
			mult
			add
		}
		trigger = {
			has_job = livestock	# This check is done so that livestock working zoo jobs don't inherit the modifier
			is_organic_species = yes
			is_lithoid = yes
		}
		use_parent_icon = yes
	}
}

planet_pops = {
	parent = planets
	generate_add_modifiers = {
		produces
		upkeep
	}
	generate_mult_modifiers = {
		produces
		upkeep
	}
	modifier_category = pop
	triggered_upkeep_modifier = {
		key = planet_pops_robotics
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
		}
	}
	triggered_upkeep_modifier = {
		key = planet_pops_cyborgs
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
		}
	}
	triggered_upkeep_modifier = {
		key = planet_pops_organics
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = no
		}
	}
	triggered_upkeep_modifier = {
		key = planet_pops_unemployed
		modifier_types = {
			add
		}
		trigger = {
			is_unemployed = yes
		}
	}
	triggered_produces_modifier = {
		key = planet_pops_unemployed_lust_slave
		modifier_types = {
			add
		}
		trigger = {
			is_pop_category = slave
			OR = {
				has_job = nojob_sexslave
				has_job = volunteer_sexslave
				has_job = full_time_sex_toy
			}
		}
	}
	triggered_produces_modifier = {
		key = planet_dcyh_pops_militarist
		modifier_types = {
			add
		}
		trigger = {
			has_ethic = ethic_militarist
		}
	}
	triggered_upkeep_modifier = {
		key = planet_dcyh_pops_militarist
		modifier_types = {
			add
		}
		trigger = {
			has_ethic = ethic_militarist
		}
	}
	triggered_upkeep_modifier = {
		key = planet_pops_lust_slave
		modifier_types = {
			add
		}
		trigger = {
			is_pop_category = slave
			has_trait = trait_all_slave
		}
	}
}

pop_category_slave = {
	parent = planet_pops
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
	modifier_category = pop
}

pop_category_workers = {
	parent = planet_pops
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
	modifier_category = pop
}
